{
  "api/Apache.Ignite.BasicAuthenticator.html": {
    "href": "api/Apache.Ignite.BasicAuthenticator.html",
    "title": "Class BasicAuthenticator | Apache Ignite.NET API Documentation",
    "keywords": "Class BasicAuthenticator Namespace Apache.Ignite Assembly Apache.Ignite.dll Basic authenticator with username and password. Credentials are sent to the server in plain text, unless SSL/TLS is enabled - see SslStreamFactory. public sealed class BasicAuthenticator : IAuthenticator Inheritance object BasicAuthenticator Implements IAuthenticator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Properties Identity Gets the identity. public object Identity { get; } Property Value object Password Gets or sets the password. public string Password { get; set; } Property Value string Secret Gets the secret. public object Secret { get; } Property Value object Type Gets the authenticator type. public string Type { get; } Property Value string Username Gets or sets the username. public string Username { get; set; } Property Value string Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Apache.Ignite.BigDecimal.html": {
    "href": "api/Apache.Ignite.BigDecimal.html",
    "title": "Struct BigDecimal | Apache Ignite.NET API Documentation",
    "keywords": "Struct BigDecimal Namespace Apache.Ignite Assembly Apache.Ignite.dll Big decimal. Ignite supports values with up to MaxValue precision (in tables, SQL, Compute, and other APIs). .NET decimal has 28-29 digit precision and can not represent all values that Ignite supports. This type fills the gap. public readonly record struct BigDecimal : IComparable<BigDecimal>, IComparable, IEquatable<BigDecimal> Implements IComparable<BigDecimal> IComparable IEquatable<BigDecimal> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors BigDecimal(decimal) Initializes a new instance of the BigDecimal struct. public BigDecimal(decimal value) Parameters value decimal Decimal value. BigDecimal(BigInteger, short) Initializes a new instance of the BigDecimal struct. public BigDecimal(BigInteger unscaledValue, short scale) Parameters unscaledValue BigInteger Unscaled value. scale short Scale. Properties Scale Gets the scale. public short Scale { get; } Property Value short UnscaledValue Gets the unscaled value. public BigInteger UnscaledValue { get; } Property Value BigInteger Methods CompareTo(BigDecimal) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(BigDecimal other) Parameters other BigDecimal An object to compare with this instance. Returns int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. CompareTo(object?) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(object? obj) Parameters obj object An object to compare with this instance. Returns int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes obj in the sort order. Zero This instance occurs in the same position in the sort order as obj. Greater than zero This instance follows obj in the sort order. Exceptions ArgumentException obj is not the same type as this instance. ToDecimal() Converts the value of this instance to its equivalent decimal representation. public decimal ToDecimal() Returns decimal Decimal representation of the current value. Exceptions OverflowException Value was either too large or too small for a Decimal. ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. ToString(IFormatProvider?) Converts the numeric value of this object to its equivalent string representation. public string ToString(IFormatProvider? provider) Parameters provider IFormatProvider An object that supplies culture-specific formatting information. Returns string The string representation of the current value. Operators operator >(BigDecimal, BigDecimal) public static bool operator >(BigDecimal left, BigDecimal right) Parameters left BigDecimal right BigDecimal Returns bool operator >=(BigDecimal, BigDecimal) public static bool operator >=(BigDecimal left, BigDecimal right) Parameters left BigDecimal right BigDecimal Returns bool operator <(BigDecimal, BigDecimal) public static bool operator <(BigDecimal left, BigDecimal right) Parameters left BigDecimal right BigDecimal Returns bool operator <=(BigDecimal, BigDecimal) public static bool operator <=(BigDecimal left, BigDecimal right) Parameters left BigDecimal right BigDecimal Returns bool"
  },
  "api/Apache.Ignite.ClientOperationType.html": {
    "href": "api/Apache.Ignite.ClientOperationType.html",
    "title": "Enum ClientOperationType | Apache Ignite.NET API Documentation",
    "keywords": "Enum ClientOperationType Namespace Apache.Ignite Assembly Apache.Ignite.dll Client operation type. public enum ClientOperationType Fields ComputeCancel = 23 Cancel compute job. ComputeChangePriority = 24 Change compute job priority (ChangePriorityAsync(int)). ComputeExecute = 18 Compute (SubmitAsync<TTarget, TArg, TResult>(IJobTarget<TTarget>, JobDescriptor<TArg, TResult>, TArg), SubmitBroadcastAsync<TTarget, TArg, TResult>(IBroadcastJobTarget<TTarget>, JobDescriptor<TArg, TResult>, TArg)). ComputeExecuteMapReduce = 19 Compute (SubmitMapReduceAsync<TArg, TResult>(TaskDescriptor<TArg, TResult>, TArg)). ComputeGetStatus = 22 Get status of a compute job (GetStateAsync()). PrimaryReplicasGet = 25 Get primary replicas (GetPrimaryReplicasAsync()). SqlExecute = 20 SQL (ExecuteAsync(ITransaction?, SqlStatement, params object?[]?), ExecuteAsync<T>(ITransaction?, SqlStatement, params object?[]?)). SqlExecuteScript = 21 SQL script (ExecuteScriptAsync(SqlStatement, params object?[]?)). StreamerBatchSend = 26 Send data streamer batch (IDataStreamerTarget<T>). StreamerWithReceiverBatchSend = 27 Send data streamer batch with receiver (IDataStreamerTarget<T>). TableGet = 1 Get table (GetTableAsync(string)). TablesGet = 0 Get tables (GetTablesAsync()). TupleContainsKey = 17 Contains key (ContainsAsync(ITransaction?, TK)). TupleDelete = 12 Delete (DeleteAsync(ITransaction?, T)). TupleDeleteAll = 13 Delete All (DeleteAllAsync(ITransaction?, IEnumerable<T>)). TupleDeleteAllExact = 15 Delete All Exact (DeleteAllExactAsync(ITransaction?, IEnumerable<T>)). TupleDeleteExact = 14 Delete Exact (DeleteExactAsync(ITransaction?, T)). TupleGet = 3 Get (GetAsync(ITransaction?, T)). TupleGetAll = 5 Get All (GetAllAsync(ITransaction?, IEnumerable<T>)). TupleGetAndDelete = 16 Get and Delete (GetAndDeleteAsync(ITransaction?, T)). TupleGetAndReplace = 11 Get and Replace (GetAndReplaceAsync(ITransaction?, T)). TupleGetAndUpsert = 6 Get and Upsert (GetAndUpsertAsync(ITransaction?, T)). TupleInsert = 7 Insert (InsertAsync(ITransaction?, T)). TupleInsertAll = 8 Insert All (InsertAllAsync(ITransaction?, IEnumerable<T>)). TupleReplace = 9 Replace (ReplaceAsync(ITransaction?, T)). TupleReplaceExact = 10 Replace Exact (ReplaceAsync(ITransaction?, T, T)). TupleUpsert = 2 Upsert (UpsertAsync(ITransaction?, T)). TupleUpsertAll = 4 Upsert (UpsertAllAsync(ITransaction?, IEnumerable<T>))."
  },
  "api/Apache.Ignite.ClusterInitFailureException.html": {
    "href": "api/Apache.Ignite.ClusterInitFailureException.html",
    "title": "Class ClusterInitFailureException | Apache Ignite.NET API Documentation",
    "keywords": "Class ClusterInitFailureException Namespace Apache.Ignite Assembly Apache.Ignite.dll Thrown when cluster initialization failed. [Serializable] public sealed class ClusterInitFailureException : IgniteException, ISerializable Inheritance object Exception IgniteException ClusterInitFailureException Implements ISerializable Inherited Members IgniteException.ErrorPrefix IgniteException.GroupName IgniteException.Code IgniteException.TraceId IgniteException.ErrorCode IgniteException.GroupCode IgniteException.CodeAsString Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors ClusterInitFailureException(Guid, int, string?, Exception?) Initializes a new instance of the ClusterInitFailureException class. public ClusterInitFailureException(Guid traceId, int code, string? message, Exception? innerException = null) Parameters traceId Guid Trace id. code int Code. message string Message. innerException Exception Inner exception."
  },
  "api/Apache.Ignite.ClusterNotInitializedException.html": {
    "href": "api/Apache.Ignite.ClusterNotInitializedException.html",
    "title": "Class ClusterNotInitializedException | Apache Ignite.NET API Documentation",
    "keywords": "Class ClusterNotInitializedException Namespace Apache.Ignite Assembly Apache.Ignite.dll Thrown when cluster is not yet initialized. [Serializable] public sealed class ClusterNotInitializedException : IgniteException, ISerializable Inheritance object Exception IgniteException ClusterNotInitializedException Implements ISerializable Inherited Members IgniteException.ErrorPrefix IgniteException.GroupName IgniteException.Code IgniteException.TraceId IgniteException.ErrorCode IgniteException.GroupCode IgniteException.CodeAsString Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors ClusterNotInitializedException(Guid, int, string?, Exception?) Initializes a new instance of the ClusterNotInitializedException class. public ClusterNotInitializedException(Guid traceId, int code, string? message, Exception? innerException = null) Parameters traceId Guid Trace id. code int Code. message string Message. innerException Exception Inner exception."
  },
  "api/Apache.Ignite.ColumnAlreadyExistsException.html": {
    "href": "api/Apache.Ignite.ColumnAlreadyExistsException.html",
    "title": "Class ColumnAlreadyExistsException | Apache Ignite.NET API Documentation",
    "keywords": "Class ColumnAlreadyExistsException Namespace Apache.Ignite Assembly Apache.Ignite.dll This exception is thrown when a column creation has failed because a column with the specified name already existed. [Serializable] public sealed class ColumnAlreadyExistsException : IgniteException, ISerializable Inheritance object Exception IgniteException ColumnAlreadyExistsException Implements ISerializable Inherited Members IgniteException.ErrorPrefix IgniteException.GroupName IgniteException.Code IgniteException.TraceId IgniteException.ErrorCode IgniteException.GroupCode IgniteException.CodeAsString Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors ColumnAlreadyExistsException(Guid, int, string?, Exception?) Initializes a new instance of the ColumnAlreadyExistsException class. public ColumnAlreadyExistsException(Guid traceId, int code, string? message, Exception? innerException = null) Parameters traceId Guid Trace id. code int Code. message string Message. innerException Exception Inner exception."
  },
  "api/Apache.Ignite.ColumnNotFoundException.html": {
    "href": "api/Apache.Ignite.ColumnNotFoundException.html",
    "title": "Class ColumnNotFoundException | Apache Ignite.NET API Documentation",
    "keywords": "Class ColumnNotFoundException Namespace Apache.Ignite Assembly Apache.Ignite.dll Exception is thrown when the indicated column is not found. [Serializable] public sealed class ColumnNotFoundException : IgniteException, ISerializable Inheritance object Exception IgniteException ColumnNotFoundException Implements ISerializable Inherited Members IgniteException.ErrorPrefix IgniteException.GroupName IgniteException.Code IgniteException.TraceId IgniteException.ErrorCode IgniteException.GroupCode IgniteException.CodeAsString Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors ColumnNotFoundException(Guid, int, string?, Exception?) Initializes a new instance of the ColumnNotFoundException class. public ColumnNotFoundException(Guid traceId, int code, string? message, Exception? innerException = null) Parameters traceId Guid Trace id. code int Code. message string Message. innerException Exception Inner exception."
  },
  "api/Apache.Ignite.Compute.BroadcastJobTarget.html": {
    "href": "api/Apache.Ignite.Compute.BroadcastJobTarget.html",
    "title": "Class BroadcastJobTarget | Apache Ignite.NET API Documentation",
    "keywords": "Class BroadcastJobTarget Namespace Apache.Ignite.Compute Assembly Apache.Ignite.dll Compute broadcast job target. public static class BroadcastJobTarget Inheritance object BroadcastJobTarget Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Nodes(params IClusterNode[]) Creates a broadcast job target for all specified nodes. public static IBroadcastJobTarget<IEnumerable<IClusterNode>> Nodes(params IClusterNode[] nodes) Parameters nodes IClusterNode[] Nodes to run the job on. Returns IBroadcastJobTarget<IEnumerable<IClusterNode>> Job target. Nodes(IEnumerable<IClusterNode>) Creates a broadcast job target for all specified nodes. public static IBroadcastJobTarget<IEnumerable<IClusterNode>> Nodes(IEnumerable<IClusterNode> nodes) Parameters nodes IEnumerable<IClusterNode> Nodes to run the job on. Returns IBroadcastJobTarget<IEnumerable<IClusterNode>> Job target."
  },
  "api/Apache.Ignite.Compute.ComputeException.html": {
    "href": "api/Apache.Ignite.Compute.ComputeException.html",
    "title": "Class ComputeException | Apache Ignite.NET API Documentation",
    "keywords": "Class ComputeException Namespace Apache.Ignite.Compute Assembly Apache.Ignite.dll Compute exception base class. [Serializable] public sealed class ComputeException : IgniteException, ISerializable Inheritance object Exception IgniteException ComputeException Implements ISerializable Inherited Members IgniteException.ErrorPrefix IgniteException.GroupName IgniteException.Code IgniteException.TraceId IgniteException.ErrorCode IgniteException.GroupCode IgniteException.CodeAsString Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors ComputeException(Guid, int, string?, Exception?) Initializes a new instance of the ComputeException class. public ComputeException(Guid traceId, int code, string? message, Exception? innerException = null) Parameters traceId Guid Trace id. code int Code. message string Message. innerException Exception Inner exception."
  },
  "api/Apache.Ignite.Compute.DeploymentUnit.html": {
    "href": "api/Apache.Ignite.Compute.DeploymentUnit.html",
    "title": "Class DeploymentUnit | Apache Ignite.NET API Documentation",
    "keywords": "Class DeploymentUnit Namespace Apache.Ignite.Compute Assembly Apache.Ignite.dll Deployment unit identifier. public sealed record DeploymentUnit : IEquatable<DeploymentUnit> Inheritance object DeploymentUnit Implements IEquatable<DeploymentUnit> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors DeploymentUnit(string, string) Deployment unit identifier. public DeploymentUnit(string Name, string Version = \"latest\") Parameters Name string Unit name. Version string Unit version. Defaults to LatestVersion. Fields LatestVersion Latest version. public const string LatestVersion = \"latest\" Field Value string Properties Name Unit name. public string Name { get; init; } Property Value string Version Unit version. Defaults to LatestVersion. public string Version { get; init; } Property Value string"
  },
  "api/Apache.Ignite.Compute.IBroadcastExecution-1.html": {
    "href": "api/Apache.Ignite.Compute.IBroadcastExecution-1.html",
    "title": "Interface IBroadcastExecution<TResult> | Apache Ignite.NET API Documentation",
    "keywords": "Interface IBroadcastExecution<TResult> Namespace Apache.Ignite.Compute Assembly Apache.Ignite.dll Broadcast execution control object, provides information about the broadcast execution process and result. public interface IBroadcastExecution<TResult> Type Parameters TResult Job result type. Properties JobExecutions Gets the job executions. IReadOnlyList<IJobExecution<TResult>> JobExecutions { get; } Property Value IReadOnlyList<IJobExecution<TResult>>"
  },
  "api/Apache.Ignite.Compute.IBroadcastJobTarget-1.html": {
    "href": "api/Apache.Ignite.Compute.IBroadcastJobTarget-1.html",
    "title": "Interface IBroadcastJobTarget<T> | Apache Ignite.NET API Documentation",
    "keywords": "Interface IBroadcastJobTarget<T> Namespace Apache.Ignite.Compute Assembly Apache.Ignite.dll Compute broadcast job target. public interface IBroadcastJobTarget<out T> where T : notnull Type Parameters T Underlying data type. Properties Data Gets the target data. T Data { get; } Property Value T"
  },
  "api/Apache.Ignite.Compute.ICompute.html": {
    "href": "api/Apache.Ignite.Compute.ICompute.html",
    "title": "Interface ICompute | Apache Ignite.NET API Documentation",
    "keywords": "Interface ICompute Namespace Apache.Ignite.Compute Assembly Apache.Ignite.dll Ignite Compute API provides distributed job execution functionality. public interface ICompute Methods SubmitAsync<TTarget, TArg, TResult>(IJobTarget<TTarget>, JobDescriptor<TArg, TResult>, TArg) Submits a compute job represented by the given class for an execution on one of the specified nodes. Task<IJobExecution<TResult>> SubmitAsync<TTarget, TArg, TResult>(IJobTarget<TTarget> target, JobDescriptor<TArg, TResult> jobDescriptor, TArg arg) where TTarget : notnull Parameters target IJobTarget<TTarget> Job execution target. See factory methods in JobTarget. jobDescriptor JobDescriptor<TArg, TResult> Job descriptor. arg TArg Job argument. Returns Task<IJobExecution<TResult>> A Task representing the asynchronous operation. Type Parameters TTarget Job target type. TArg Job argument type. TResult Job result type. SubmitBroadcastAsync<TTarget, TArg, TResult>(IBroadcastJobTarget<TTarget>, JobDescriptor<TArg, TResult>, TArg) Submits a compute job represented by the given class for an execution on the specified target. Task<IBroadcastExecution<TResult>> SubmitBroadcastAsync<TTarget, TArg, TResult>(IBroadcastJobTarget<TTarget> target, JobDescriptor<TArg, TResult> jobDescriptor, TArg arg) where TTarget : notnull Parameters target IBroadcastJobTarget<TTarget> Job target. See factory methods in BroadcastJobTarget. jobDescriptor JobDescriptor<TArg, TResult> Job descriptor. arg TArg Job argument. Returns Task<IBroadcastExecution<TResult>> A Task representing the asynchronous operation. Type Parameters TTarget Job target type. TArg Job argument type. TResult Job result type. SubmitMapReduceAsync<TArg, TResult>(TaskDescriptor<TArg, TResult>, TArg) Submits a compute map-reduce task represented by the given class. Task<ITaskExecution<TResult>> SubmitMapReduceAsync<TArg, TResult>(TaskDescriptor<TArg, TResult> taskDescriptor, TArg arg) Parameters taskDescriptor TaskDescriptor<TArg, TResult> Task descriptor. arg TArg Job arguments. Returns Task<ITaskExecution<TResult>> A Task representing the asynchronous operation. Type Parameters TArg Task argument type. TResult Task result type."
  },
  "api/Apache.Ignite.Compute.IJobExecution-1.html": {
    "href": "api/Apache.Ignite.Compute.IJobExecution-1.html",
    "title": "Interface IJobExecution<T> | Apache Ignite.NET API Documentation",
    "keywords": "Interface IJobExecution<T> Namespace Apache.Ignite.Compute Assembly Apache.Ignite.dll Job control object, provides information about the job execution process and result, allows cancelling the job. public interface IJobExecution<T> Type Parameters T Job result type. Properties Id Gets the job ID. Guid Id { get; } Property Value Guid Node Gets the node where the job is executing. IClusterNode Node { get; } Property Value IClusterNode Methods ChangePriorityAsync(int) Changes the job priority. After priority change the job will be the last in the queue of jobs with the same priority. Task<bool?> ChangePriorityAsync(int priority) Parameters priority int New priority. Returns Task<bool?> Returns true if the priority was successfully changed, false when the priority couldn't be changed (job is already executing or completed), null if the job was not found (no longer exists due to exceeding the retention time limit). GetResultAsync() Gets the job execution result. Task<T> GetResultAsync() Returns Task<T> Job execution result. GetStateAsync() Gets the job execution state. Can be null if the job status no longer exists due to exceeding the retention time limit. Task<JobState?> GetStateAsync() Returns Task<JobState> Job execution state. Can be null if the job status no longer exists due to exceeding the retention time limit."
  },
  "api/Apache.Ignite.Compute.IJobTarget-1.html": {
    "href": "api/Apache.Ignite.Compute.IJobTarget-1.html",
    "title": "Interface IJobTarget<T> | Apache Ignite.NET API Documentation",
    "keywords": "Interface IJobTarget<T> Namespace Apache.Ignite.Compute Assembly Apache.Ignite.dll Compute job target. public interface IJobTarget<out T> where T : notnull Type Parameters T Underlying data type. Properties Data Gets the target data. T Data { get; } Property Value T"
  },
  "api/Apache.Ignite.Compute.ITaskExecution-1.html": {
    "href": "api/Apache.Ignite.Compute.ITaskExecution-1.html",
    "title": "Interface ITaskExecution<T> | Apache Ignite.NET API Documentation",
    "keywords": "Interface ITaskExecution<T> Namespace Apache.Ignite.Compute Assembly Apache.Ignite.dll Compute task control object, provides information about the task execution process and result, allows cancelling the task. public interface ITaskExecution<T> Type Parameters T Task result type. Properties Id Gets the task ID. Guid Id { get; } Property Value Guid JobIds Gets the IDs of the jobs that are part of this task. IReadOnlyList<Guid> JobIds { get; } Property Value IReadOnlyList<Guid> Methods ChangePriorityAsync(int) Changes the task priority. After priority change the task will be the last in the queue of tasks with the same priority. Task<bool?> ChangePriorityAsync(int priority) Parameters priority int New priority. Returns Task<bool?> Returns true if the priority was successfully changed, false when the priority couldn't be changed (task is already executing or completed), null if the task was not found (no longer exists due to exceeding the retention time limit). GetJobStatesAsync() Gets the job states for all jobs that are part of this task. Task<IList<JobState?>> GetJobStatesAsync() Returns Task<IList<JobState>> A list of job states. Can contain nulls when the time for retaining job state has been exceeded. GetResultAsync() Gets the task execution result. Task<T> GetResultAsync() Returns Task<T> Task execution result. GetStateAsync() Gets the task execution state. Can be null if the task status no longer exists due to exceeding the retention time limit. Task<TaskState?> GetStateAsync() Returns Task<TaskState> Task execution state. Can be null if the task status no longer exists due to exceeding the retention time limit."
  },
  "api/Apache.Ignite.Compute.JobDescriptor-2.html": {
    "href": "api/Apache.Ignite.Compute.JobDescriptor-2.html",
    "title": "Class JobDescriptor<TArg, TResult> | Apache Ignite.NET API Documentation",
    "keywords": "Class JobDescriptor<TArg, TResult> Namespace Apache.Ignite.Compute Assembly Apache.Ignite.dll Compute job descriptor. public sealed record JobDescriptor<TArg, TResult> : IEquatable<JobDescriptor<TArg, TResult>> Type Parameters TArg Argument type. TResult Result type. Inheritance object JobDescriptor<TArg, TResult> Implements IEquatable<JobDescriptor<TArg, TResult>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors JobDescriptor(string, IEnumerable<DeploymentUnit>?, JobExecutionOptions?, IMarshaller<TArg>?, IMarshaller<TResult>?) Compute job descriptor. public JobDescriptor(string JobClassName, IEnumerable<DeploymentUnit>? DeploymentUnits = null, JobExecutionOptions? Options = null, IMarshaller<TArg>? ArgMarshaller = null, IMarshaller<TResult>? ResultMarshaller = null) Parameters JobClassName string Java class name of the job to execute. DeploymentUnits IEnumerable<DeploymentUnit> Deployment units. Options JobExecutionOptions Options. ArgMarshaller IMarshaller<TArg> Argument marshaller (serializer). ResultMarshaller IMarshaller<TResult> Result marshaller (deserializer). Properties ArgMarshaller Argument marshaller (serializer). public IMarshaller<TArg>? ArgMarshaller { get; init; } Property Value IMarshaller<TArg> DeploymentUnits Deployment units. public IEnumerable<DeploymentUnit>? DeploymentUnits { get; init; } Property Value IEnumerable<DeploymentUnit> JobClassName Java class name of the job to execute. public string JobClassName { get; init; } Property Value string Options Options. public JobExecutionOptions? Options { get; init; } Property Value JobExecutionOptions ResultMarshaller Result marshaller (deserializer). public IMarshaller<TResult>? ResultMarshaller { get; init; } Property Value IMarshaller<TResult>"
  },
  "api/Apache.Ignite.Compute.JobExecutionOptions.html": {
    "href": "api/Apache.Ignite.Compute.JobExecutionOptions.html",
    "title": "Class JobExecutionOptions | Apache Ignite.NET API Documentation",
    "keywords": "Class JobExecutionOptions Namespace Apache.Ignite.Compute Assembly Apache.Ignite.dll Job execution options. public sealed record JobExecutionOptions : IEquatable<JobExecutionOptions> Inheritance object JobExecutionOptions Implements IEquatable<JobExecutionOptions> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors JobExecutionOptions() Initializes a new instance of the JobExecutionOptions class. public JobExecutionOptions() JobExecutionOptions(int, int) Job execution options. public JobExecutionOptions(int Priority, int MaxRetries) Parameters Priority int Job execution priority. MaxRetries int Number of times to retry job execution in case of failure, 0 to not retry. Fields Default Default job execution options. public static readonly JobExecutionOptions Default Field Value JobExecutionOptions Properties MaxRetries Number of times to retry job execution in case of failure, 0 to not retry. public int MaxRetries { get; init; } Property Value int Priority Job execution priority. public int Priority { get; init; } Property Value int"
  },
  "api/Apache.Ignite.Compute.JobState.html": {
    "href": "api/Apache.Ignite.Compute.JobState.html",
    "title": "Class JobState | Apache Ignite.NET API Documentation",
    "keywords": "Class JobState Namespace Apache.Ignite.Compute Assembly Apache.Ignite.dll Compute job state. public sealed record JobState : IEquatable<JobState> Inheritance object JobState Implements IEquatable<JobState> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors JobState(Guid, JobStatus, Instant, Instant?, Instant?) Compute job state. public JobState(Guid Id, JobStatus Status, Instant CreateTime, Instant? StartTime, Instant? FinishTime) Parameters Id Guid Job ID. Status JobStatus Job status. CreateTime Instant Create time. StartTime Instant? Start time (null when not yet started). FinishTime Instant? Finish time (null when not yet finished). Properties CreateTime Create time. public Instant CreateTime { get; init; } Property Value Instant FinishTime Finish time (null when not yet finished). public Instant? FinishTime { get; init; } Property Value Instant? Id Job ID. public Guid Id { get; init; } Property Value Guid StartTime Start time (null when not yet started). public Instant? StartTime { get; init; } Property Value Instant? Status Job status. public JobStatus Status { get; init; } Property Value JobStatus"
  },
  "api/Apache.Ignite.Compute.JobStatus.html": {
    "href": "api/Apache.Ignite.Compute.JobStatus.html",
    "title": "Enum JobStatus | Apache Ignite.NET API Documentation",
    "keywords": "Enum JobStatus Namespace Apache.Ignite.Compute Assembly Apache.Ignite.dll Compute job status. public enum JobStatus Fields Canceled = 5 The job was successfully cancelled. Canceling = 4 The job has received the cancel command, but is still running. Completed = 3 The job was executed successfully and the execution result was returned. Executing = 1 The job is being executed. Failed = 2 The job was unexpectedly terminated during execution. Queued = 0 The job is submitted and waiting for an execution start."
  },
  "api/Apache.Ignite.Compute.JobTarget.html": {
    "href": "api/Apache.Ignite.Compute.JobTarget.html",
    "title": "Class JobTarget | Apache Ignite.NET API Documentation",
    "keywords": "Class JobTarget Namespace Apache.Ignite.Compute Assembly Apache.Ignite.dll Compute job target. public static class JobTarget Inheritance object JobTarget Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AnyNode(params IClusterNode[]) Creates a job target for any node from the provided collection. public static IJobTarget<IEnumerable<IClusterNode>> AnyNode(params IClusterNode[] nodes) Parameters nodes IClusterNode[] Nodes. Returns IJobTarget<IEnumerable<IClusterNode>> Any node job target. AnyNode(IEnumerable<IClusterNode>) Creates a job target for any node from the provided collection. public static IJobTarget<IEnumerable<IClusterNode>> AnyNode(IEnumerable<IClusterNode> nodes) Parameters nodes IEnumerable<IClusterNode> Nodes. Returns IJobTarget<IEnumerable<IClusterNode>> Any node job target. Colocated<TKey>(string, TKey) Creates a colocated job target for a specific table and key. public static IJobTarget<TKey> Colocated<TKey>(string tableName, TKey key) where TKey : notnull Parameters tableName string Table name. key TKey Key. Returns IJobTarget<TKey> Colocated job target. Type Parameters TKey Key type. Node(IClusterNode) Creates a job target for a specific node. public static IJobTarget<IClusterNode> Node(IClusterNode node) Parameters node IClusterNode Node. Returns IJobTarget<IClusterNode> Single node job target."
  },
  "api/Apache.Ignite.Compute.NodeNotFoundException.html": {
    "href": "api/Apache.Ignite.Compute.NodeNotFoundException.html",
    "title": "Class NodeNotFoundException | Apache Ignite.NET API Documentation",
    "keywords": "Class NodeNotFoundException Namespace Apache.Ignite.Compute Assembly Apache.Ignite.dll Thrown when compute component can't find the node to run the job on in the cluster. [Serializable] public sealed class NodeNotFoundException : IgniteException, ISerializable Inheritance object Exception IgniteException NodeNotFoundException Implements ISerializable Inherited Members IgniteException.ErrorPrefix IgniteException.GroupName IgniteException.Code IgniteException.TraceId IgniteException.ErrorCode IgniteException.GroupCode IgniteException.CodeAsString Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors NodeNotFoundException(Guid, int, string?, Exception?) Initializes a new instance of the NodeNotFoundException class. public NodeNotFoundException(Guid traceId, int code, string? message, Exception? innerException = null) Parameters traceId Guid Trace id. code int Code. message string Message. innerException Exception Inner exception."
  },
  "api/Apache.Ignite.Compute.TaskDescriptor-2.html": {
    "href": "api/Apache.Ignite.Compute.TaskDescriptor-2.html",
    "title": "Class TaskDescriptor<TArg, TResult> | Apache Ignite.NET API Documentation",
    "keywords": "Class TaskDescriptor<TArg, TResult> Namespace Apache.Ignite.Compute Assembly Apache.Ignite.dll Compute task descriptor. public sealed record TaskDescriptor<TArg, TResult> : IEquatable<TaskDescriptor<TArg, TResult>> Type Parameters TArg Argument type. TResult Result type. Inheritance object TaskDescriptor<TArg, TResult> Implements IEquatable<TaskDescriptor<TArg, TResult>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors TaskDescriptor(string, IEnumerable<DeploymentUnit>?) Compute task descriptor. public TaskDescriptor(string TaskClassName, IEnumerable<DeploymentUnit>? DeploymentUnits = null) Parameters TaskClassName string Java class name of the compute task to execute. DeploymentUnits IEnumerable<DeploymentUnit> Deployment units. Properties DeploymentUnits Deployment units. public IEnumerable<DeploymentUnit>? DeploymentUnits { get; init; } Property Value IEnumerable<DeploymentUnit> TaskClassName Java class name of the compute task to execute. public string TaskClassName { get; init; } Property Value string"
  },
  "api/Apache.Ignite.Compute.TaskState.html": {
    "href": "api/Apache.Ignite.Compute.TaskState.html",
    "title": "Class TaskState | Apache Ignite.NET API Documentation",
    "keywords": "Class TaskState Namespace Apache.Ignite.Compute Assembly Apache.Ignite.dll Compute task state. public sealed record TaskState : IEquatable<TaskState> Inheritance object TaskState Implements IEquatable<TaskState> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors TaskState(Guid, TaskStatus, Instant, Instant?, Instant?) Compute task state. public TaskState(Guid Id, TaskStatus Status, Instant CreateTime, Instant? StartTime, Instant? FinishTime) Parameters Id Guid Task ID. Status TaskStatus Task status. CreateTime Instant Create time. StartTime Instant? Start time (null when not yet started). FinishTime Instant? Finish time (null when not yet finished). Properties CreateTime Create time. public Instant CreateTime { get; init; } Property Value Instant FinishTime Finish time (null when not yet finished). public Instant? FinishTime { get; init; } Property Value Instant? Id Task ID. public Guid Id { get; init; } Property Value Guid StartTime Start time (null when not yet started). public Instant? StartTime { get; init; } Property Value Instant? Status Task status. public TaskStatus Status { get; init; } Property Value TaskStatus"
  },
  "api/Apache.Ignite.Compute.TaskStatus.html": {
    "href": "api/Apache.Ignite.Compute.TaskStatus.html",
    "title": "Enum TaskStatus | Apache Ignite.NET API Documentation",
    "keywords": "Enum TaskStatus Namespace Apache.Ignite.Compute Assembly Apache.Ignite.dll Compute task status. public enum TaskStatus Fields Canceled = 5 The task was successfully cancelled. Canceling = 4 The task has received the cancel command, but is still running. Completed = 3 The task was executed successfully and the execution result was returned. Executing = 1 The task is being executed. Failed = 2 The task was unexpectedly terminated during execution. Queued = 0 The task is submitted and waiting for an execution start."
  },
  "api/Apache.Ignite.Compute.html": {
    "href": "api/Apache.Ignite.Compute.html",
    "title": "Namespace Apache.Ignite.Compute | Apache Ignite.NET API Documentation",
    "keywords": "Namespace Apache.Ignite.Compute Classes BroadcastJobTarget Compute broadcast job target. ComputeException Compute exception base class. DeploymentUnit Deployment unit identifier. JobDescriptor<TArg, TResult> Compute job descriptor. JobExecutionOptions Job execution options. JobState Compute job state. JobTarget Compute job target. NodeNotFoundException Thrown when compute component can't find the node to run the job on in the cluster. TaskDescriptor<TArg, TResult> Compute task descriptor. TaskState Compute task state. Interfaces IBroadcastExecution<TResult> Broadcast execution control object, provides information about the broadcast execution process and result. IBroadcastJobTarget<T> Compute broadcast job target. ICompute Ignite Compute API provides distributed job execution functionality. IJobExecution<T> Job control object, provides information about the job execution process and result, allows cancelling the job. IJobTarget<T> Compute job target. ITaskExecution<T> Compute task control object, provides information about the task execution process and result, allows cancelling the task. Enums JobStatus Compute job status. TaskStatus Compute task status."
  },
  "api/Apache.Ignite.CursorClosedException.html": {
    "href": "api/Apache.Ignite.CursorClosedException.html",
    "title": "Class CursorClosedException | Apache Ignite.NET API Documentation",
    "keywords": "Class CursorClosedException Namespace Apache.Ignite Assembly Apache.Ignite.dll Exception is thrown when a data fetch attempt is performed on a closed cursor. [Serializable] public sealed class CursorClosedException : IgniteException, ISerializable Inheritance object Exception IgniteException CursorClosedException Implements ISerializable Inherited Members IgniteException.ErrorPrefix IgniteException.GroupName IgniteException.Code IgniteException.TraceId IgniteException.ErrorCode IgniteException.GroupCode IgniteException.CodeAsString Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors CursorClosedException(Guid, int, string?, Exception?) Initializes a new instance of the CursorClosedException class. public CursorClosedException(Guid traceId, int code, string? message, Exception? innerException = null) Parameters traceId Guid Trace id. code int Code. message string Message. innerException Exception Inner exception."
  },
  "api/Apache.Ignite.ErrorGroups.Authentication.html": {
    "href": "api/Apache.Ignite.ErrorGroups.Authentication.html",
    "title": "Class ErrorGroups.Authentication | Apache Ignite.NET API Documentation",
    "keywords": "Class ErrorGroups.Authentication Namespace Apache.Ignite Assembly Apache.Ignite.dll Authentication errors. public static class ErrorGroups.Authentication Inheritance object ErrorGroups.Authentication Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields BasicProvider BasicProvider error. public const int BasicProvider = 983043 Field Value int ErrorPrefix Authentication error prefix. public const string ErrorPrefix = \"IGN\" Field Value string GroupCode Authentication group code. public const short GroupCode = 15 Field Value short GroupName Authentication group name. public const string GroupName = \"AUTHENTICATION\" Field Value string InvalidCredentials InvalidCredentials error. public const int InvalidCredentials = 983042 Field Value int UnsupportedAuthenticationType UnsupportedAuthenticationType error. public const int UnsupportedAuthenticationType = 983041 Field Value int"
  },
  "api/Apache.Ignite.ErrorGroups.Catalog.html": {
    "href": "api/Apache.Ignite.ErrorGroups.Catalog.html",
    "title": "Class ErrorGroups.Catalog | Apache Ignite.NET API Documentation",
    "keywords": "Class ErrorGroups.Catalog Namespace Apache.Ignite Assembly Apache.Ignite.dll Catalog errors. public static class ErrorGroups.Catalog Inheritance object ErrorGroups.Catalog Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ErrorPrefix Catalog error prefix. public const string ErrorPrefix = \"IGN\" Field Value string GroupCode Catalog group code. public const short GroupCode = 17 Field Value short GroupName Catalog group name. public const string GroupName = \"CATALOG\" Field Value string Validation Validation error. public const int Validation = 1114113 Field Value int"
  },
  "api/Apache.Ignite.ErrorGroups.Client.html": {
    "href": "api/Apache.Ignite.ErrorGroups.Client.html",
    "title": "Class ErrorGroups.Client | Apache Ignite.NET API Documentation",
    "keywords": "Class ErrorGroups.Client Namespace Apache.Ignite Assembly Apache.Ignite.dll Client errors. public static class ErrorGroups.Client Inheritance object ErrorGroups.Client Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ClientSslConfiguration ClientSslConfiguration error. public const int ClientSslConfiguration = 196615 Field Value int ClusterIdMismatch ClusterIdMismatch error. public const int ClusterIdMismatch = 196614 Field Value int Configuration Configuration error. public const int Configuration = 196613 Field Value int Connection Connection error. public const int Connection = 196609 Field Value int ErrorPrefix Client error prefix. public const string ErrorPrefix = \"IGN\" Field Value string GroupCode Client group code. public const short GroupCode = 3 Field Value short GroupName Client group name. public const string GroupName = \"CLIENT\" Field Value string HandshakeHeader HandshakeHeader error. public const int HandshakeHeader = 196616 Field Value int Protocol Protocol error. public const int Protocol = 196610 Field Value int ProtocolCompatibility ProtocolCompatibility error. public const int ProtocolCompatibility = 196611 Field Value int TableIdNotFound TableIdNotFound error. public const int TableIdNotFound = 196612 Field Value int"
  },
  "api/Apache.Ignite.ErrorGroups.CodeDeployment.html": {
    "href": "api/Apache.Ignite.ErrorGroups.CodeDeployment.html",
    "title": "Class ErrorGroups.CodeDeployment | Apache Ignite.NET API Documentation",
    "keywords": "Class ErrorGroups.CodeDeployment Namespace Apache.Ignite Assembly Apache.Ignite.dll CodeDeployment errors. public static class ErrorGroups.CodeDeployment Inheritance object ErrorGroups.CodeDeployment Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ErrorPrefix CodeDeployment error prefix. public const string ErrorPrefix = \"IGN\" Field Value string GroupCode CodeDeployment group code. public const short GroupCode = 13 Field Value short GroupName CodeDeployment group name. public const string GroupName = \"CODEDEPLOY\" Field Value string UnitAlreadyExists UnitAlreadyExists error. public const int UnitAlreadyExists = 851970 Field Value int UnitContentRead UnitContentRead error. public const int UnitContentRead = 851971 Field Value int UnitNotFound UnitNotFound error. public const int UnitNotFound = 851969 Field Value int UnitUnavailable UnitUnavailable error. public const int UnitUnavailable = 851972 Field Value int"
  },
  "api/Apache.Ignite.ErrorGroups.Common.html": {
    "href": "api/Apache.Ignite.ErrorGroups.Common.html",
    "title": "Class ErrorGroups.Common | Apache Ignite.NET API Documentation",
    "keywords": "Class ErrorGroups.Common Namespace Apache.Ignite Assembly Apache.Ignite.dll Common errors. public static class ErrorGroups.Common Inheritance object ErrorGroups.Common Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ComponentNotStarted ComponentNotStarted error. public const int ComponentNotStarted = 65538 Field Value int CursorAlreadyClosed CursorAlreadyClosed error. public const int CursorAlreadyClosed = 65542 Field Value int ErrorPrefix Common error prefix. public const string ErrorPrefix = \"IGN\" Field Value string GroupCode Common group code. public const short GroupCode = 1 Field Value short GroupName Common group name. public const string GroupName = \"CMN\" Field Value string IllegalArgument IllegalArgument error. public const int IllegalArgument = 65539 Field Value int Internal Internal error. public const int Internal = 131071 Field Value int NodeLeft NodeLeft error. public const int NodeLeft = 65541 Field Value int NodeStopping NodeStopping error. public const int NodeStopping = 65537 Field Value int NullableValue NullableValue error. public const int NullableValue = 65545 Field Value int ResourceClosing ResourceClosing error. public const int ResourceClosing = 65543 Field Value int SslConfiguration SslConfiguration error. public const int SslConfiguration = 65540 Field Value int UserObjectSerialization UserObjectSerialization error. public const int UserObjectSerialization = 65544 Field Value int"
  },
  "api/Apache.Ignite.ErrorGroups.Compute.html": {
    "href": "api/Apache.Ignite.ErrorGroups.Compute.html",
    "title": "Class ErrorGroups.Compute | Apache Ignite.NET API Documentation",
    "keywords": "Class ErrorGroups.Compute Namespace Apache.Ignite Assembly Apache.Ignite.dll Compute errors. public static class ErrorGroups.Compute Inheritance object ErrorGroups.Compute Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Cancelling Cancelling error. public const int Cancelling = 1048582 Field Value int ChangeJobPriority ChangeJobPriority error. public const int ChangeJobPriority = 1048587 Field Value int ClassInitialization ClassInitialization error. public const int ClassInitialization = 1048579 Field Value int ClassLoader ClassLoader error. public const int ClassLoader = 1048578 Field Value int ClassPath ClassPath error. public const int ClassPath = 1048577 Field Value int ComputeJobFailed ComputeJobFailed error. public const int ComputeJobFailed = 1048585 Field Value int ComputeJobStatusTransition ComputeJobStatusTransition error. public const int ComputeJobStatusTransition = 1048581 Field Value int ErrorPrefix Compute error prefix. public const string ErrorPrefix = \"IGN\" Field Value string FailToGetJobState FailToGetJobState error. public const int FailToGetJobState = 1048584 Field Value int GroupCode Compute group code. public const short GroupCode = 16 Field Value short GroupName Compute group name. public const string GroupName = \"COMPUTE\" Field Value string MarshallingTypeMismatch MarshallingTypeMismatch error. public const int MarshallingTypeMismatch = 1048589 Field Value int NodeNotFound NodeNotFound error. public const int NodeNotFound = 1048588 Field Value int PrimaryReplicaResolve PrimaryReplicaResolve error. public const int PrimaryReplicaResolve = 1048586 Field Value int QueueOverflow QueueOverflow error. public const int QueueOverflow = 1048580 Field Value int ResultNotFound ResultNotFound error. public const int ResultNotFound = 1048583 Field Value int"
  },
  "api/Apache.Ignite.ErrorGroups.CriticalWorkers.html": {
    "href": "api/Apache.Ignite.ErrorGroups.CriticalWorkers.html",
    "title": "Class ErrorGroups.CriticalWorkers | Apache Ignite.NET API Documentation",
    "keywords": "Class ErrorGroups.CriticalWorkers Namespace Apache.Ignite Assembly Apache.Ignite.dll CriticalWorkers errors. public static class ErrorGroups.CriticalWorkers Inheritance object ErrorGroups.CriticalWorkers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ErrorPrefix CriticalWorkers error prefix. public const string ErrorPrefix = \"IGN\" Field Value string GroupCode CriticalWorkers group code. public const short GroupCode = 19 Field Value short GroupName CriticalWorkers group name. public const string GroupName = \"WORKERS\" Field Value string SystemCriticalOperationTimeout SystemCriticalOperationTimeout error. public const int SystemCriticalOperationTimeout = 1245186 Field Value int SystemWorkerBlocked SystemWorkerBlocked error. public const int SystemWorkerBlocked = 1245185 Field Value int"
  },
  "api/Apache.Ignite.ErrorGroups.DisasterRecovery.html": {
    "href": "api/Apache.Ignite.ErrorGroups.DisasterRecovery.html",
    "title": "Class ErrorGroups.DisasterRecovery | Apache Ignite.NET API Documentation",
    "keywords": "Class ErrorGroups.DisasterRecovery Namespace Apache.Ignite Assembly Apache.Ignite.dll DisasterRecovery errors. public static class ErrorGroups.DisasterRecovery Inheritance object ErrorGroups.DisasterRecovery Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ClusterNotIdle ClusterNotIdle error. public const int ClusterNotIdle = 1310724 Field Value int ErrorPrefix DisasterRecovery error prefix. public const string ErrorPrefix = \"IGN\" Field Value string GroupCode DisasterRecovery group code. public const short GroupCode = 20 Field Value short GroupName DisasterRecovery group name. public const string GroupName = \"RECOVERY\" Field Value string IllegalPartitionId IllegalPartitionId error. public const int IllegalPartitionId = 1310721 Field Value int NodesNotFound NodesNotFound error. public const int NodesNotFound = 1310722 Field Value int PartitionState PartitionState error. public const int PartitionState = 1310723 Field Value int"
  },
  "api/Apache.Ignite.ErrorGroups.DistributionZones.html": {
    "href": "api/Apache.Ignite.ErrorGroups.DistributionZones.html",
    "title": "Class ErrorGroups.DistributionZones | Apache Ignite.NET API Documentation",
    "keywords": "Class ErrorGroups.DistributionZones Namespace Apache.Ignite Assembly Apache.Ignite.dll DistributionZones errors. public static class ErrorGroups.DistributionZones Inheritance object ErrorGroups.DistributionZones Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ErrorPrefix DistributionZones error prefix. public const string ErrorPrefix = \"IGN\" Field Value string GroupCode DistributionZones group code. public const short GroupCode = 10 Field Value short GroupName DistributionZones group name. public const string GroupName = \"DISTRZONES\" Field Value string ZoneNotFound ZoneNotFound error. public const int ZoneNotFound = 655361 Field Value int"
  },
  "api/Apache.Ignite.ErrorGroups.Embedded.html": {
    "href": "api/Apache.Ignite.ErrorGroups.Embedded.html",
    "title": "Class ErrorGroups.Embedded | Apache Ignite.NET API Documentation",
    "keywords": "Class ErrorGroups.Embedded Namespace Apache.Ignite Assembly Apache.Ignite.dll Embedded errors. public static class ErrorGroups.Embedded Inheritance object ErrorGroups.Embedded Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ClusterInitFailed ClusterInitFailed error. public const int ClusterInitFailed = 1376258 Field Value int ClusterNotInitialized ClusterNotInitialized error. public const int ClusterNotInitialized = 1376257 Field Value int ErrorPrefix Embedded error prefix. public const string ErrorPrefix = \"IGN\" Field Value string GroupCode Embedded group code. public const short GroupCode = 21 Field Value short GroupName Embedded group name. public const string GroupName = \"EMBEDDED\" Field Value string NodeNotStarted NodeNotStarted error. public const int NodeNotStarted = 1376259 Field Value int NodeStart NodeStart error. public const int NodeStart = 1376260 Field Value int"
  },
  "api/Apache.Ignite.ErrorGroups.GarbageCollector.html": {
    "href": "api/Apache.Ignite.ErrorGroups.GarbageCollector.html",
    "title": "Class ErrorGroups.GarbageCollector | Apache Ignite.NET API Documentation",
    "keywords": "Class ErrorGroups.GarbageCollector Namespace Apache.Ignite Assembly Apache.Ignite.dll GarbageCollector errors. public static class ErrorGroups.GarbageCollector Inheritance object ErrorGroups.GarbageCollector Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Closed Closed error. public const int Closed = 917505 Field Value int ErrorPrefix GarbageCollector error prefix. public const string ErrorPrefix = \"IGN\" Field Value string GroupCode GarbageCollector group code. public const short GroupCode = 14 Field Value short GroupName GarbageCollector group name. public const string GroupName = \"GC\" Field Value string"
  },
  "api/Apache.Ignite.ErrorGroups.Index.html": {
    "href": "api/Apache.Ignite.ErrorGroups.Index.html",
    "title": "Class ErrorGroups.Index | Apache Ignite.NET API Documentation",
    "keywords": "Class ErrorGroups.Index Namespace Apache.Ignite Assembly Apache.Ignite.dll Index errors. public static class ErrorGroups.Index Inheritance object ErrorGroups.Index Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ErrorPrefix Index error prefix. public const string ErrorPrefix = \"IGN\" Field Value string GroupCode Index group code. public const short GroupCode = 6 Field Value short GroupName Index group name. public const string GroupName = \"IDX\" Field Value string IndexAlreadyExists IndexAlreadyExists error. public const int IndexAlreadyExists = 393218 Field Value int IndexNotFound IndexNotFound error. public const int IndexNotFound = 393217 Field Value int"
  },
  "api/Apache.Ignite.ErrorGroups.Marshalling.html": {
    "href": "api/Apache.Ignite.ErrorGroups.Marshalling.html",
    "title": "Class ErrorGroups.Marshalling | Apache Ignite.NET API Documentation",
    "keywords": "Class ErrorGroups.Marshalling Namespace Apache.Ignite Assembly Apache.Ignite.dll Marshalling errors. public static class ErrorGroups.Marshalling Inheritance object ErrorGroups.Marshalling Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Common Common error. public const int Common = 1441793 Field Value int ErrorPrefix Marshalling error prefix. public const string ErrorPrefix = \"IGN\" Field Value string GroupCode Marshalling group code. public const short GroupCode = 22 Field Value short GroupName Marshalling group name. public const string GroupName = \"MARSHALLING\" Field Value string Unmarshalling Unmarshalling error. public const int Unmarshalling = 1441795 Field Value int UnsupportedObjectType UnsupportedObjectType error. public const int UnsupportedObjectType = 1441794 Field Value int"
  },
  "api/Apache.Ignite.ErrorGroups.MetaStorage.html": {
    "href": "api/Apache.Ignite.ErrorGroups.MetaStorage.html",
    "title": "Class ErrorGroups.MetaStorage | Apache Ignite.NET API Documentation",
    "keywords": "Class ErrorGroups.MetaStorage Namespace Apache.Ignite Assembly Apache.Ignite.dll MetaStorage errors. public static class ErrorGroups.MetaStorage Inheritance object ErrorGroups.MetaStorage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Compacted Compacted error. public const int Compacted = 327686 Field Value int Compaction Compaction error. public const int Compaction = 327683 Field Value int Diverged Diverged error. public const int Diverged = 327687 Field Value int ErrorPrefix MetaStorage error prefix. public const string ErrorPrefix = \"IGN\" Field Value string GroupCode MetaStorage group code. public const short GroupCode = 5 Field Value short GroupName MetaStorage group name. public const string GroupName = \"META\" Field Value string OpExecution OpExecution error. public const int OpExecution = 327684 Field Value int OpExecutionTimeout OpExecutionTimeout error. public const int OpExecutionTimeout = 327685 Field Value int RestoringStorage RestoringStorage error. public const int RestoringStorage = 327682 Field Value int StartingStorage StartingStorage error. public const int StartingStorage = 327681 Field Value int"
  },
  "api/Apache.Ignite.ErrorGroups.Network.html": {
    "href": "api/Apache.Ignite.ErrorGroups.Network.html",
    "title": "Class ErrorGroups.Network | Apache Ignite.NET API Documentation",
    "keywords": "Class ErrorGroups.Network Namespace Apache.Ignite Assembly Apache.Ignite.dll Network errors. public static class ErrorGroups.Network Inheritance object ErrorGroups.Network Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields AddressUnresolved AddressUnresolved error. public const int AddressUnresolved = 720902 Field Value int ErrorPrefix Network error prefix. public const string ErrorPrefix = \"IGN\" Field Value string FileTransfer FileTransfer error. public const int FileTransfer = 720899 Field Value int FileValidation FileValidation error. public const int FileValidation = 720900 Field Value int GroupCode Network group code. public const short GroupCode = 11 Field Value short GroupName Network group name. public const string GroupName = \"NETWORK\" Field Value string PortInUse PortInUse error. public const int PortInUse = 720898 Field Value int RecipientLeft RecipientLeft error. public const int RecipientLeft = 720901 Field Value int UnresolvableConsistentId UnresolvableConsistentId error. public const int UnresolvableConsistentId = 720897 Field Value int"
  },
  "api/Apache.Ignite.ErrorGroups.NodeConfiguration.html": {
    "href": "api/Apache.Ignite.ErrorGroups.NodeConfiguration.html",
    "title": "Class ErrorGroups.NodeConfiguration | Apache Ignite.NET API Documentation",
    "keywords": "Class ErrorGroups.NodeConfiguration Namespace Apache.Ignite Assembly Apache.Ignite.dll NodeConfiguration errors. public static class ErrorGroups.NodeConfiguration Inheritance object ErrorGroups.NodeConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ConfigFileCreate ConfigFileCreate error. public const int ConfigFileCreate = 786434 Field Value int ConfigParse ConfigParse error. public const int ConfigParse = 786436 Field Value int ConfigRead ConfigRead error. public const int ConfigRead = 786433 Field Value int ConfigWrite ConfigWrite error. public const int ConfigWrite = 786435 Field Value int ErrorPrefix NodeConfiguration error prefix. public const string ErrorPrefix = \"IGN\" Field Value string GroupCode NodeConfiguration group code. public const short GroupCode = 12 Field Value short GroupName NodeConfiguration group name. public const string GroupName = \"NODECFG\" Field Value string"
  },
  "api/Apache.Ignite.ErrorGroups.PlacementDriver.html": {
    "href": "api/Apache.Ignite.ErrorGroups.PlacementDriver.html",
    "title": "Class ErrorGroups.PlacementDriver | Apache Ignite.NET API Documentation",
    "keywords": "Class ErrorGroups.PlacementDriver Namespace Apache.Ignite Assembly Apache.Ignite.dll PlacementDriver errors. public static class ErrorGroups.PlacementDriver Inheritance object ErrorGroups.PlacementDriver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ErrorPrefix PlacementDriver error prefix. public const string ErrorPrefix = \"IGN\" Field Value string GroupCode PlacementDriver group code. public const short GroupCode = 18 Field Value short GroupName PlacementDriver group name. public const string GroupName = \"PLACEMENTDRIVER\" Field Value string PrimaryReplicaAwait PrimaryReplicaAwait error. public const int PrimaryReplicaAwait = 1179650 Field Value int PrimaryReplicaAwaitTimeout PrimaryReplicaAwaitTimeout error. public const int PrimaryReplicaAwaitTimeout = 1179649 Field Value int"
  },
  "api/Apache.Ignite.ErrorGroups.Replicator.html": {
    "href": "api/Apache.Ignite.ErrorGroups.Replicator.html",
    "title": "Class ErrorGroups.Replicator | Apache Ignite.NET API Documentation",
    "keywords": "Class ErrorGroups.Replicator Namespace Apache.Ignite Assembly Apache.Ignite.dll Replicator errors. public static class ErrorGroups.Replicator Inheritance object ErrorGroups.Replicator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields CursorClose CursorClose error. public const int CursorClose = 524295 Field Value int ErrorPrefix Replicator error prefix. public const string ErrorPrefix = \"IGN\" Field Value string GroupCode Replicator group code. public const short GroupCode = 8 Field Value short GroupName Replicator group name. public const string GroupName = \"REP\" Field Value string ReplicaCommon ReplicaCommon error. public const int ReplicaCommon = 524289 Field Value int ReplicaIsAlreadyStarted ReplicaIsAlreadyStarted error. public const int ReplicaIsAlreadyStarted = 524290 Field Value int ReplicaMiss ReplicaMiss error. public const int ReplicaMiss = 524294 Field Value int ReplicaStopping ReplicaStopping error. public const int ReplicaStopping = 524296 Field Value int ReplicaTimeout ReplicaTimeout error. public const int ReplicaTimeout = 524291 Field Value int ReplicaUnavailable ReplicaUnavailable error. public const int ReplicaUnavailable = 524293 Field Value int ReplicaUnsupportedRequest ReplicaUnsupportedRequest error. public const int ReplicaUnsupportedRequest = 524292 Field Value int"
  },
  "api/Apache.Ignite.ErrorGroups.Rest.html": {
    "href": "api/Apache.Ignite.ErrorGroups.Rest.html",
    "title": "Class ErrorGroups.Rest | Apache Ignite.NET API Documentation",
    "keywords": "Class ErrorGroups.Rest Namespace Apache.Ignite Assembly Apache.Ignite.dll Rest errors. public static class ErrorGroups.Rest Inheritance object ErrorGroups.Rest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ClusterNotInit ClusterNotInit error. public const int ClusterNotInit = 1507329 Field Value int ErrorPrefix Rest error prefix. public const string ErrorPrefix = \"IGN\" Field Value string GroupCode Rest group code. public const short GroupCode = 23 Field Value short GroupName Rest group name. public const string GroupName = \"REST\" Field Value string"
  },
  "api/Apache.Ignite.ErrorGroups.Sql.html": {
    "href": "api/Apache.Ignite.ErrorGroups.Sql.html",
    "title": "Class ErrorGroups.Sql | Apache Ignite.NET API Documentation",
    "keywords": "Class ErrorGroups.Sql Namespace Apache.Ignite Assembly Apache.Ignite.dll Sql errors. public static class ErrorGroups.Sql Inheritance object ErrorGroups.Sql Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ConstraintViolation ConstraintViolation error. public const int ConstraintViolation = 262149 Field Value int ErrorPrefix Sql error prefix. public const string ErrorPrefix = \"IGN\" Field Value string ExecutionCancelled ExecutionCancelled error. public const int ExecutionCancelled = 262150 Field Value int GroupCode Sql group code. public const short GroupCode = 4 Field Value short GroupName Sql group name. public const string GroupName = \"SQL\" Field Value string Mapping Mapping error. public const int Mapping = 262152 Field Value int QueryNoResultSet QueryNoResultSet error. public const int QueryNoResultSet = 262145 Field Value int Runtime Runtime error. public const int Runtime = 262151 Field Value int SchemaNotFound SchemaNotFound error. public const int SchemaNotFound = 262146 Field Value int StmtParse StmtParse error. public const int StmtParse = 262147 Field Value int StmtValidation StmtValidation error. public const int StmtValidation = 262148 Field Value int TxControlInsideExternalTx TxControlInsideExternalTx error. public const int TxControlInsideExternalTx = 262153 Field Value int"
  },
  "api/Apache.Ignite.ErrorGroups.Storage.html": {
    "href": "api/Apache.Ignite.ErrorGroups.Storage.html",
    "title": "Class ErrorGroups.Storage | Apache Ignite.NET API Documentation",
    "keywords": "Class ErrorGroups.Storage Namespace Apache.Ignite Assembly Apache.Ignite.dll Storage errors. public static class ErrorGroups.Storage Inheritance object ErrorGroups.Storage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ErrorPrefix Storage error prefix. public const string ErrorPrefix = \"IGN\" Field Value string GroupCode Storage group code. public const short GroupCode = 9 Field Value short GroupName Storage group name. public const string GroupName = \"STORAGE\" Field Value string IndexNotBuilt IndexNotBuilt error. public const int IndexNotBuilt = 589825 Field Value int StorageCorrupted StorageCorrupted error. public const int StorageCorrupted = 589826 Field Value int"
  },
  "api/Apache.Ignite.ErrorGroups.Table.html": {
    "href": "api/Apache.Ignite.ErrorGroups.Table.html",
    "title": "Class ErrorGroups.Table | Apache Ignite.NET API Documentation",
    "keywords": "Class ErrorGroups.Table Namespace Apache.Ignite Assembly Apache.Ignite.dll Table errors. public static class ErrorGroups.Table Inheritance object ErrorGroups.Table Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ColumnAlreadyExists ColumnAlreadyExists error. public const int ColumnAlreadyExists = 131075 Field Value int ColumnNotFound ColumnNotFound error. public const int ColumnNotFound = 131076 Field Value int ErrorPrefix Table error prefix. public const string ErrorPrefix = \"IGN\" Field Value string GroupCode Table group code. public const short GroupCode = 2 Field Value short GroupName Table group name. public const string GroupName = \"TBL\" Field Value string SchemaVersionMismatch SchemaVersionMismatch error. public const int SchemaVersionMismatch = 131077 Field Value int TableAlreadyExists TableAlreadyExists error. public const int TableAlreadyExists = 131073 Field Value int TableNotFound TableNotFound error. public const int TableNotFound = 131074 Field Value int UnsupportedPartitionType UnsupportedPartitionType error. public const int UnsupportedPartitionType = 131078 Field Value int"
  },
  "api/Apache.Ignite.ErrorGroups.Transactions.html": {
    "href": "api/Apache.Ignite.ErrorGroups.Transactions.html",
    "title": "Class ErrorGroups.Transactions | Apache Ignite.NET API Documentation",
    "keywords": "Class ErrorGroups.Transactions Namespace Apache.Ignite Assembly Apache.Ignite.dll Transactions errors. public static class ErrorGroups.Transactions Inheritance object ErrorGroups.Transactions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields AcquireLock AcquireLock error. public const int AcquireLock = 458756 Field Value int AcquireLockTimeout AcquireLockTimeout error. public const int AcquireLockTimeout = 458757 Field Value int ErrorPrefix Transactions error prefix. public const string ErrorPrefix = \"IGN\" Field Value string GroupCode Transactions group code. public const short GroupCode = 7 Field Value short GroupName Transactions group name. public const string GroupName = \"TX\" Field Value string TxAlreadyFinished TxAlreadyFinished error. public const int TxAlreadyFinished = 458765 Field Value int TxCommit TxCommit error. public const int TxCommit = 458758 Field Value int TxFailedReadWriteOperation TxFailedReadWriteOperation error. public const int TxFailedReadWriteOperation = 458760 Field Value int TxIncompatibleSchema TxIncompatibleSchema error. public const int TxIncompatibleSchema = 458763 Field Value int TxPrimaryReplicaExpired TxPrimaryReplicaExpired error. public const int TxPrimaryReplicaExpired = 458764 Field Value int TxReadOnlyTooOld TxReadOnlyTooOld error. public const int TxReadOnlyTooOld = 458762 Field Value int TxRollback TxRollback error. public const int TxRollback = 458759 Field Value int TxStaleOperation TxStaleOperation error. public const int TxStaleOperation = 458766 Field Value int TxStaleReadOnlyOperation TxStaleReadOnlyOperation error. public const int TxStaleReadOnlyOperation = 458767 Field Value int TxStateStorage TxStateStorage error. public const int TxStateStorage = 458753 Field Value int TxStateStorageRebalance TxStateStorageRebalance error. public const int TxStateStorageRebalance = 458761 Field Value int TxStateStorageStopped TxStateStorageStopped error. public const int TxStateStorageStopped = 458754 Field Value int TxUnexpectedState TxUnexpectedState error. public const int TxUnexpectedState = 458755 Field Value int"
  },
  "api/Apache.Ignite.ErrorGroups.html": {
    "href": "api/Apache.Ignite.ErrorGroups.html",
    "title": "Class ErrorGroups | Apache Ignite.NET API Documentation",
    "keywords": "Class ErrorGroups Namespace Apache.Ignite Assembly Apache.Ignite.dll Represents a concept of error group. Error group defines a collection of errors that belong to a single semantic component. Each group can be identified by a name and an integer number that both must be unique across all error groups. public static class ErrorGroups Inheritance object ErrorGroups Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields UnknownGroupName Unknown error group name. public const string UnknownGroupName = \"UNKNOWN\" Field Value string Methods GetErrorCode(int) Gets error code extracted from the given full error code. public static short GetErrorCode(int fullCode) Parameters fullCode int Full error code. Returns short Error code. GetErrorPrefix(int) Gets the group error prefix by code. public static string GetErrorPrefix(int groupCode) Parameters groupCode int Group code. Returns string Group error prefix. GetFullCode(short, short) Gets the full error code from group and error codes. public static int GetFullCode(short groupCode, short errorCode) Parameters groupCode short Group code. errorCode short Error code. Returns int Combined code. GetGroupCode(int) Returns group code extracted from the given full error code. public static short GetGroupCode(int fullCode) Parameters fullCode int Full error code. Returns short Group code. GetGroupName(int) Gets the group name by code. public static string GetGroupName(int groupCode) Parameters groupCode int Group code. Returns string Group name."
  },
  "api/Apache.Ignite.IAuthenticator.html": {
    "href": "api/Apache.Ignite.IAuthenticator.html",
    "title": "Interface IAuthenticator | Apache Ignite.NET API Documentation",
    "keywords": "Interface IAuthenticator Namespace Apache.Ignite Assembly Apache.Ignite.dll Ignite client authenticator. Provides authentication information during server handshake. public interface IAuthenticator Properties Identity Gets the identity. object Identity { get; } Property Value object Secret Gets the secret. object Secret { get; } Property Value object Type Gets the authenticator type. string Type { get; } Property Value string"
  },
  "api/Apache.Ignite.IIgnite.html": {
    "href": "api/Apache.Ignite.IIgnite.html",
    "title": "Interface IIgnite | Apache Ignite.NET API Documentation",
    "keywords": "Interface IIgnite Namespace Apache.Ignite Assembly Apache.Ignite.dll Ignite API entry point. All Ignite APIs are thread-safe, unless noted otherwise. Implementation can be a thin client (see IIgniteClient and StartAsync(IgniteClientConfiguration)), or a direct IPC connection for server-side functionality like compute. public interface IIgnite Properties Compute Gets the compute API. ICompute Compute { get; } Property Value ICompute Sql Gets the SQL API. ISql Sql { get; } Property Value ISql Tables Gets the tables API. ITables Tables { get; } Property Value ITables Transactions Gets the transactions API. ITransactions Transactions { get; } Property Value ITransactions Methods GetClusterNodesAsync() Gets the cluster nodes. NOTE: Temporary API to enable Compute until we have proper Cluster API. Task<IList<IClusterNode>> GetClusterNodesAsync() Returns Task<IList<IClusterNode>> A Task representing the asynchronous operation."
  },
  "api/Apache.Ignite.IIgniteClient.html": {
    "href": "api/Apache.Ignite.IIgniteClient.html",
    "title": "Interface IIgniteClient | Apache Ignite.NET API Documentation",
    "keywords": "Interface IIgniteClient Namespace Apache.Ignite Assembly Apache.Ignite.dll Ignite client. Extends IIgnite with client-specific functionality. All Ignite APIs are thread-safe, unless noted otherwise. public interface IIgniteClient : IIgnite, IDisposable Inherited Members IIgnite.Tables IIgnite.Transactions IIgnite.Compute IIgnite.Sql IIgnite.GetClusterNodesAsync() IDisposable.Dispose() Properties Configuration Gets the configuration. IgniteClientConfiguration Configuration { get; } Property Value IgniteClientConfiguration Methods GetConnections() Gets active connections. IList<IConnectionInfo> GetConnections() Returns IList<IConnectionInfo> A list of connected cluster nodes."
  },
  "api/Apache.Ignite.IRetryPolicy.html": {
    "href": "api/Apache.Ignite.IRetryPolicy.html",
    "title": "Interface IRetryPolicy | Apache Ignite.NET API Documentation",
    "keywords": "Interface IRetryPolicy Namespace Apache.Ignite Assembly Apache.Ignite.dll Client retry policy determines whether client operations that have failed due to a connection issue should be retried. public interface IRetryPolicy Methods ShouldRetry(IRetryPolicyContext) Gets a value indicating whether a client operation that has failed due to a connection issue should be retried. bool ShouldRetry(IRetryPolicyContext context) Parameters context IRetryPolicyContext Operation context. Returns bool true if the operation should be retried on another connection, false otherwise."
  },
  "api/Apache.Ignite.IRetryPolicyContext.html": {
    "href": "api/Apache.Ignite.IRetryPolicyContext.html",
    "title": "Interface IRetryPolicyContext | Apache Ignite.NET API Documentation",
    "keywords": "Interface IRetryPolicyContext Namespace Apache.Ignite Assembly Apache.Ignite.dll Retry policy context. See ShouldRetry(IRetryPolicyContext). public interface IRetryPolicyContext Properties Configuration Gets the client configuration. IgniteClientConfiguration Configuration { get; } Property Value IgniteClientConfiguration Exception Gets the exception that caused current retry iteration. Exception Exception { get; } Property Value Exception Iteration Gets the current iteration. int Iteration { get; } Property Value int Operation Gets the operation type. ClientOperationType Operation { get; } Property Value ClientOperationType"
  },
  "api/Apache.Ignite.ISslStreamFactory.html": {
    "href": "api/Apache.Ignite.ISslStreamFactory.html",
    "title": "Interface ISslStreamFactory | Apache Ignite.NET API Documentation",
    "keywords": "Interface ISslStreamFactory Namespace Apache.Ignite Assembly Apache.Ignite.dll SSL Stream Factory defines how SSL connection is established. See SslStreamFactory, SslStreamFactory. public interface ISslStreamFactory Methods CreateAsync(Stream, string, CancellationToken) Creates the SSL stream. Task<SslStream?> CreateAsync(Stream stream, string targetHost, CancellationToken cancellationToken) Parameters stream Stream The underlying raw stream. targetHost string Target host. cancellationToken CancellationToken Cancellation token. Returns Task<SslStream> SSL stream, or null if SSL is not enabled."
  },
  "api/Apache.Ignite.IgniteClient.html": {
    "href": "api/Apache.Ignite.IgniteClient.html",
    "title": "Class IgniteClient | Apache Ignite.NET API Documentation",
    "keywords": "Class IgniteClient Namespace Apache.Ignite Assembly Apache.Ignite.dll Ignite client builder. public static class IgniteClient Inheritance object IgniteClient Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods StartAsync(IgniteClientConfiguration) Starts the client. public static Task<IIgniteClient> StartAsync(IgniteClientConfiguration configuration) Parameters configuration IgniteClientConfiguration Configuration. Returns Task<IIgniteClient> Started client."
  },
  "api/Apache.Ignite.IgniteClientConfiguration.html": {
    "href": "api/Apache.Ignite.IgniteClientConfiguration.html",
    "title": "Class IgniteClientConfiguration | Apache Ignite.NET API Documentation",
    "keywords": "Class IgniteClientConfiguration Namespace Apache.Ignite Assembly Apache.Ignite.dll Ignite client driver configuration. public sealed record IgniteClientConfiguration : IEquatable<IgniteClientConfiguration> Inheritance object IgniteClientConfiguration Implements IEquatable<IgniteClientConfiguration> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors IgniteClientConfiguration() Initializes a new instance of the IgniteClientConfiguration class. public IgniteClientConfiguration() IgniteClientConfiguration(IgniteClientConfiguration) Initializes a new instance of the IgniteClientConfiguration class. public IgniteClientConfiguration(IgniteClientConfiguration other) Parameters other IgniteClientConfiguration Other configuration. IgniteClientConfiguration(params string[]) Initializes a new instance of the IgniteClientConfiguration class. public IgniteClientConfiguration(params string[] endpoints) Parameters endpoints string[] Endpoints. Fields DefaultHeartbeatInterval Default heartbeat interval. public static readonly TimeSpan DefaultHeartbeatInterval Field Value TimeSpan DefaultPort Default port. public const int DefaultPort = 10800 Field Value int DefaultReconnectInterval Default reconnect interval. public static readonly TimeSpan DefaultReconnectInterval Field Value TimeSpan DefaultSocketTimeout Default socket timeout. public static readonly TimeSpan DefaultSocketTimeout Field Value TimeSpan Properties Authenticator Gets or sets the authenticator. When null, no authentication is performed. See BasicAuthenticator. public IAuthenticator? Authenticator { get; set; } Property Value IAuthenticator Endpoints Gets endpoints to connect to. Providing addresses of multiple nodes in the cluster will improve performance: Ignite will balance requests across all connections, and use partition awareness to send key-based requests directly to the primary node. Examples of supported formats: * 192.168.1.25 (default port is used, see DefaultPort). * 192.168.1.25:780 (custom port) * 192.168.1.25:780..787 (custom port range) * my-host.com (default port is used, see DefaultPort). * my-host.com:780 (custom port) * my-host.com:780..787 (custom port range). public IList<string> Endpoints { get; } Property Value IList<string> HeartbeatInterval Gets or sets the heartbeat message interval. Default is DefaultHeartbeatInterval. When server-side idle timeout is not zero, effective heartbeat interval is set to Min(HeartbeatInterval, IdleTimeout / 3). When client connection is idle (no operations are performed), heartbeat messages are sent periodically to keep the connection alive and detect potential half-open state. public TimeSpan HeartbeatInterval { get; set; } Property Value TimeSpan LoggerFactory Gets or sets the logger factory. Default is Instance. public ILoggerFactory LoggerFactory { get; set; } Property Value ILoggerFactory OperationTimeout Gets or sets the operation timeout. Default is InfiniteTimeSpan (no timeout). The timeout applies to all operations except handshake and heartbeats. The time is measured from the moment the request is written to the socket to the moment the response is received. public TimeSpan OperationTimeout { get; set; } Property Value TimeSpan ReconnectInterval Gets or sets the background reconnect interval. Default is DefaultReconnectInterval. Set to Zero to disable periodic reconnect. Ignite balances requests across all healthy connections (when multiple endpoints are configured). Ignite also repairs connections on demand (when a request is made). However, \"secondary\" connections can be lost (due to network issues, or node restarts). This property controls how ofter Ignite client will check all configured endpoints and try to reconnect them in case of failure. public TimeSpan ReconnectInterval { get; set; } Property Value TimeSpan RetryPolicy Gets or sets the retry policy. When a request fails due to a connection error, Ignite will retry the request if the specified policy allows it. Default is RetryReadPolicy - retry read operations up to DefaultRetryLimit times. See also RetryLimitPolicy, RetryReadPolicy, RetryNonePolicy, RetryLimit. public IRetryPolicy RetryPolicy { get; set; } Property Value IRetryPolicy SocketTimeout Gets or sets the socket timeout. The timeout applies to the initial handshake procedure and heartbeats (see HeartbeatInterval). If the server does not respond to the initial handshake message or a periodic heartbeat in the specified time, the connection is closed with a TimeoutException. Use InfiniteTimeSpan for infinite timeout. public TimeSpan SocketTimeout { get; set; } Property Value TimeSpan SslStreamFactory Gets or sets the SSL stream factory. When not null, secure socket connection will be established. See SslStreamFactory. public ISslStreamFactory? SslStreamFactory { get; set; } Property Value ISslStreamFactory"
  },
  "api/Apache.Ignite.IgniteClientConnectionException.html": {
    "href": "api/Apache.Ignite.IgniteClientConnectionException.html",
    "title": "Class IgniteClientConnectionException | Apache Ignite.NET API Documentation",
    "keywords": "Class IgniteClientConnectionException Namespace Apache.Ignite Assembly Apache.Ignite.dll Ignite thin client exception. [Serializable] public class IgniteClientConnectionException : IgniteClientException, ISerializable Inheritance object Exception IgniteException IgniteClientException IgniteClientConnectionException Implements ISerializable Inherited Members IgniteException.ErrorPrefix IgniteException.GroupName IgniteException.Code IgniteException.TraceId IgniteException.ErrorCode IgniteException.GroupCode IgniteException.CodeAsString Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors IgniteClientConnectionException(Guid, int, string, Exception?) Initializes a new instance of the IgniteClientConnectionException class. public IgniteClientConnectionException(Guid traceId, int code, string message, Exception? innerException = null) Parameters traceId Guid Trace id. code int Code. message string Message. innerException Exception Inner exception. IgniteClientConnectionException(int, string, Exception?) Initializes a new instance of the IgniteClientConnectionException class. public IgniteClientConnectionException(int code, string message, Exception? innerException = null) Parameters code int Code. message string Message. innerException Exception Inner exception."
  },
  "api/Apache.Ignite.IgniteClientException.html": {
    "href": "api/Apache.Ignite.IgniteClientException.html",
    "title": "Class IgniteClientException | Apache Ignite.NET API Documentation",
    "keywords": "Class IgniteClientException Namespace Apache.Ignite Assembly Apache.Ignite.dll Ignite thin client exception. [Serializable] public class IgniteClientException : IgniteException, ISerializable Inheritance object Exception IgniteException IgniteClientException Implements ISerializable Derived IgniteClientConnectionException Inherited Members IgniteException.ErrorPrefix IgniteException.GroupName IgniteException.Code IgniteException.TraceId IgniteException.ErrorCode IgniteException.GroupCode IgniteException.CodeAsString Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors IgniteClientException(Guid, int, string, Exception?) Initializes a new instance of the IgniteClientException class. public IgniteClientException(Guid traceId, int code, string message, Exception? innerException = null) Parameters traceId Guid Trace id. code int Code. message string Message. innerException Exception Inner exception. IgniteClientException(int, string, Exception?) Initializes a new instance of the IgniteClientException class. public IgniteClientException(int code, string message, Exception? innerException = null) Parameters code int Code. message string Message. innerException Exception Inner exception."
  },
  "api/Apache.Ignite.IgniteClientGroup.html": {
    "href": "api/Apache.Ignite.IgniteClientGroup.html",
    "title": "Class IgniteClientGroup | Apache Ignite.NET API Documentation",
    "keywords": "Class IgniteClientGroup Namespace Apache.Ignite Assembly Apache.Ignite.dll Ignite client group. Thread safe. Creates and maintains up to Size Ignite clients and returns them in a round-robin fashion. Ignite clients are thread safe, so there is no rent/return semantics. Register as a singleton in DI container: builder.Services.AddSingleton(_ => new IgniteClientGroup( new IgniteClientGroupConfiguration { Size = 3, ClientConfiguration = new(\"localhost\"), })); Invoke from a controller: public async Task<IActionResult> Index([FromServices] IgniteClientGroup igniteGroup) { IIgnite ignite = await igniteGroup.GetIgniteAsync(); var tables = await ignite.Tables.GetTablesAsync(); return Ok(tables); } public sealed class IgniteClientGroup : IDisposable Inheritance object IgniteClientGroup Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Constructors IgniteClientGroup(IgniteClientGroupConfiguration) Initializes a new instance of the IgniteClientGroup class. public IgniteClientGroup(IgniteClientGroupConfiguration configuration) Parameters configuration IgniteClientGroupConfiguration Configuration. Properties Configuration Gets the configuration. public IgniteClientGroupConfiguration Configuration { get; } Property Value IgniteClientGroupConfiguration IsDisposed Gets a value indicating whether the group is disposed. public bool IsDisposed { get; } Property Value bool Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() GetIgniteAsync() Gets an Ignite client from the group. Creates a new one if necessary. Performs round-robin balancing across grouped instances. public ValueTask<IIgnite> GetIgniteAsync() Returns ValueTask<IIgnite> Ignite client. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Apache.Ignite.IgniteClientGroupConfiguration.html": {
    "href": "api/Apache.Ignite.IgniteClientGroupConfiguration.html",
    "title": "Class IgniteClientGroupConfiguration | Apache Ignite.NET API Documentation",
    "keywords": "Class IgniteClientGroupConfiguration Namespace Apache.Ignite Assembly Apache.Ignite.dll Ignite client group configuration. See IgniteClientGroup for more details. public sealed record IgniteClientGroupConfiguration : IEquatable<IgniteClientGroupConfiguration> Inheritance object IgniteClientGroupConfiguration Implements IEquatable<IgniteClientGroupConfiguration> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties ClientConfiguration Gets or sets the client configuration. public required IgniteClientConfiguration ClientConfiguration { get; set; } Property Value IgniteClientConfiguration Size Gets or sets the group size (maximum number of client instances - see IIgniteClient). Defaults to 1. One client is enough for most use cases: it is thread-safe, implements request multiplexing, and connects to multiple cluster nodes. public int Size { get; set; } Property Value int"
  },
  "api/Apache.Ignite.IgniteException.html": {
    "href": "api/Apache.Ignite.IgniteException.html",
    "title": "Class IgniteException | Apache Ignite.NET API Documentation",
    "keywords": "Class IgniteException Namespace Apache.Ignite Assembly Apache.Ignite.dll Ignite exception. [Serializable] public class IgniteException : Exception, ISerializable Inheritance object Exception IgniteException Implements ISerializable Derived ClusterInitFailureException ClusterNotInitializedException ColumnAlreadyExistsException ColumnNotFoundException ComputeException NodeNotFoundException CursorClosedException IgniteClientException IndexAlreadyExistsException IndexNotFoundException MarshallerException MarshallingException UnmarshallingException UnsupportedObjectTypeMarshallingException NodeNotStartedException NodeStartException SchemaNotFoundException InvalidCredentialsException UnsupportedAuthenticationTypeException NoRowSetExpectedException SqlBatchException SqlException CriteriaException DataStreamerException TableAlreadyExistsException TableNotFoundException IncompatibleSchemaException MismatchingTransactionOutcomeException TransactionException UnexpectedNullValueException UnsupportedPartitionTypeException Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors IgniteException(Guid, int, string?, Exception?) Initializes a new instance of the IgniteException class. public IgniteException(Guid traceId, int code, string? message, Exception? innerException = null) Parameters traceId Guid Trace id. code int Code. message string Message. innerException Exception Inner exception. Properties Code Gets the full exception code. public int Code { get; } Property Value int CodeAsString Gets the code as string. public string CodeAsString { get; } Property Value string ErrorCode Gets the error code. public short ErrorCode { get; } Property Value short ErrorPrefix Gets the group error prefix. public string ErrorPrefix { get; } Property Value string GroupCode Gets the group code. public short GroupCode { get; } Property Value short GroupName Gets the group name. public string GroupName { get; } Property Value string TraceId Gets the trace id (correlation id). public Guid TraceId { get; } Property Value Guid"
  },
  "api/Apache.Ignite.IgniteServiceCollectionExtensions.html": {
    "href": "api/Apache.Ignite.IgniteServiceCollectionExtensions.html",
    "title": "Class IgniteServiceCollectionExtensions | Apache Ignite.NET API Documentation",
    "keywords": "Class IgniteServiceCollectionExtensions Namespace Apache.Ignite Assembly Apache.Ignite.dll Extension methods for setting up Apache Ignite services in an IServiceCollection. public static class IgniteServiceCollectionExtensions Inheritance object IgniteServiceCollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddIgniteClientGroup(IServiceCollection, IgniteClientGroupConfiguration, ServiceLifetime) Registers an IgniteClientGroup. public static IServiceCollection AddIgniteClientGroup(this IServiceCollection services, IgniteClientGroupConfiguration configuration, ServiceLifetime clientGroupLifetime = ServiceLifetime.Singleton) Parameters services IServiceCollection The IServiceCollection to add services to. configuration IgniteClientGroupConfiguration IgniteClientGroupConfiguration instance. clientGroupLifetime ServiceLifetime The lifetime with which to register the IgniteClientGroup service in the container. Defaults to Singleton. Returns IServiceCollection Original service collection to chain multiple calls. AddIgniteClientGroup(IServiceCollection, Func<IServiceProvider, IgniteClientGroupConfiguration>, ServiceLifetime) Registers an IgniteClientGroup. public static IServiceCollection AddIgniteClientGroup(this IServiceCollection services, Func<IServiceProvider, IgniteClientGroupConfiguration> configure, ServiceLifetime clientGroupLifetime = ServiceLifetime.Singleton) Parameters services IServiceCollection The IServiceCollection to add services to. configure Func<IServiceProvider, IgniteClientGroupConfiguration> Function to build the IgniteClientGroupConfiguration. clientGroupLifetime ServiceLifetime The lifetime with which to register the IgniteClientGroup service in the container. Defaults to Singleton. Returns IServiceCollection Original service collection to chain multiple calls. AddIgniteClientGroupKeyed(IServiceCollection, object?, IgniteClientGroupConfiguration, ServiceLifetime) Registers an IgniteClientGroup. public static IServiceCollection AddIgniteClientGroupKeyed(this IServiceCollection services, object? serviceKey, IgniteClientGroupConfiguration configuration, ServiceLifetime clientGroupLifetime = ServiceLifetime.Singleton) Parameters services IServiceCollection The IServiceCollection to add services to. serviceKey object The ServiceKey of the client group. configuration IgniteClientGroupConfiguration IgniteClientGroupConfiguration instance. clientGroupLifetime ServiceLifetime The lifetime with which to register the IgniteClientGroup service in the container. Defaults to Singleton. Returns IServiceCollection Original service collection to chain multiple calls. AddIgniteClientGroupKeyed(IServiceCollection, object?, Func<IServiceProvider, IgniteClientGroupConfiguration>, ServiceLifetime) Registers an IgniteClientGroup. public static IServiceCollection AddIgniteClientGroupKeyed(this IServiceCollection services, object? serviceKey, Func<IServiceProvider, IgniteClientGroupConfiguration> configure, ServiceLifetime clientGroupLifetime = ServiceLifetime.Singleton) Parameters services IServiceCollection The IServiceCollection to add services to. serviceKey object The ServiceKey of the client group. configure Func<IServiceProvider, IgniteClientGroupConfiguration> Function to build the IgniteClientGroupConfiguration. clientGroupLifetime ServiceLifetime The lifetime with which to register the IgniteClientGroup service in the container. Defaults to Singleton. Returns IServiceCollection Original service collection to chain multiple calls. AddIgniteClientGroupKeyed(IServiceCollection, object?, Func<IServiceProvider, object?, IgniteClientGroupConfiguration>, ServiceLifetime) Registers an IgniteClientGroup. public static IServiceCollection AddIgniteClientGroupKeyed(this IServiceCollection services, object? serviceKey, Func<IServiceProvider, object?, IgniteClientGroupConfiguration> configure, ServiceLifetime clientGroupLifetime = ServiceLifetime.Singleton) Parameters services IServiceCollection The IServiceCollection to add services to. serviceKey object The ServiceKey of the client group. configure Func<IServiceProvider, object, IgniteClientGroupConfiguration> Function to build the IgniteClientGroupConfiguration. clientGroupLifetime ServiceLifetime The lifetime with which to register the IgniteClientGroup service in the container. Defaults to Singleton. Returns IServiceCollection Original service collection to chain multiple calls."
  },
  "api/Apache.Ignite.IndexAlreadyExistsException.html": {
    "href": "api/Apache.Ignite.IndexAlreadyExistsException.html",
    "title": "Class IndexAlreadyExistsException | Apache Ignite.NET API Documentation",
    "keywords": "Class IndexAlreadyExistsException Namespace Apache.Ignite Assembly Apache.Ignite.dll This exception is thrown when a new index creation has failed because an index with the specified name already existed. [Serializable] public sealed class IndexAlreadyExistsException : IgniteException, ISerializable Inheritance object Exception IgniteException IndexAlreadyExistsException Implements ISerializable Inherited Members IgniteException.ErrorPrefix IgniteException.GroupName IgniteException.Code IgniteException.TraceId IgniteException.ErrorCode IgniteException.GroupCode IgniteException.CodeAsString Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors IndexAlreadyExistsException(Guid, int, string?, Exception?) Initializes a new instance of the IndexAlreadyExistsException class. public IndexAlreadyExistsException(Guid traceId, int code, string? message, Exception? innerException = null) Parameters traceId Guid Trace id. code int Code. message string Message. innerException Exception Inner exception."
  },
  "api/Apache.Ignite.IndexNotFoundException.html": {
    "href": "api/Apache.Ignite.IndexNotFoundException.html",
    "title": "Class IndexNotFoundException | Apache Ignite.NET API Documentation",
    "keywords": "Class IndexNotFoundException Namespace Apache.Ignite Assembly Apache.Ignite.dll Exception is thrown when the specified index is not found. [Serializable] public sealed class IndexNotFoundException : IgniteException, ISerializable Inheritance object Exception IgniteException IndexNotFoundException Implements ISerializable Inherited Members IgniteException.ErrorPrefix IgniteException.GroupName IgniteException.Code IgniteException.TraceId IgniteException.ErrorCode IgniteException.GroupCode IgniteException.CodeAsString Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors IndexNotFoundException(Guid, int, string?, Exception?) Initializes a new instance of the IndexNotFoundException class. public IndexNotFoundException(Guid traceId, int code, string? message, Exception? innerException = null) Parameters traceId Guid Trace id. code int Code. message string Message. innerException Exception Inner exception."
  },
  "api/Apache.Ignite.MarshallerException.html": {
    "href": "api/Apache.Ignite.MarshallerException.html",
    "title": "Class MarshallerException | Apache Ignite.NET API Documentation",
    "keywords": "Class MarshallerException Namespace Apache.Ignite Assembly Apache.Ignite.dll This exception is caused by a failure to marshall or unmarshall a value. The failure can be due to a value not matching the a schema or to another reason. [Serializable] public sealed class MarshallerException : IgniteException, ISerializable Inheritance object Exception IgniteException MarshallerException Implements ISerializable Inherited Members IgniteException.ErrorPrefix IgniteException.GroupName IgniteException.Code IgniteException.TraceId IgniteException.ErrorCode IgniteException.GroupCode IgniteException.CodeAsString Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors MarshallerException(Guid, int, string?, Exception?) Initializes a new instance of the MarshallerException class. public MarshallerException(Guid traceId, int code, string? message, Exception? innerException = null) Parameters traceId Guid Trace id. code int Code. message string Message. innerException Exception Inner exception."
  },
  "api/Apache.Ignite.Marshalling.IMarshaller-1.html": {
    "href": "api/Apache.Ignite.Marshalling.IMarshaller-1.html",
    "title": "Interface IMarshaller<T> | Apache Ignite.NET API Documentation",
    "keywords": "Interface IMarshaller<T> Namespace Apache.Ignite.Marshalling Assembly Apache.Ignite.dll Ignite marshaller (serializer / deserializer). Marshaller is used in APIs that require transferring custom objects over the wire, such as Compute arguments and results. See also JsonMarshaller<T>. public interface IMarshaller<T> Type Parameters T Object type. Methods Marshal(T, IBufferWriter<byte>) Marshals (serializes) the specified object into the provided writer. void Marshal(T obj, IBufferWriter<byte> writer) Parameters obj T Object. Not null - Ignite handles nulls separately and does not invoke the marshaller. writer IBufferWriter<byte> Writer. Unmarshal(ReadOnlySpan<byte>) Unmarshals (deserializes) an object from the provided data. T Unmarshal(ReadOnlySpan<byte> bytes) Parameters bytes ReadOnlySpan<byte> Serialized data. Returns T Deserialized object."
  },
  "api/Apache.Ignite.Marshalling.JsonMarshaller-1.html": {
    "href": "api/Apache.Ignite.Marshalling.JsonMarshaller-1.html",
    "title": "Class JsonMarshaller<T> | Apache Ignite.NET API Documentation",
    "keywords": "Class JsonMarshaller<T> Namespace Apache.Ignite.Marshalling Assembly Apache.Ignite.dll JSON marshaller. Uses JsonSerializer. public sealed class JsonMarshaller<T> : IMarshaller<T> Type Parameters T Object type. Inheritance object JsonMarshaller<T> Implements IMarshaller<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Constructors JsonMarshaller(JsonSerializerOptions?) Initializes a new instance of the JsonMarshaller<T> class. public JsonMarshaller(JsonSerializerOptions? options = null) Parameters options JsonSerializerOptions Options. Properties Options Gets the options. public JsonSerializerOptions Options { get; } Property Value JsonSerializerOptions Methods Marshal(T, IBufferWriter<byte>) Marshals (serializes) the specified object into the provided writer. public void Marshal(T obj, IBufferWriter<byte> writer) Parameters obj T Object. Not null - Ignite handles nulls separately and does not invoke the marshaller. writer IBufferWriter<byte> Writer. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Unmarshal(ReadOnlySpan<byte>) Unmarshals (deserializes) an object from the provided data. public T Unmarshal(ReadOnlySpan<byte> bytes) Parameters bytes ReadOnlySpan<byte> Serialized data. Returns T Deserialized object."
  },
  "api/Apache.Ignite.Marshalling.MarshallingException.html": {
    "href": "api/Apache.Ignite.Marshalling.MarshallingException.html",
    "title": "Class MarshallingException | Apache Ignite.NET API Documentation",
    "keywords": "Class MarshallingException Namespace Apache.Ignite.Marshalling Assembly Apache.Ignite.dll Exception thrown when an object type is not supported by the marshaller. [Serializable] public sealed class MarshallingException : IgniteException, ISerializable Inheritance object Exception IgniteException MarshallingException Implements ISerializable Inherited Members IgniteException.ErrorPrefix IgniteException.GroupName IgniteException.Code IgniteException.TraceId IgniteException.ErrorCode IgniteException.GroupCode IgniteException.CodeAsString Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors MarshallingException(Guid, int, string?, Exception?) Initializes a new instance of the MarshallingException class. public MarshallingException(Guid traceId, int code, string? message, Exception? innerException = null) Parameters traceId Guid Trace id. code int Code. message string Message. innerException Exception Inner exception."
  },
  "api/Apache.Ignite.Marshalling.UnmarshallingException.html": {
    "href": "api/Apache.Ignite.Marshalling.UnmarshallingException.html",
    "title": "Class UnmarshallingException | Apache Ignite.NET API Documentation",
    "keywords": "Class UnmarshallingException Namespace Apache.Ignite.Marshalling Assembly Apache.Ignite.dll Exception thrown when unmarshalling failed. [Serializable] public sealed class UnmarshallingException : IgniteException, ISerializable Inheritance object Exception IgniteException UnmarshallingException Implements ISerializable Inherited Members IgniteException.ErrorPrefix IgniteException.GroupName IgniteException.Code IgniteException.TraceId IgniteException.ErrorCode IgniteException.GroupCode IgniteException.CodeAsString Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors UnmarshallingException(Guid, int, string?, Exception?) Initializes a new instance of the UnmarshallingException class. public UnmarshallingException(Guid traceId, int code, string? message, Exception? innerException = null) Parameters traceId Guid Trace id. code int Code. message string Message. innerException Exception Inner exception."
  },
  "api/Apache.Ignite.Marshalling.UnsupportedObjectTypeMarshallingException.html": {
    "href": "api/Apache.Ignite.Marshalling.UnsupportedObjectTypeMarshallingException.html",
    "title": "Class UnsupportedObjectTypeMarshallingException | Apache Ignite.NET API Documentation",
    "keywords": "Class UnsupportedObjectTypeMarshallingException Namespace Apache.Ignite.Marshalling Assembly Apache.Ignite.dll Exception thrown when an object type is not supported by the marshaller. [Serializable] public sealed class UnsupportedObjectTypeMarshallingException : IgniteException, ISerializable Inheritance object Exception IgniteException UnsupportedObjectTypeMarshallingException Implements ISerializable Inherited Members IgniteException.ErrorPrefix IgniteException.GroupName IgniteException.Code IgniteException.TraceId IgniteException.ErrorCode IgniteException.GroupCode IgniteException.CodeAsString Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors UnsupportedObjectTypeMarshallingException(Guid, int, string?, Exception?) Initializes a new instance of the UnsupportedObjectTypeMarshallingException class. public UnsupportedObjectTypeMarshallingException(Guid traceId, int code, string? message, Exception? innerException = null) Parameters traceId Guid Trace id. code int Code. message string Message. innerException Exception Inner exception."
  },
  "api/Apache.Ignite.Marshalling.html": {
    "href": "api/Apache.Ignite.Marshalling.html",
    "title": "Namespace Apache.Ignite.Marshalling | Apache Ignite.NET API Documentation",
    "keywords": "Namespace Apache.Ignite.Marshalling Classes JsonMarshaller<T> JSON marshaller. Uses JsonSerializer. MarshallingException Exception thrown when an object type is not supported by the marshaller. UnmarshallingException Exception thrown when unmarshalling failed. UnsupportedObjectTypeMarshallingException Exception thrown when an object type is not supported by the marshaller. Interfaces IMarshaller<T> Ignite marshaller (serializer / deserializer). Marshaller is used in APIs that require transferring custom objects over the wire, such as Compute arguments and results. See also JsonMarshaller<T>."
  },
  "api/Apache.Ignite.MetricNames.html": {
    "href": "api/Apache.Ignite.MetricNames.html",
    "title": "Class MetricNames | Apache Ignite.NET API Documentation",
    "keywords": "Class MetricNames Namespace Apache.Ignite Assembly Apache.Ignite.dll Ignite.NET client metrics. CLI usage example: dotnet-counters monitor --counters Apache.Ignite,System.Runtime --process-id PID See https://learn.microsoft.com/en-us/dotnet/core/diagnostics/dotnet-counters for details. Code usage example: var meterListener = new MeterListener(); meterListener.InstrumentPublished = (instrument, listener) => { if (instrument.Meter.Name == MetricNames.MeterName) { listener.EnableMeasurementEvents(instrument); Console.WriteLine($\"Instrument enabled: {instrument.Name}\"); } }; meterListener.SetMeasurementEventCallback<long>((instrument, measurement, tags, state) => Console.WriteLine($\"{instrument.Name}: {measurement}\")); meterListener.SetMeasurementEventCallback<int>((instrument, measurement, tags, state) => Console.WriteLine($\"{instrument.Name}: {measurement}\")); meterListener.Start(); See https://learn.microsoft.com/en-us/dotnet/core/diagnostics/metrics for details. public static class MetricNames Inheritance object MetricNames Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields All All metric names. public static readonly IReadOnlyCollection<string> All Field Value IReadOnlyCollection<string> BytesReceived Total number of bytes received. public const string BytesReceived = \"bytes-received\" Field Value string BytesSent Total number of bytes sent. public const string BytesSent = \"bytes-sent\" Field Value string ConnectionsActive Total number of currently active connections. public const string ConnectionsActive = \"connections-active\" Field Value string ConnectionsEstablished Total number of connections established (unlike ConnectionsActive, this metric only goes up). public const string ConnectionsEstablished = \"connections-established\" Field Value string ConnectionsLost Total number of connections lost. public const string ConnectionsLost = \"connections-lost\" Field Value string ConnectionsLostTimeout Total number of connections lost due to a timeout. public const string ConnectionsLostTimeout = \"connections-lost-timeout\" Field Value string HandshakesFailed Total number of failed handshakes (due to version mismatch, auth failure, or other problems). public const string HandshakesFailed = \"handshakes-failed\" Field Value string HandshakesFailedTimeout Total number of failed handshakes due to a network timeout. public const string HandshakesFailedTimeout = \"handshakes-failed-timeout\" Field Value string MeterName Meter name. public const string MeterName = \"Apache.Ignite\" Field Value string MeterVersion Meter version. public const string MeterVersion = \"3.0.0\" Field Value string RequestsActive Currently active requests (requests being sent to the socket or waiting for response). public const string RequestsActive = \"requests-active\" Field Value string RequestsCompleted Total number of requests completed (response received). public const string RequestsCompleted = \"requests-completed\" Field Value string RequestsFailed Total number of failed requests (completed with error or failed to send). public const string RequestsFailed = \"requests-failed\" Field Value string RequestsRetried Total number of retried requests. public const string RequestsRetried = \"requests-retried\" Field Value string RequestsSent Total number of requests sent. public const string RequestsSent = \"requests-sent\" Field Value string StreamerBatchesActive Total number of active (in-memory) data streamer batches. public const string StreamerBatchesActive = \"streamer-batches-active\" Field Value string StreamerBatchesSent Total number of data streamer batches sent. public const string StreamerBatchesSent = \"streamer-batches-sent\" Field Value string StreamerItemsQueued Total number of queued data streamer items (rows). public const string StreamerItemsQueued = \"streamer-items-queued\" Field Value string StreamerItemsSent Total number of data streamer items sent. public const string StreamerItemsSent = \"streamer-items-sent\" Field Value string"
  },
  "api/Apache.Ignite.MetricTags.html": {
    "href": "api/Apache.Ignite.MetricTags.html",
    "title": "Class MetricTags | Apache Ignite.NET API Documentation",
    "keywords": "Class MetricTags Namespace Apache.Ignite Assembly Apache.Ignite.dll Metric tag names. See also MetricNames. public static class MetricTags Inheritance object MetricTags Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ClientId Client id. public const string ClientId = \"client.id\" Field Value string NodeAddress Node address. public const string NodeAddress = \"node.addr\" Field Value string"
  },
  "api/Apache.Ignite.Network.IClusterNode.html": {
    "href": "api/Apache.Ignite.Network.IClusterNode.html",
    "title": "Interface IClusterNode | Apache Ignite.NET API Documentation",
    "keywords": "Interface IClusterNode Namespace Apache.Ignite.Network Assembly Apache.Ignite.dll Ignite cluster node. public interface IClusterNode Properties Address Gets the node address. EndPoint Address { get; } Property Value EndPoint Id Gets the local node id. Changes after node restart. Guid Id { get; } Property Value Guid Name Gets the unique name (consistent id) of the cluster member. Does not change after node restart. string Name { get; } Property Value string"
  },
  "api/Apache.Ignite.Network.IConnectionInfo.html": {
    "href": "api/Apache.Ignite.Network.IConnectionInfo.html",
    "title": "Interface IConnectionInfo | Apache Ignite.NET API Documentation",
    "keywords": "Interface IConnectionInfo Namespace Apache.Ignite.Network Assembly Apache.Ignite.dll Connection info. public interface IConnectionInfo Properties Node Gets the target node. IClusterNode Node { get; } Property Value IClusterNode SslInfo Gets the SSL info, if SSL is enabled. ISslInfo? SslInfo { get; } Property Value ISslInfo"
  },
  "api/Apache.Ignite.Network.ISslInfo.html": {
    "href": "api/Apache.Ignite.Network.ISslInfo.html",
    "title": "Interface ISslInfo | Apache Ignite.NET API Documentation",
    "keywords": "Interface ISslInfo Namespace Apache.Ignite.Network Assembly Apache.Ignite.dll SSL info. public interface ISslInfo Properties IsMutuallyAuthenticated Gets a value indicating whether both server and client have been authenticated. bool IsMutuallyAuthenticated { get; } Property Value bool LocalCertificate Gets the certificate used to authenticate the local endpoint. X509Certificate? LocalCertificate { get; } Property Value X509Certificate NegotiatedCipherSuiteName Gets the cipher suite which was negotiated for this connection. string NegotiatedCipherSuiteName { get; } Property Value string RemoteCertificate Gets the certificate used to authenticate the remote endpoint. X509Certificate? RemoteCertificate { get; } Property Value X509Certificate SslProtocol Gets the SSL protocol. SslProtocols SslProtocol { get; } Property Value SslProtocols TargetHostName Gets the name of the server the client is trying to connect to. That name is used for server certificate validation. It can be a DNS name or an IP address. string TargetHostName { get; } Property Value string"
  },
  "api/Apache.Ignite.Network.html": {
    "href": "api/Apache.Ignite.Network.html",
    "title": "Namespace Apache.Ignite.Network | Apache Ignite.NET API Documentation",
    "keywords": "Namespace Apache.Ignite.Network Interfaces IClusterNode Ignite cluster node. IConnectionInfo Connection info. ISslInfo SSL info."
  },
  "api/Apache.Ignite.NodeNotStartedException.html": {
    "href": "api/Apache.Ignite.NodeNotStartedException.html",
    "title": "Class NodeNotStartedException | Apache Ignite.NET API Documentation",
    "keywords": "Class NodeNotStartedException Namespace Apache.Ignite Assembly Apache.Ignite.dll Thrown when embedded node is not yet started or it's already stopped. [Serializable] public sealed class NodeNotStartedException : IgniteException, ISerializable Inheritance object Exception IgniteException NodeNotStartedException Implements ISerializable Inherited Members IgniteException.ErrorPrefix IgniteException.GroupName IgniteException.Code IgniteException.TraceId IgniteException.ErrorCode IgniteException.GroupCode IgniteException.CodeAsString Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors NodeNotStartedException(Guid, int, string?, Exception?) Initializes a new instance of the NodeNotStartedException class. public NodeNotStartedException(Guid traceId, int code, string? message, Exception? innerException = null) Parameters traceId Guid Trace id. code int Code. message string Message. innerException Exception Inner exception."
  },
  "api/Apache.Ignite.NodeStartException.html": {
    "href": "api/Apache.Ignite.NodeStartException.html",
    "title": "Class NodeStartException | Apache Ignite.NET API Documentation",
    "keywords": "Class NodeStartException Namespace Apache.Ignite Assembly Apache.Ignite.dll Thrown when node failed to start. [Serializable] public sealed class NodeStartException : IgniteException, ISerializable Inheritance object Exception IgniteException NodeStartException Implements ISerializable Inherited Members IgniteException.ErrorPrefix IgniteException.GroupName IgniteException.Code IgniteException.TraceId IgniteException.ErrorCode IgniteException.GroupCode IgniteException.CodeAsString Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors NodeStartException(Guid, int, string?, Exception?) Initializes a new instance of the NodeStartException class. public NodeStartException(Guid traceId, int code, string? message, Exception? innerException = null) Parameters traceId Guid Trace id. code int Code. message string Message. innerException Exception Inner exception."
  },
  "api/Apache.Ignite.Option-1.html": {
    "href": "api/Apache.Ignite.Option-1.html",
    "title": "Struct Option<T> | Apache Ignite.NET API Documentation",
    "keywords": "Struct Option<T> Namespace Apache.Ignite Assembly Apache.Ignite.dll A wrapper that may or may not contain a value of type T. public readonly record struct Option<T> : IEquatable<Option<T>> Type Parameters T Value type. Implements IEquatable<Option<T>> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties HasValue Gets a value indicating whether the value is present. public bool HasValue { get; } Property Value bool Value Gets the value. public T Value { get; } Property Value T Methods Deconstruct(out T, out bool) Deconstructs this instance. public void Deconstruct(out T value, out bool hasValue) Parameters value T Value. hasValue bool Whether the value is present. Select<TRes>(Func<T, TRes>) Maps this instance to another type. public Option<TRes> Select<TRes>(Func<T, TRes> selector) Parameters selector Func<T, TRes> Selector. Returns Option<TRes> Resulting option. Type Parameters TRes Result type."
  },
  "api/Apache.Ignite.Option.html": {
    "href": "api/Apache.Ignite.Option.html",
    "title": "Class Option | Apache Ignite.NET API Documentation",
    "keywords": "Class Option Namespace Apache.Ignite Assembly Apache.Ignite.dll Static helpers for Option<T>. public static class Option Inheritance object Option Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods None<T>() Returns an option without a value. public static Option<T> None<T>() Returns Option<T> Option of T. Type Parameters T value type. Some<T>(T) Returns an option of the specified value. public static Option<T> Some<T>(T val) Parameters val T Value. Returns Option<T> Option of T. Type Parameters T value type."
  },
  "api/Apache.Ignite.RetryLimitPolicy.html": {
    "href": "api/Apache.Ignite.RetryLimitPolicy.html",
    "title": "Class RetryLimitPolicy | Apache Ignite.NET API Documentation",
    "keywords": "Class RetryLimitPolicy Namespace Apache.Ignite Assembly Apache.Ignite.dll Retry policy that returns true when Iteration is less than the specified RetryLimit, or the limit is zero or less. public class RetryLimitPolicy : IRetryPolicy Inheritance object RetryLimitPolicy Implements IRetryPolicy Derived RetryReadPolicy Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields DefaultRetryLimit Default retry limit. public const int DefaultRetryLimit = 16 Field Value int Properties RetryLimit Gets or sets the retry limit. 0 or less for no limit. Default is DefaultRetryLimit. public int RetryLimit { get; set; } Property Value int Methods ShouldRetry(IRetryPolicyContext) Gets a value indicating whether a client operation that has failed due to a connection issue should be retried. public virtual bool ShouldRetry(IRetryPolicyContext context) Parameters context IRetryPolicyContext Operation context. Returns bool true if the operation should be retried on another connection, false otherwise. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Apache.Ignite.RetryNonePolicy.html": {
    "href": "api/Apache.Ignite.RetryNonePolicy.html",
    "title": "Class RetryNonePolicy | Apache Ignite.NET API Documentation",
    "keywords": "Class RetryNonePolicy Namespace Apache.Ignite Assembly Apache.Ignite.dll Retry policy that always returns false. public sealed class RetryNonePolicy : IRetryPolicy Inheritance object RetryNonePolicy Implements IRetryPolicy Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Fields Instance Singleton instance. public static readonly RetryNonePolicy Instance Field Value RetryNonePolicy Methods ShouldRetry(IRetryPolicyContext) Gets a value indicating whether a client operation that has failed due to a connection issue should be retried. public bool ShouldRetry(IRetryPolicyContext context) Parameters context IRetryPolicyContext Operation context. Returns bool true if the operation should be retried on another connection, false otherwise. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Apache.Ignite.RetryReadPolicy.html": {
    "href": "api/Apache.Ignite.RetryReadPolicy.html",
    "title": "Class RetryReadPolicy | Apache Ignite.NET API Documentation",
    "keywords": "Class RetryReadPolicy Namespace Apache.Ignite Assembly Apache.Ignite.dll Retry policy that returns true for all read-only operations that do not modify data. public sealed class RetryReadPolicy : RetryLimitPolicy, IRetryPolicy Inheritance object RetryLimitPolicy RetryReadPolicy Implements IRetryPolicy Inherited Members RetryLimitPolicy.DefaultRetryLimit RetryLimitPolicy.RetryLimit RetryLimitPolicy.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Methods ShouldRetry(IRetryPolicyContext) Gets a value indicating whether a client operation that has failed due to a connection issue should be retried. public override bool ShouldRetry(IRetryPolicyContext context) Parameters context IRetryPolicyContext Operation context. Returns bool true if the operation should be retried on another connection, false otherwise."
  },
  "api/Apache.Ignite.SchemaNotFoundException.html": {
    "href": "api/Apache.Ignite.SchemaNotFoundException.html",
    "title": "Class SchemaNotFoundException | Apache Ignite.NET API Documentation",
    "keywords": "Class SchemaNotFoundException Namespace Apache.Ignite Assembly Apache.Ignite.dll Exception is thrown when a specified schema cannot be found. [Serializable] public sealed class SchemaNotFoundException : IgniteException, ISerializable Inheritance object Exception IgniteException SchemaNotFoundException Implements ISerializable Inherited Members IgniteException.ErrorPrefix IgniteException.GroupName IgniteException.Code IgniteException.TraceId IgniteException.ErrorCode IgniteException.GroupCode IgniteException.CodeAsString Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors SchemaNotFoundException(Guid, int, string?, Exception?) Initializes a new instance of the SchemaNotFoundException class. public SchemaNotFoundException(Guid traceId, int code, string? message, Exception? innerException = null) Parameters traceId Guid Trace id. code int Code. message string Message. innerException Exception Inner exception."
  },
  "api/Apache.Ignite.Security.Exception.InvalidCredentialsException.html": {
    "href": "api/Apache.Ignite.Security.Exception.InvalidCredentialsException.html",
    "title": "Class InvalidCredentialsException | Apache Ignite.NET API Documentation",
    "keywords": "Class InvalidCredentialsException Namespace Apache.Ignite.Security.Exception Assembly Apache.Ignite.dll Exception thrown when authentication fails due to invalid credentials. [Serializable] public sealed class InvalidCredentialsException : IgniteException, ISerializable Inheritance object Exception IgniteException InvalidCredentialsException Implements ISerializable Inherited Members IgniteException.ErrorPrefix IgniteException.GroupName IgniteException.Code IgniteException.TraceId IgniteException.ErrorCode IgniteException.GroupCode IgniteException.CodeAsString Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors InvalidCredentialsException(Guid, int, string?, Exception?) Initializes a new instance of the InvalidCredentialsException class. public InvalidCredentialsException(Guid traceId, int code, string? message, Exception? innerException = null) Parameters traceId Guid Trace id. code int Code. message string Message. innerException Exception Inner exception."
  },
  "api/Apache.Ignite.Security.Exception.UnsupportedAuthenticationTypeException.html": {
    "href": "api/Apache.Ignite.Security.Exception.UnsupportedAuthenticationTypeException.html",
    "title": "Class UnsupportedAuthenticationTypeException | Apache Ignite.NET API Documentation",
    "keywords": "Class UnsupportedAuthenticationTypeException Namespace Apache.Ignite.Security.Exception Assembly Apache.Ignite.dll The exception thrown when authentication type is not supported. [Serializable] public sealed class UnsupportedAuthenticationTypeException : IgniteException, ISerializable Inheritance object Exception IgniteException UnsupportedAuthenticationTypeException Implements ISerializable Inherited Members IgniteException.ErrorPrefix IgniteException.GroupName IgniteException.Code IgniteException.TraceId IgniteException.ErrorCode IgniteException.GroupCode IgniteException.CodeAsString Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors UnsupportedAuthenticationTypeException(Guid, int, string?, Exception?) Initializes a new instance of the UnsupportedAuthenticationTypeException class. public UnsupportedAuthenticationTypeException(Guid traceId, int code, string? message, Exception? innerException = null) Parameters traceId Guid Trace id. code int Code. message string Message. innerException Exception Inner exception."
  },
  "api/Apache.Ignite.Security.Exception.html": {
    "href": "api/Apache.Ignite.Security.Exception.html",
    "title": "Namespace Apache.Ignite.Security.Exception | Apache Ignite.NET API Documentation",
    "keywords": "Namespace Apache.Ignite.Security.Exception Classes InvalidCredentialsException Exception thrown when authentication fails due to invalid credentials. UnsupportedAuthenticationTypeException The exception thrown when authentication type is not supported."
  },
  "api/Apache.Ignite.Sql.ColumnType.html": {
    "href": "api/Apache.Ignite.Sql.ColumnType.html",
    "title": "Enum ColumnType | Apache Ignite.NET API Documentation",
    "keywords": "Enum ColumnType Namespace Apache.Ignite.Sql Assembly Apache.Ignite.dll SQL column type. public enum ColumnType Fields Boolean = 1 ByteArray = 16 Date = 9 Datetime = 11 Decimal = 8 Double = 7 Duration = 18 Float = 6 Int16 = 3 Int32 = 4 Int64 = 5 Int8 = 2 Null = 0 Period = 17 String = 15 Time = 10 Timestamp = 12 Uuid = 13"
  },
  "api/Apache.Ignite.Sql.IColumnMetadata.html": {
    "href": "api/Apache.Ignite.Sql.IColumnMetadata.html",
    "title": "Interface IColumnMetadata | Apache Ignite.NET API Documentation",
    "keywords": "Interface IColumnMetadata Namespace Apache.Ignite.Sql Assembly Apache.Ignite.dll Column metadata. public interface IColumnMetadata Properties Name Gets the column name. string Name { get; } Property Value string Nullable Gets a value indicating whether the column is nullable. bool Nullable { get; } Property Value bool Origin Gets the column origin. For example, for \"select foo as bar\" query, column name will be \"bar\", but origin name will be \"foo\". IColumnOrigin? Origin { get; } Property Value IColumnOrigin Precision Gets the column precision, or -1 when not applicable to the current column type. int Precision { get; } Property Value int Number of decimal digits for exact numeric types; number of decimal digits in mantissa for approximate numeric types; number of decimal digits for fractional seconds of datetime types; length in characters for character types; length in bytes for binary types; length in bits for bit types; 1 for BOOLEAN; -1 if precision is not valid for the type. Scale Gets the column scale. Number of digits of scale. int Scale { get; } Property Value int Type Gets the column type. ColumnType Type { get; } Property Value ColumnType"
  },
  "api/Apache.Ignite.Sql.IColumnOrigin.html": {
    "href": "api/Apache.Ignite.Sql.IColumnOrigin.html",
    "title": "Interface IColumnOrigin | Apache Ignite.NET API Documentation",
    "keywords": "Interface IColumnOrigin Namespace Apache.Ignite.Sql Assembly Apache.Ignite.dll SQL column origin. public interface IColumnOrigin Properties ColumnName Gets the column name. string ColumnName { get; } Property Value string SchemaName Gets the schema name. string SchemaName { get; } Property Value string TableName Gets the table name. string TableName { get; } Property Value string"
  },
  "api/Apache.Ignite.Sql.IResultSet-1.html": {
    "href": "api/Apache.Ignite.Sql.IResultSet-1.html",
    "title": "Interface IResultSet<T> | Apache Ignite.NET API Documentation",
    "keywords": "Interface IResultSet<T> Namespace Apache.Ignite.Sql Assembly Apache.Ignite.dll Query result set. Implements IAsyncEnumerable<T>: use await foreach (var row in resultSet) to consume, or call ToListAsync() to get all rows as a list. Can not be enumerated more than once. The implementation is lazy and retrieves data pages on demand (while iterating with IAsyncEnumerable<T> or when ToListAsync() is called). Page size is defined in PageSize. public interface IResultSet<T> : IAsyncEnumerable<T>, IAsyncDisposable, IDisposable Type Parameters T Row type. Inherited Members IAsyncEnumerable<T>.GetAsyncEnumerator(CancellationToken) IAsyncDisposable.DisposeAsync() IDisposable.Dispose() Properties AffectedRows Gets the number of rows affected by the DML statement execution (such as \"INSERT\", \"UPDATE\", etc.), or 0 if the statement returns nothing (such as \"ALTER TABLE\", etc), or -1 if not applicable. long AffectedRows { get; } Property Value long HasRowSet Gets a value indicating whether this result set contains a collection of rows. bool HasRowSet { get; } Property Value bool Metadata Gets result set metadata when HasRowSet is true, otherwise null. IResultSetMetadata? Metadata { get; } Property Value IResultSetMetadata WasApplied Gets a value indicating whether a conditional query (such as \"CREATE TABLE IF NOT EXISTS\") was applied successfully. bool WasApplied { get; } Property Value bool Methods CollectAsync<TResult>(Func<int, TResult>, Action<TResult, T>) Collects all result set rows into a container of the specified type. ValueTask<TResult> CollectAsync<TResult>(Func<int, TResult> constructor, Action<TResult, T> accumulator) Parameters constructor Func<int, TResult> Container constructor, accepts estimated capacity. Actual result set size may exceed specified capacity. accumulator Action<TResult, T> Accumulator, adds rows to the container. Returns ValueTask<TResult> resulting container. Type Parameters TResult Resulting container type. ToDictionaryAsync<TK, TV>(Func<T, TK>, Func<T, TV>, IEqualityComparer<TK>?) Gets all result set rows as dictionary. Can not be called multiple times - the underlying server-side result set is closed as soon as the last page of data is retrieved, and client-side buffer is also released to reduce memory usage. ValueTask<Dictionary<TK, TV>> ToDictionaryAsync<TK, TV>(Func<T, TK> keySelector, Func<T, TV> valSelector, IEqualityComparer<TK>? comparer = null) where TK : notnull Parameters keySelector Func<T, TK> Key selector. valSelector Func<T, TV> Value selector. comparer IEqualityComparer<TK> Optional comparer. Returns ValueTask<Dictionary<TK, TV>> All result set rows as list. Type Parameters TK Dictionary key type. TV Dictionary value type. ToListAsync() Gets all result set rows as list. Can not be called multiple times - the underlying server-side result set is closed as soon as the last page of data is retrieved, and client-side buffer is also released to reduce memory usage. ValueTask<List<T>> ToListAsync() Returns ValueTask<List<T>> All result set rows as list."
  },
  "api/Apache.Ignite.Sql.IResultSetMetadata.html": {
    "href": "api/Apache.Ignite.Sql.IResultSetMetadata.html",
    "title": "Interface IResultSetMetadata | Apache Ignite.NET API Documentation",
    "keywords": "Interface IResultSetMetadata Namespace Apache.Ignite.Sql Assembly Apache.Ignite.dll SQL result set metadata. public interface IResultSetMetadata Properties Columns Gets the columns in the same order as they appear in the result set data. IReadOnlyList<IColumnMetadata> Columns { get; } Property Value IReadOnlyList<IColumnMetadata> Methods IndexOf(string) Gets the index of the specified column, or -1 when there is no column with the specified name. int IndexOf(string columnName) Parameters columnName string Column name. Returns int Column index."
  },
  "api/Apache.Ignite.Sql.ISql.html": {
    "href": "api/Apache.Ignite.Sql.ISql.html",
    "title": "Interface ISql | Apache Ignite.NET API Documentation",
    "keywords": "Interface ISql Namespace Apache.Ignite.Sql Assembly Apache.Ignite.dll Ignite SQL query facade. public interface ISql Methods ExecuteAsync(ITransaction?, SqlStatement, params object?[]?) Executes single SQL statement and returns rows as tuples (IIgniteTuple). Task<IResultSet<IIgniteTuple>> ExecuteAsync(ITransaction? transaction, SqlStatement statement, params object?[]? args) Parameters transaction ITransaction Optional transaction. statement SqlStatement Statement to execute. args object[] Arguments for the statement. Returns Task<IResultSet<IIgniteTuple>> SQL result set. ExecuteAsync<T>(ITransaction?, SqlStatement, params object?[]?) Executes single SQL statement and returns rows deserialized into the specified user type T. Task<IResultSet<T>> ExecuteAsync<T>(ITransaction? transaction, SqlStatement statement, params object?[]? args) Parameters transaction ITransaction Optional transaction. statement SqlStatement Statement to execute. args object[] Arguments for the statement. Returns Task<IResultSet<T>> SQL result set. Type Parameters T Row type. ExecuteReaderAsync(ITransaction?, SqlStatement, params object?[]?) Executes single SQL statement and returns a DbDataReader to consume them in an efficient, forward-only way. Task<IgniteDbDataReader> ExecuteReaderAsync(ITransaction? transaction, SqlStatement statement, params object?[]? args) Parameters transaction ITransaction Optional transaction. statement SqlStatement Statement to execute. args object[] Arguments for the statement. Returns Task<IgniteDbDataReader> Data reader. ExecuteScriptAsync(SqlStatement, params object?[]?) Executes a multi-statement SQL query. Task ExecuteScriptAsync(SqlStatement script, params object?[]? args) Parameters script SqlStatement Script. args object[] Arguments. Returns Task A Task representing the asynchronous operation."
  },
  "api/Apache.Ignite.Sql.IUpdateDescriptor-1.html": {
    "href": "api/Apache.Ignite.Sql.IUpdateDescriptor-1.html",
    "title": "Interface IUpdateDescriptor<T> | Apache Ignite.NET API Documentation",
    "keywords": "Interface IUpdateDescriptor<T> Namespace Apache.Ignite.Sql Assembly Apache.Ignite.dll Interface to provide update expressions for ExecuteUpdateAsync<T>(IQueryable<T>, Expression<Func<IUpdateDescriptor<T>, IUpdateDescriptor<T>>>). public interface IUpdateDescriptor<out T> Type Parameters T Query element type. Methods SetProperty<TProp>(Func<T, TProp>, Func<T, TProp>) Specifies member update with an expression. IUpdateDescriptor<out T> SetProperty<TProp>(Func<out T, TProp> selector, Func<out T, TProp> valueBuilder) Parameters selector Func<T, TProp> Member selector. valueBuilder Func<T, TProp> New value generator. Returns IUpdateDescriptor<T> Update descriptor for chaining. Type Parameters TProp Member type. SetProperty<TProp>(Func<T, TProp>, TProp) Specifies member update with a constant value. IUpdateDescriptor<out T> SetProperty<TProp>(Func<out T, TProp> selector, TProp value) Parameters selector Func<T, TProp> Member selector. value TProp New value. Returns IUpdateDescriptor<T> Update descriptor for chaining. Type Parameters TProp Member type."
  },
  "api/Apache.Ignite.Sql.IgniteDbColumn.html": {
    "href": "api/Apache.Ignite.Sql.IgniteDbColumn.html",
    "title": "Class IgniteDbColumn | Apache Ignite.NET API Documentation",
    "keywords": "Class IgniteDbColumn Namespace Apache.Ignite.Sql Assembly Apache.Ignite.dll Represents a column within Ignite result set. public sealed class IgniteDbColumn : DbColumn Inheritance object DbColumn IgniteDbColumn Inherited Members DbColumn.AllowDBNull DbColumn.BaseCatalogName DbColumn.BaseColumnName DbColumn.BaseSchemaName DbColumn.BaseServerName DbColumn.BaseTableName DbColumn.ColumnName DbColumn.ColumnOrdinal DbColumn.ColumnSize DbColumn.DataType DbColumn.DataTypeName DbColumn.IsAliased DbColumn.IsAutoIncrement DbColumn.IsExpression DbColumn.IsHidden DbColumn.IsIdentity DbColumn.IsKey DbColumn.IsLong DbColumn.IsReadOnly DbColumn.IsUnique DbColumn.this[string] DbColumn.NumericPrecision DbColumn.NumericScale DbColumn.UdtAssemblyQualifiedName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Properties ColumnMetadata Gets Ignite-specific column metadata. public IColumnMetadata ColumnMetadata { get; } Property Value IColumnMetadata Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Apache.Ignite.Sql.IgniteDbDataReader.html": {
    "href": "api/Apache.Ignite.Sql.IgniteDbDataReader.html",
    "title": "Class IgniteDbDataReader | Apache Ignite.NET API Documentation",
    "keywords": "Class IgniteDbDataReader Namespace Apache.Ignite.Sql Assembly Apache.Ignite.dll Reads a forward-only stream of rows from an Ignite result set. public sealed class IgniteDbDataReader : DbDataReader, IEnumerable, IDataReader, IDataRecord, IDisposable, IAsyncDisposable, IDbColumnSchemaGenerator Inheritance object MarshalByRefObject DbDataReader IgniteDbDataReader Implements IEnumerable IDataReader IDataRecord IDisposable IAsyncDisposable IDbColumnSchemaGenerator Inherited Members DbDataReader.GetFieldValueAsync<T>(int) DbDataReader.GetFieldValueAsync<T>(int, CancellationToken) DbDataReader.GetSchemaTableAsync(CancellationToken) DbDataReader.GetColumnSchemaAsync(CancellationToken) DbDataReader.GetStream(int) DbDataReader.GetTextReader(int) DbDataReader.IsDBNullAsync(int) DbDataReader.IsDBNullAsync(int, CancellationToken) DbDataReader.NextResultAsync() DbDataReader.NextResultAsync(CancellationToken) DbDataReader.ReadAsync() DbDataReader.VisibleFieldCount MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Properties Depth Gets a value indicating the depth of nesting for the current row. Always zero in Ignite. public override int Depth { get; } Property Value int The level of nesting. FieldCount When overridden in a derived class, gets the number of columns in the current row. public override int FieldCount { get; } Property Value int The number of columns in the current row. Exceptions NotSupportedException There is no current connection to an instance of SQL Server. HasRows When overridden in a derived class, gets a value that indicates whether this DbDataReader contains one or more rows. public override bool HasRows { get; } Property Value bool true if the DbDataReader contains one or more rows; otherwise, false. IsClosed When overridden in a derived class, gets a value indicating whether the DbDataReader is closed. public override bool IsClosed { get; } Property Value bool true if the DbDataReader is closed; otherwise, false. Exceptions InvalidOperationException The DbDataReader is closed. this[int] When overridden in a derived class, gets the value of the specified column as an instance of object. public override object this[int ordinal] { get; } Parameters ordinal int The zero-based column ordinal. Property Value object The value of the specified column. Exceptions IndexOutOfRangeException The column index is out of range. this[string] When overridden in a derived class, gets the value of the specified column as an instance of object. public override object this[string name] { get; } Parameters name string The name of the column. Property Value object The value of the specified column. Exceptions IndexOutOfRangeException No column with the specified name was found. Metadata Gets Ignite-specific result set metadata. public IResultSetMetadata Metadata { get; } Property Value IResultSetMetadata RecordsAffected When overridden in a derived class, gets the number of rows changed, inserted, or deleted by execution of the SQL statement. public override int RecordsAffected { get; } Property Value int The number of rows changed, inserted, or deleted. -1 for SELECT statements; 0 if no rows were affected or the statement failed. Methods Close() Closes the DbDataReader object. public override void Close() CloseAsync() Asynchronously closes the DbDataReader object. public override Task CloseAsync() Returns Task A task representing the asynchronous operation. Dispose(bool) Releases the unmanaged resources used by the DbDataReader and optionally releases the managed resources. protected override void Dispose(bool disposing) Parameters disposing bool true to release managed and unmanaged resources; false to release only unmanaged resources. DisposeAsync() Asynchronously releases all resources used by the current instance of the DbDataReader class. public override ValueTask DisposeAsync() Returns ValueTask A ValueTask representing the asynchronous operation. GetBoolean(int) When overridden in a derived class, gets the value of the specified column as a Boolean. public override bool GetBoolean(int ordinal) Parameters ordinal int The zero-based column ordinal. Returns bool The value of the specified column. Exceptions IndexOutOfRangeException The column index is out of range. InvalidCastException The specified cast is not valid. GetByte(int) When overridden in a derived class, gets the value of the specified column as a byte. public override byte GetByte(int ordinal) Parameters ordinal int The zero-based column ordinal. Returns byte The value of the specified column. Exceptions IndexOutOfRangeException The column index is out of range. InvalidCastException The specified cast is not valid. GetBytes(int, long, byte[]?, int, int) When overridden in a derived class, reads a specified number of bytes from the specified column starting at a specified index and writes them to a buffer starting at a specified position in the buffer. public override long GetBytes(int ordinal, long dataOffset, byte[]? buffer, int bufferOffset, int length) Parameters ordinal int The zero-based column ordinal. dataOffset long The index within the row from which to begin the read operation. buffer byte[] The buffer into which to copy the data. bufferOffset int The index with the buffer to which the data will be copied. length int The maximum number of bytes to read. Returns long The actual number of bytes read. Exceptions IndexOutOfRangeException The column index is out of range. InvalidCastException The specified cast is not valid. GetChar(int) When overridden in a derived class, gets the value of the specified column as a single character. public override char GetChar(int ordinal) Parameters ordinal int The zero-based column ordinal. Returns char The value of the specified column. Exceptions IndexOutOfRangeException The column index is out of range. InvalidCastException The specified cast is not valid. GetChars(int, long, char[]?, int, int) When overridden in a derived class, reads a specified number of characters from a specified column starting at a specified index, and writes them to a buffer starting at a specified position. public override long GetChars(int ordinal, long dataOffset, char[]? buffer, int bufferOffset, int length) Parameters ordinal int The zero-based column ordinal. dataOffset long The index within the row from which to begin the read operation. buffer char[] The buffer into which to copy the data. bufferOffset int The index with the buffer to which the data will be copied. length int The maximum number of characters to read. Returns long The actual number of characters read. GetColumnSchema() Gets the column schema (DbColumn collection). public ReadOnlyCollection<DbColumn> GetColumnSchema() Returns ReadOnlyCollection<DbColumn> The column schema (DbColumn collection). GetDataTypeName(int) When overridden in a derived class, gets name of the data type of the specified column. public override string GetDataTypeName(int ordinal) Parameters ordinal int The zero-based column ordinal. Returns string The name of the data type. Exceptions IndexOutOfRangeException The column index is out of range. GetDateTime(int) When overridden in a derived class, gets the value of the specified column as a DateTime object. public override DateTime GetDateTime(int ordinal) Parameters ordinal int The zero-based column ordinal. Returns DateTime The value of the specified column. Exceptions IndexOutOfRangeException The column index is out of range. InvalidCastException The specified cast is not valid. GetDecimal(int) When overridden in a derived class, gets the value of the specified column as a decimal. public override decimal GetDecimal(int ordinal) Parameters ordinal int The zero-based column ordinal. Returns decimal The value of the specified column. Exceptions IndexOutOfRangeException The column index is out of range. InvalidCastException The specified cast is not valid. GetDouble(int) When overridden in a derived class, gets the value of the specified column as a double-precision floating point number. public override double GetDouble(int ordinal) Parameters ordinal int The zero-based column ordinal. Returns double The value of the specified column. Exceptions InvalidCastException The specified cast is not valid. GetEnumerator() When overridden in a derived class, returns an enumerator that can be used to iterate through the rows in the data reader. public override IEnumerator GetEnumerator() Returns IEnumerator An enumerator that can be used to iterate through the rows in the data reader. GetFieldType(int) When overridden in a derived class, gets the data type of the specified column. public override Type GetFieldType(int ordinal) Parameters ordinal int The zero-based column ordinal. Returns Type The data type of the specified column. Exceptions IndexOutOfRangeException The column index is out of range. InvalidCastException The specified cast is not valid. GetFieldValue<T>(int) Gets the value of the specified column as the requested type. public override T GetFieldValue<T>(int ordinal) Parameters ordinal int The zero-based column ordinal. Returns T The value of the specified column. Type Parameters T The type of the value to be returned. Exceptions InvalidOperationException The connection was dropped or closed during data retrieval. -or- The data reader was closed during data retrieval. -or- There is no data ready to be read (for example, the first Read() hasn't been called, or it returned false). -or- The reader tried to read a previously-read column in sequential mode. -or- There was an asynchronous operation in progress. This applies to all Get* methods when running in sequential mode, as they could be called while reading a stream. IndexOutOfRangeException The column index is out of range. InvalidCastException The value returned by the database doesn't match or cannot be cast to T. GetFloat(int) When overridden in a derived class, gets the value of the specified column as a single-precision floating point number. public override float GetFloat(int ordinal) Parameters ordinal int The zero-based column ordinal. Returns float The value of the specified column. Exceptions IndexOutOfRangeException The column index is out of range. InvalidCastException The specified cast is not valid. GetGuid(int) When overridden in a derived class, gets the value of the specified column as a globally unique identifier (GUID). public override Guid GetGuid(int ordinal) Parameters ordinal int The zero-based column ordinal. Returns Guid The value of the specified column. Exceptions IndexOutOfRangeException The column index is out of range. InvalidCastException The specified cast is not valid. GetInt16(int) When overridden in a derived class, gets the value of the specified column as a 16-bit signed integer. public override short GetInt16(int ordinal) Parameters ordinal int The zero-based column ordinal. Returns short The value of the specified column. Exceptions IndexOutOfRangeException The column index is out of range. InvalidCastException The specified cast is not valid. GetInt32(int) When overridden in a derived class, gets the value of the specified column as a 32-bit signed integer. public override int GetInt32(int ordinal) Parameters ordinal int The zero-based column ordinal. Returns int The value of the specified column. Exceptions IndexOutOfRangeException The column index is out of range. InvalidCastException The specified cast is not valid. GetInt64(int) When overridden in a derived class, gets the value of the specified column as a 64-bit signed integer. public override long GetInt64(int ordinal) Parameters ordinal int The zero-based column ordinal. Returns long The value of the specified column. Exceptions IndexOutOfRangeException The column index is out of range. InvalidCastException The specified cast is not valid. GetName(int) When overridden in a derived class, gets the name of the column, given the zero-based column ordinal. public override string GetName(int ordinal) Parameters ordinal int The zero-based column ordinal. Returns string The name of the specified column. GetOrdinal(string) When overridden in a derived class, gets the column ordinal given the name of the column. public override int GetOrdinal(string name) Parameters name string The name of the column. Returns int The zero-based column ordinal. Exceptions IndexOutOfRangeException The name specified is not a valid column name. GetSchemaTable() Returns a DataTable that describes the column metadata of the DbDataReader. Returns null if the executed command returned no resultset, or after NextResult() returns false. public override DataTable GetSchemaTable() Returns DataTable A DataTable that describes the column metadata. Exceptions InvalidOperationException The DbDataReader is closed. IndexOutOfRangeException The column index is out of range. NotSupportedException .NET Core and .NET 5+ only: In all cases. GetString(int) When overridden in a derived class, gets the value of the specified column as an instance of string. public override string GetString(int ordinal) Parameters ordinal int The zero-based column ordinal. Returns string The value of the specified column. Exceptions IndexOutOfRangeException The column index is out of range. InvalidCastException The specified cast is not valid. GetValue(int) When overridden in a derived class, gets the value of the specified column as an instance of object. public override object GetValue(int ordinal) Parameters ordinal int The zero-based column ordinal. Returns object The value of the specified column. Exceptions IndexOutOfRangeException The column index is out of range. GetValues(object[]) When overridden in a derived class, populates an array of objects with the column values of the current row. public override int GetValues(object[] values) Parameters values object[] An array of object into which to copy the attribute columns. Returns int The number of instances of object in the array. IsDBNull(int) When overridden in a derived class, gets a value that indicates whether the column contains nonexistent or missing values. public override bool IsDBNull(int ordinal) Parameters ordinal int The zero-based column ordinal. Returns bool true if the specified column is equivalent to DBNull; otherwise, false. Exceptions IndexOutOfRangeException The column index is out of range. NextResult() When overridden in a derived class, advances the reader to the next result when reading the results of a batch of statements. public override bool NextResult() Returns bool true if there are more result sets; otherwise, false. Read() When overridden in a derived class, advances the reader to the next record in a result set. public override bool Read() Returns bool true if there are more rows; otherwise, false. ReadAsync(CancellationToken) Asynchronously advances the reader to the next record in a result set. public override Task<bool> ReadAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken The cancellation instruction. Returns Task<bool> A Task<TResult> whose Result property is true if there are more rows or false if there aren't. Exceptions DbException An error occurred while executing the command text. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Apache.Ignite.Sql.IgniteQueryableExtensions.html": {
    "href": "api/Apache.Ignite.Sql.IgniteQueryableExtensions.html",
    "title": "Class IgniteQueryableExtensions | Apache Ignite.NET API Documentation",
    "keywords": "Class IgniteQueryableExtensions Namespace Apache.Ignite.Sql Assembly Apache.Ignite.dll LINQ extensions for Apache Ignite SQL engine. Use AsQueryable(ITransaction?, QueryableOptions?) and AsQueryable(ITransaction?, QueryableOptions?) to query Ignite with LINQ, then materialize the query results by calling ToResultSetAsync<T>(IQueryable<T>). public static class IgniteQueryableExtensions Inheritance object IgniteQueryableExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AllAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, bool>>) Determines whether all elements of a sequence satisfy a condition. public static Task<bool> AllAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, bool>> predicate) Parameters queryable IQueryable<TSource> Query. predicate Expression<Func<TSource, bool>> Predicate. Returns Task<bool> A Task representing the asynchronous operation. The task result contains true if the source sequence contains any elements; otherwise, false. Type Parameters TSource Element type. AnyAsync<TSource>(IQueryable<TSource>) Determines whether a sequence contains any elements. public static Task<bool> AnyAsync<TSource>(this IQueryable<TSource> queryable) Parameters queryable IQueryable<TSource> Query. Returns Task<bool> A Task representing the asynchronous operation. The task result contains true if the source sequence contains any elements; otherwise, false. Type Parameters TSource Element type. AnyAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, bool>>) Determines whether any element of a sequence satisfies a condition. public static Task<bool> AnyAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, bool>> predicate) Parameters queryable IQueryable<TSource> Query. predicate Expression<Func<TSource, bool>> Predicate. Returns Task<bool> A Task representing the asynchronous operation. The task result contains true if the source sequence contains any elements matching the specified predicate; otherwise, false. Type Parameters TSource Element type. AsAsyncEnumerable<T>(IQueryable<T>) Executes the Ignite query represented by the provided queryable and returns the resulting IResultSet<T> as IAsyncEnumerable<T>. public static IAsyncEnumerable<T> AsAsyncEnumerable<T>(this IQueryable<T> queryable) Parameters queryable IQueryable<T> Queryable. Returns IAsyncEnumerable<T> Result set. Type Parameters T Result type. AverageAsync(IQueryable<decimal>) Returns the average of a sequence of values. public static Task<decimal> AverageAsync(this IQueryable<decimal> queryable) Parameters queryable IQueryable<decimal> Query. Returns Task<decimal> A Task representing the asynchronous operation. The task result contains the average of a sequence of values. AverageAsync(IQueryable<double>) Returns the average of a sequence of values. public static Task<double> AverageAsync(this IQueryable<double> queryable) Parameters queryable IQueryable<double> Query. Returns Task<double> A Task representing the asynchronous operation. The task result contains the average of a sequence of values. AverageAsync(IQueryable<int>) Returns the average of a sequence of values. public static Task<double> AverageAsync(this IQueryable<int> queryable) Parameters queryable IQueryable<int> Query. Returns Task<double> A Task representing the asynchronous operation. The task result contains the average of a sequence of values. AverageAsync(IQueryable<long>) Returns the average of a sequence of values. public static Task<double> AverageAsync(this IQueryable<long> queryable) Parameters queryable IQueryable<long> Query. Returns Task<double> A Task representing the asynchronous operation. The task result contains the average of a sequence of values. AverageAsync(IQueryable<decimal?>) Returns the average of a sequence of values. public static Task<decimal?> AverageAsync(this IQueryable<decimal?> queryable) Parameters queryable IQueryable<decimal?> Query. Returns Task<decimal?> A Task representing the asynchronous operation. The task result contains the average of a sequence of values. AverageAsync(IQueryable<double?>) Returns the average of a sequence of values. public static Task<double?> AverageAsync(this IQueryable<double?> queryable) Parameters queryable IQueryable<double?> Query. Returns Task<double?> A Task representing the asynchronous operation. The task result contains the average of a sequence of values. AverageAsync(IQueryable<int?>) Returns the average of a sequence of values. public static Task<double?> AverageAsync(this IQueryable<int?> queryable) Parameters queryable IQueryable<int?> Query. Returns Task<double?> A Task representing the asynchronous operation. The task result contains the average of a sequence of values. AverageAsync(IQueryable<long?>) Returns the average of a sequence of values. public static Task<double?> AverageAsync(this IQueryable<long?> queryable) Parameters queryable IQueryable<long?> Query. Returns Task<double?> A Task representing the asynchronous operation. The task result contains the average of a sequence of values. AverageAsync(IQueryable<float?>) Returns the average of a sequence of values. public static Task<float?> AverageAsync(this IQueryable<float?> queryable) Parameters queryable IQueryable<float?> Query. Returns Task<float?> A Task representing the asynchronous operation. The task result contains the average of a sequence of values. AverageAsync(IQueryable<float>) Returns the average of a sequence of values. public static Task<float> AverageAsync(this IQueryable<float> queryable) Parameters queryable IQueryable<float> Query. Returns Task<float> A Task representing the asynchronous operation. The task result contains the average of a sequence of values. AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, decimal>>) Returns the average of a sequence of values. public static Task<decimal> AverageAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, decimal>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, decimal>> A projection function to apply to each element. Returns Task<decimal> A Task representing the asynchronous operation. The task result contains the average of a sequence of values. Type Parameters TSource Element type. AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, double>>) Returns the average of a sequence of values. public static Task<double> AverageAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, double>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, double>> A projection function to apply to each element. Returns Task<double> A Task representing the asynchronous operation. The task result contains the average of a sequence of values. Type Parameters TSource Element type. AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, int>>) Returns the average of a sequence of values. public static Task<double> AverageAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, int>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, int>> A projection function to apply to each element. Returns Task<double> A Task representing the asynchronous operation. The task result contains the average of a sequence of values. Type Parameters TSource Element type. AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, long>>) Returns the average of a sequence of values. public static Task<double> AverageAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, long>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, long>> A projection function to apply to each element. Returns Task<double> A Task representing the asynchronous operation. The task result contains the average of a sequence of values. Type Parameters TSource Element type. AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, decimal?>>) Returns the average of a sequence of values. public static Task<decimal?> AverageAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, decimal?>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, decimal?>> A projection function to apply to each element. Returns Task<decimal?> A Task representing the asynchronous operation. The task result contains the average of a sequence of values. Type Parameters TSource Element type. AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, double?>>) Returns the average of a sequence of values. public static Task<double?> AverageAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, double?>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, double?>> A projection function to apply to each element. Returns Task<double?> A Task representing the asynchronous operation. The task result contains the average of a sequence of values. Type Parameters TSource Element type. AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, int?>>) Returns the average of a sequence of values. public static Task<double?> AverageAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, int?>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, int?>> A projection function to apply to each element. Returns Task<double?> A Task representing the asynchronous operation. The task result contains the average of a sequence of values. Type Parameters TSource Element type. AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, long?>>) Returns the average of a sequence of values. public static Task<double?> AverageAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, long?>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, long?>> A projection function to apply to each element. Returns Task<double?> A Task representing the asynchronous operation. The task result contains the average of a sequence of values. Type Parameters TSource Element type. AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, float?>>) Returns the average of a sequence of values. public static Task<float?> AverageAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, float?>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, float?>> A projection function to apply to each element. Returns Task<float?> A Task representing the asynchronous operation. The task result contains the average of a sequence of values. Type Parameters TSource Element type. AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, float>>) Returns the average of a sequence of values. public static Task<float> AverageAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, float>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, float>> A projection function to apply to each element. Returns Task<float> A Task representing the asynchronous operation. The task result contains the average of a sequence of values. Type Parameters TSource Element type. CountAsync<TSource>(IQueryable<TSource>) Returns the number of elements in a sequence. public static Task<int> CountAsync<TSource>(this IQueryable<TSource> queryable) Parameters queryable IQueryable<TSource> Query. Returns Task<int> A Task representing the asynchronous operation. The task result contains the number of elements in the input sequence. Type Parameters TSource Element type. CountAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, bool>>) Returns the number of elements in a sequence. public static Task<int> CountAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, bool>> predicate) Parameters queryable IQueryable<TSource> Query. predicate Expression<Func<TSource, bool>> Predicate. Returns Task<int> A Task representing the asynchronous operation. The task result contains the number of elements in the input sequence. Type Parameters TSource Element type. ExecuteDeleteAsync<T>(IQueryable<T>) Removes all rows that are matched by the specified query. This method results in \"DELETE FROM\" distributed SQL query, performing bulk delete (as opposed to fetching all rows locally before deleting them). public static Task<long> ExecuteDeleteAsync<T>(this IQueryable<T> query) Parameters query IQueryable<T> Query. Returns Task<long> Affected row count. Type Parameters T Element type. ExecuteDeleteAsync<T>(IQueryable<T>, Expression<Func<T, bool>>) Removes all rows that are matched by the specified query. This method results in \"DELETE FROM .. WHERE ..\" distributed SQL query, performing bulk delete (as opposed to fetching all rows locally before deleting them). public static Task<long> ExecuteDeleteAsync<T>(this IQueryable<T> query, Expression<Func<T, bool>> predicate) Parameters query IQueryable<T> Query. predicate Expression<Func<T, bool>> Predicate. Returns Task<long> Affected row count. Type Parameters T Element type. ExecuteUpdateAsync<T>(IQueryable<T>, Expression<Func<IUpdateDescriptor<T>, IUpdateDescriptor<T>>>) Updates all rows that are matched by the specified query. This method results in \"UPDATE .. WHERE ..\" distributed SQL query, performing bulk update (as opposed to fetching all rows locally before updating them). public static Task<long> ExecuteUpdateAsync<T>(this IQueryable<T> query, Expression<Func<IUpdateDescriptor<T>, IUpdateDescriptor<T>>> updateDescriptor) Parameters query IQueryable<T> Query. updateDescriptor Expression<Func<IUpdateDescriptor<T>, IUpdateDescriptor<T>>> Update descriptor. Returns Task<long> Affected row count. Type Parameters T Element type. FirstAsync<TSource>(IQueryable<TSource>) Returns the first element of a sequence. public static Task<TSource> FirstAsync<TSource>(this IQueryable<TSource> queryable) Parameters queryable IQueryable<TSource> Query. Returns Task<TSource> A Task representing the asynchronous operation. The task result contains the first element in the input sequence. Type Parameters TSource Element type. FirstAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, bool>>) Returns the first element of a sequence. public static Task<TSource> FirstAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, bool>> predicate) Parameters queryable IQueryable<TSource> Query. predicate Expression<Func<TSource, bool>> Predicate. Returns Task<TSource> A Task representing the asynchronous operation. The task result contains the first element in the input sequence. Type Parameters TSource Element type. FirstOrDefaultAsync<TSource>(IQueryable<TSource>) Returns the first element of a sequence, or a default value if the sequence contains no elements. public static Task<TSource?> FirstOrDefaultAsync<TSource>(this IQueryable<TSource> queryable) Parameters queryable IQueryable<TSource> Query. Returns Task<TSource> A Task representing the asynchronous operation. The task result contains default ( TSource ) if queryable is empty; otherwise, the first element in queryable. Type Parameters TSource Element type. FirstOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, bool>>) Returns the first element of a sequence, or a default value if the sequence contains no elements. public static Task<TSource?> FirstOrDefaultAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, bool>> predicate) Parameters queryable IQueryable<TSource> Query. predicate Expression<Func<TSource, bool>> Predicate. Returns Task<TSource> A Task representing the asynchronous operation. The task result contains default ( TSource ) if queryable is empty; otherwise, the first element in queryable. Type Parameters TSource Element type. LongCountAsync<TSource>(IQueryable<TSource>) Returns a long that represents the total number of elements in a sequence. public static Task<long> LongCountAsync<TSource>(this IQueryable<TSource> queryable) Parameters queryable IQueryable<TSource> Query. Returns Task<long> A Task representing the asynchronous operation. The task result contains the number of elements in the input sequence. Type Parameters TSource Element type. LongCountAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, bool>>) Returns a long that represents the total number of elements in a sequence. public static Task<long> LongCountAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, bool>> predicate) Parameters queryable IQueryable<TSource> Query. predicate Expression<Func<TSource, bool>> Predicate. Returns Task<long> A Task representing the asynchronous operation. The task result contains the number of elements in the input sequence. Type Parameters TSource Element type. MaxAsync<TSource>(IQueryable<TSource>) Returns the maximum value of a sequence. public static Task<TSource> MaxAsync<TSource>(this IQueryable<TSource> queryable) Parameters queryable IQueryable<TSource> Query. Returns Task<TSource> A Task representing the asynchronous operation. The task result contains the maximum value in the sequence. Type Parameters TSource Element type. MaxAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>) Returns the maximum value of a sequence. public static Task<TResult> MaxAsync<TSource, TResult>(this IQueryable<TSource> queryable, Expression<Func<TSource, TResult>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, TResult>> A projection function to apply to each element. Returns Task<TResult> A Task representing the asynchronous operation. The task result contains the maximum value in the sequence. Type Parameters TSource Element type. TResult The type of the value returned by the function represented by selector. MinAsync<TSource>(IQueryable<TSource>) Returns the minimum value of a sequence. public static Task<TSource> MinAsync<TSource>(this IQueryable<TSource> queryable) Parameters queryable IQueryable<TSource> Query. Returns Task<TSource> A Task representing the asynchronous operation. The task result contains the minimum value in the sequence. Type Parameters TSource Element type. MinAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>) Returns the minimum value of a sequence. public static Task<TResult> MinAsync<TSource, TResult>(this IQueryable<TSource> queryable, Expression<Func<TSource, TResult>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, TResult>> A projection function to apply to each element. Returns Task<TResult> A Task representing the asynchronous operation. The task result contains the minimum value in the sequence. Type Parameters TSource Element type. TResult The type of the value returned by the function represented by selector. SingleAsync<TSource>(IQueryable<TSource>) Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence. public static Task<TSource> SingleAsync<TSource>(this IQueryable<TSource> queryable) Parameters queryable IQueryable<TSource> Query. Returns Task<TSource> A Task representing the asynchronous operation. The task result contains the single element of the input sequence. Type Parameters TSource Element type. SingleAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, bool>>) Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence. public static Task<TSource> SingleAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, bool>> predicate) Parameters queryable IQueryable<TSource> Query. predicate Expression<Func<TSource, bool>> Predicate. Returns Task<TSource> A Task representing the asynchronous operation. The task result contains the single element of the input sequence. Type Parameters TSource Element type. SingleOrDefaultAsync<TSource>(IQueryable<TSource>) Returns the only element of a sequence, or a default value if the sequence is empty; throws an exception if there is more than one element in the sequence. public static Task<TSource?> SingleOrDefaultAsync<TSource>(this IQueryable<TSource> queryable) Parameters queryable IQueryable<TSource> Query. Returns Task<TSource> A Task representing the asynchronous operation. The task result contains the single element of the input sequence, or default (TSource) if the sequence contains no elements. Type Parameters TSource Element type. SingleOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, bool>>) Returns the only element of a sequence, or a default value if the sequence is empty; throws an exception if there is more than one element in the sequence. public static Task<TSource?> SingleOrDefaultAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, bool>> predicate) Parameters queryable IQueryable<TSource> Query. predicate Expression<Func<TSource, bool>> Predicate. Returns Task<TSource> A Task representing the asynchronous operation. The task result contains the single element of the input sequence, or default (TSource) if the sequence contains no elements. Type Parameters TSource Element type. SumAsync(IQueryable<decimal>) Returns the sum of a sequence of values. public static Task<decimal> SumAsync(this IQueryable<decimal> queryable) Parameters queryable IQueryable<decimal> Query. Returns Task<decimal> A Task representing the asynchronous operation. The task result contains the sum of a sequence of values. SumAsync(IQueryable<double>) Returns the sum of a sequence of values. public static Task<double> SumAsync(this IQueryable<double> queryable) Parameters queryable IQueryable<double> Query. Returns Task<double> A Task representing the asynchronous operation. The task result contains the sum of a sequence of values. SumAsync(IQueryable<int>) Returns the sum of a sequence of values. public static Task<int> SumAsync(this IQueryable<int> queryable) Parameters queryable IQueryable<int> Query. Returns Task<int> A Task representing the asynchronous operation. The task result contains the sum of a sequence of values. SumAsync(IQueryable<long>) Returns the sum of a sequence of values. public static Task<long> SumAsync(this IQueryable<long> queryable) Parameters queryable IQueryable<long> Query. Returns Task<long> A Task representing the asynchronous operation. The task result contains the sum of a sequence of values. SumAsync(IQueryable<decimal?>) Returns the sum of a sequence of values. public static Task<decimal?> SumAsync(this IQueryable<decimal?> queryable) Parameters queryable IQueryable<decimal?> Query. Returns Task<decimal?> A Task representing the asynchronous operation. The task result contains the sum of a sequence of values. SumAsync(IQueryable<double?>) Returns the sum of a sequence of values. public static Task<double?> SumAsync(this IQueryable<double?> queryable) Parameters queryable IQueryable<double?> Query. Returns Task<double?> A Task representing the asynchronous operation. The task result contains the sum of a sequence of values. SumAsync(IQueryable<int?>) Returns the sum of a sequence of values. public static Task<int?> SumAsync(this IQueryable<int?> queryable) Parameters queryable IQueryable<int?> Query. Returns Task<int?> A Task representing the asynchronous operation. The task result contains the sum of a sequence of values. SumAsync(IQueryable<long?>) Returns the sum of a sequence of values. public static Task<long?> SumAsync(this IQueryable<long?> queryable) Parameters queryable IQueryable<long?> Query. Returns Task<long?> A Task representing the asynchronous operation. The task result contains the sum of a sequence of values. SumAsync(IQueryable<float?>) Returns the sum of a sequence of values. public static Task<float?> SumAsync(this IQueryable<float?> queryable) Parameters queryable IQueryable<float?> Query. Returns Task<float?> A Task representing the asynchronous operation. The task result contains the sum of a sequence of values. SumAsync(IQueryable<float>) Returns the sum of a sequence of values. public static Task<float> SumAsync(this IQueryable<float> queryable) Parameters queryable IQueryable<float> Query. Returns Task<float> A Task representing the asynchronous operation. The task result contains the sum of a sequence of values. SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, decimal>>) Returns the sum of a sequence of values. public static Task<decimal> SumAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, decimal>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, decimal>> A projection function to apply to each element. Returns Task<decimal> A Task representing the asynchronous operation. The task result contains the sum of a sequence of values. Type Parameters TSource Element type. SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, double>>) Returns the sum of a sequence of values. public static Task<double> SumAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, double>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, double>> A projection function to apply to each element. Returns Task<double> A Task representing the asynchronous operation. The task result contains the sum of a sequence of values. Type Parameters TSource Element type. SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, int>>) Returns the sum of a sequence of values. public static Task<int> SumAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, int>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, int>> A projection function to apply to each element. Returns Task<int> A Task representing the asynchronous operation. The task result contains the sum of a sequence of values. Type Parameters TSource Element type. SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, long>>) Returns the sum of a sequence of values. public static Task<long> SumAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, long>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, long>> A projection function to apply to each element. Returns Task<long> A Task representing the asynchronous operation. The task result contains the sum of a sequence of values. Type Parameters TSource Element type. SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, decimal?>>) Returns the sum of a sequence of values. public static Task<decimal?> SumAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, decimal?>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, decimal?>> A projection function to apply to each element. Returns Task<decimal?> A Task representing the asynchronous operation. The task result contains the sum of a sequence of values. Type Parameters TSource Element type. SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, double?>>) Returns the sum of a sequence of values. public static Task<double?> SumAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, double?>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, double?>> A projection function to apply to each element. Returns Task<double?> A Task representing the asynchronous operation. The task result contains the sum of a sequence of values. Type Parameters TSource Element type. SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, int?>>) Returns the sum of a sequence of values. public static Task<int?> SumAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, int?>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, int?>> A projection function to apply to each element. Returns Task<int?> A Task representing the asynchronous operation. The task result contains the sum of a sequence of values. Type Parameters TSource Element type. SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, long?>>) Returns the sum of a sequence of values. public static Task<long?> SumAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, long?>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, long?>> A projection function to apply to each element. Returns Task<long?> A Task representing the asynchronous operation. The task result contains the sum of a sequence of values. Type Parameters TSource Element type. SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, float?>>) Returns the sum of a sequence of values. public static Task<float?> SumAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, float?>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, float?>> A projection function to apply to each element. Returns Task<float?> A Task representing the asynchronous operation. The task result contains the sum of a sequence of values. Type Parameters TSource Element type. SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, float>>) Returns the sum of a sequence of values. public static Task<float> SumAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, float>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, float>> A projection function to apply to each element. Returns Task<float> A Task representing the asynchronous operation. The task result contains the sum of a sequence of values. Type Parameters TSource Element type. ToDictionaryAsync<TSource, TK, TV>(IQueryable<TSource>, Func<TSource, TK>, Func<TSource, TV>, IEqualityComparer<TK>?) Creates a Dictionary<TKey, TValue> from an IQueryable<T> by enumerating it asynchronously. public static Task<Dictionary<TK, TV>> ToDictionaryAsync<TSource, TK, TV>(this IQueryable<TSource> queryable, Func<TSource, TK> keySelector, Func<TSource, TV> valSelector, IEqualityComparer<TK>? comparer = null) where TK : notnull Parameters queryable IQueryable<TSource> Query. keySelector Func<TSource, TK> Key selector. valSelector Func<TSource, TV> Value selector. comparer IEqualityComparer<TK> Optional comparer. Returns Task<Dictionary<TK, TV>> A Task representing the asynchronous operation. The task result contains a Dictionary<TKey, TValue> that contains elements from the input sequence. Type Parameters TSource Element type. TK Dictionary key type. TV Dictionary value type. ToListAsync<TSource>(IQueryable<TSource>) Creates a List<T> from an IQueryable<T> by enumerating it asynchronously. public static Task<List<TSource>> ToListAsync<TSource>(this IQueryable<TSource> queryable) Parameters queryable IQueryable<TSource> Query. Returns Task<List<TSource>> A Task representing the asynchronous operation. The task result contains a List<T> that contains elements from the input sequence. Type Parameters TSource Element type. ToQueryString(IQueryable) Generates SQL representation of the specified query. public static string ToQueryString(this IQueryable queryable) Parameters queryable IQueryable Query. Returns string SQL string. ToResultSetAsync<T>(IQueryable<T>) Executes the Ignite query represented by the provided queryable and returns the resulting IResultSet<T>. public static Task<IResultSet<T>> ToResultSetAsync<T>(this IQueryable<T> queryable) Parameters queryable IQueryable<T> Queryable. Returns Task<IResultSet<T>> Result set. Type Parameters T Result type."
  },
  "api/Apache.Ignite.Sql.NoRowSetExpectedException.html": {
    "href": "api/Apache.Ignite.Sql.NoRowSetExpectedException.html",
    "title": "Class NoRowSetExpectedException | Apache Ignite.NET API Documentation",
    "keywords": "Class NoRowSetExpectedException Namespace Apache.Ignite.Sql Assembly Apache.Ignite.dll Exception is thrown when a query doesn't intend to return any rows (e.g. a DML or a DDL query). [Serializable] public sealed class NoRowSetExpectedException : IgniteException, ISerializable Inheritance object Exception IgniteException NoRowSetExpectedException Implements ISerializable Inherited Members IgniteException.ErrorPrefix IgniteException.GroupName IgniteException.Code IgniteException.TraceId IgniteException.ErrorCode IgniteException.GroupCode IgniteException.CodeAsString Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors NoRowSetExpectedException(Guid, int, string?, Exception?) Initializes a new instance of the NoRowSetExpectedException class. public NoRowSetExpectedException(Guid traceId, int code, string? message, Exception? innerException = null) Parameters traceId Guid Trace id. code int Code. message string Message. innerException Exception Inner exception."
  },
  "api/Apache.Ignite.Sql.QueryableOptions.html": {
    "href": "api/Apache.Ignite.Sql.QueryableOptions.html",
    "title": "Class QueryableOptions | Apache Ignite.NET API Documentation",
    "keywords": "Class QueryableOptions Namespace Apache.Ignite.Sql Assembly Apache.Ignite.dll Options for LINQ queryables. public sealed record QueryableOptions : IEquatable<QueryableOptions> Inheritance object QueryableOptions Implements IEquatable<QueryableOptions> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors QueryableOptions(TimeSpan, int) Options for LINQ queryables. public QueryableOptions(TimeSpan Timeout = default, int PageSize = 1024) Parameters Timeout TimeSpan Timeout, default DefaultTimeout. PageSize int Page size to use when fetching results from server, default DefaultPageSize. Properties PageSize Page size to use when fetching results from server, default DefaultPageSize. public int PageSize { get; init; } Property Value int Timeout Timeout, default DefaultTimeout. public TimeSpan Timeout { get; init; } Property Value TimeSpan"
  },
  "api/Apache.Ignite.Sql.SqlBatchException.html": {
    "href": "api/Apache.Ignite.Sql.SqlBatchException.html",
    "title": "Class SqlBatchException | Apache Ignite.NET API Documentation",
    "keywords": "Class SqlBatchException Namespace Apache.Ignite.Sql Assembly Apache.Ignite.dll Subclass of {@link SqlException} is thrown when an error occurs during a batch update operation. In addition to the information provided by {@link SqlException}, SqlBatchException provides the update counts for all commands that were executed successfully during the batch update, that is, all commands that were executed before the error occurred. The order of elements in the array of update counts corresponds to the order in which these commands were added to the batch. * [Serializable] public sealed class SqlBatchException : IgniteException, ISerializable Inheritance object Exception IgniteException SqlBatchException Implements ISerializable Inherited Members IgniteException.ErrorPrefix IgniteException.GroupName IgniteException.Code IgniteException.TraceId IgniteException.ErrorCode IgniteException.GroupCode IgniteException.CodeAsString Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors SqlBatchException(Guid, int, string?, Exception?) Initializes a new instance of the SqlBatchException class. public SqlBatchException(Guid traceId, int code, string? message, Exception? innerException = null) Parameters traceId Guid Trace id. code int Code. message string Message. innerException Exception Inner exception."
  },
  "api/Apache.Ignite.Sql.SqlException.html": {
    "href": "api/Apache.Ignite.Sql.SqlException.html",
    "title": "Class SqlException | Apache Ignite.NET API Documentation",
    "keywords": "Class SqlException Namespace Apache.Ignite.Sql Assembly Apache.Ignite.dll SQL exception base class. [Serializable] public sealed class SqlException : IgniteException, ISerializable Inheritance object Exception IgniteException SqlException Implements ISerializable Inherited Members IgniteException.ErrorPrefix IgniteException.GroupName IgniteException.Code IgniteException.TraceId IgniteException.ErrorCode IgniteException.GroupCode IgniteException.CodeAsString Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors SqlException(Guid, int, string?, Exception?) Initializes a new instance of the SqlException class. public SqlException(Guid traceId, int code, string? message, Exception? innerException = null) Parameters traceId Guid Trace id. code int Code. message string Message. innerException Exception Inner exception."
  },
  "api/Apache.Ignite.Sql.SqlStatement.html": {
    "href": "api/Apache.Ignite.Sql.SqlStatement.html",
    "title": "Class SqlStatement | Apache Ignite.NET API Documentation",
    "keywords": "Class SqlStatement Namespace Apache.Ignite.Sql Assembly Apache.Ignite.dll SQL statement. public sealed record SqlStatement : IEquatable<SqlStatement> Inheritance object SqlStatement Implements IEquatable<SqlStatement> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Constructors SqlStatement(string, TimeSpan?, string?, int?, IReadOnlyDictionary<string, object?>?, string?) Initializes a new instance of the SqlStatement class. public SqlStatement(string query, TimeSpan? timeout = null, string? schema = null, int? pageSize = null, IReadOnlyDictionary<string, object?>? properties = null, string? timeZoneId = null) Parameters query string Query text. timeout TimeSpan? Timeout. schema string Schema. pageSize int? Page size. properties IReadOnlyDictionary<string, object> Properties. timeZoneId string Time zone id in TZDB format. Examples: \"America/New_York\", \"UTC+3\". Affects time-related SQL functions (e.g. CURRENT_TIME) and string literal conversions (e.g. TIMESTAMP WITH LOCAL TIME ZONE '1992-01-18 02:30:00.123'). Defaults to system time zone: Tzdb.GetSystemDefault().Id. Can be obtained using NodaTime with Id from Tzdb provider. Note that Id from the standard library is OS-dependent and is not compatible with TZDB on Windows. For more information, see https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/time/ZoneId.html#of(java.lang.String). Fields DefaultPageSize Default number of rows per data page. public const int DefaultPageSize = 1024 Field Value int DefaultSchema Default SQL schema name. public const string DefaultSchema = \"PUBLIC\" Field Value string DefaultTimeout Default query timeout (zero means no timeout). public static readonly TimeSpan DefaultTimeout Field Value TimeSpan Properties PageSize Gets the number of rows per data page. public int PageSize { get; init; } Property Value int Properties Gets the property bag. public IReadOnlyDictionary<string, object?> Properties { get; init; } Property Value IReadOnlyDictionary<string, object> Query Gets the query text. public string Query { get; init; } Property Value string Schema Gets the SQL schema name. public string Schema { get; init; } Property Value string TimeZoneId Gets the time zone id in TZDB format. Examples: \"America/New_York\", \"UTC+3\". Affects time-related SQL functions (e.g. CURRENT_TIME) and string literal conversions (e.g. TIMESTAMP WITH LOCAL TIME ZONE '1992-01-18 02:30:00.123'). Defaults to system time zone: Tzdb.GetSystemDefault().Id. Can be obtained using NodaTime with Id from Tzdb provider. Note that Id from the standard library is OS-dependent and is not compatible with TZDB on Windows. For more information, see https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/time/ZoneId.html#of(java.lang.String). public string TimeZoneId { get; init; } Property Value string Timeout Gets the query timeout (zero means no timeout). public TimeSpan Timeout { get; init; } Property Value TimeSpan Methods ToSqlStatement(string) Converts a query string to an instance of SqlStatement. public static SqlStatement ToSqlStatement(string query) Parameters query string Query string. Returns SqlStatement Statement. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Operators implicit operator SqlStatement(string) Converts a query string to an instance of SqlStatement. public static implicit operator SqlStatement(string query) Parameters query string Query string. Returns SqlStatement Statement."
  },
  "api/Apache.Ignite.Sql.html": {
    "href": "api/Apache.Ignite.Sql.html",
    "title": "Namespace Apache.Ignite.Sql | Apache Ignite.NET API Documentation",
    "keywords": "Namespace Apache.Ignite.Sql Classes IgniteDbColumn Represents a column within Ignite result set. IgniteDbDataReader Reads a forward-only stream of rows from an Ignite result set. IgniteQueryableExtensions LINQ extensions for Apache Ignite SQL engine. Use AsQueryable(ITransaction?, QueryableOptions?) and AsQueryable(ITransaction?, QueryableOptions?) to query Ignite with LINQ, then materialize the query results by calling ToResultSetAsync<T>(IQueryable<T>). NoRowSetExpectedException Exception is thrown when a query doesn't intend to return any rows (e.g. a DML or a DDL query). QueryableOptions Options for LINQ queryables. SqlBatchException Subclass of {@link SqlException} is thrown when an error occurs during a batch update operation. In addition to the information provided by {@link SqlException}, SqlBatchException provides the update counts for all commands that were executed successfully during the batch update, that is, all commands that were executed before the error occurred. The order of elements in the array of update counts corresponds to the order in which these commands were added to the batch. * SqlException SQL exception base class. SqlStatement SQL statement. Interfaces IColumnMetadata Column metadata. IColumnOrigin SQL column origin. IResultSetMetadata SQL result set metadata. IResultSet<T> Query result set. Implements IAsyncEnumerable<T>: use await foreach (var row in resultSet) to consume, or call ToListAsync() to get all rows as a list. Can not be enumerated more than once. The implementation is lazy and retrieves data pages on demand (while iterating with IAsyncEnumerable<T> or when ToListAsync() is called). Page size is defined in PageSize. ISql Ignite SQL query facade. IUpdateDescriptor<T> Interface to provide update expressions for ExecuteUpdateAsync<T>(IQueryable<T>, Expression<Func<IUpdateDescriptor<T>, IUpdateDescriptor<T>>>). Enums ColumnType SQL column type."
  },
  "api/Apache.Ignite.SslStreamFactory.html": {
    "href": "api/Apache.Ignite.SslStreamFactory.html",
    "title": "Class SslStreamFactory | Apache Ignite.NET API Documentation",
    "keywords": "Class SslStreamFactory Namespace Apache.Ignite Assembly Apache.Ignite.dll Standard SSL stream factory. Can be used with or without client-side certificates. public sealed class SslStreamFactory : ISslStreamFactory Inheritance object SslStreamFactory Implements ISslStreamFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Properties SslClientAuthenticationOptions Gets or sets client authentication options. public SslClientAuthenticationOptions? SslClientAuthenticationOptions { get; set; } Property Value SslClientAuthenticationOptions Methods CreateAsync(Stream, string, CancellationToken) Creates the SSL stream. public Task<SslStream?> CreateAsync(Stream stream, string targetHost, CancellationToken cancellationToken) Parameters stream Stream The underlying raw stream. targetHost string Target host. cancellationToken CancellationToken Cancellation token. Returns Task<SslStream> SSL stream, or null if SSL is not enabled. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Apache.Ignite.Table.Criteria.CriteriaException.html": {
    "href": "api/Apache.Ignite.Table.Criteria.CriteriaException.html",
    "title": "Class CriteriaException | Apache Ignite.NET API Documentation",
    "keywords": "Class CriteriaException Namespace Apache.Ignite.Table.Criteria Assembly Apache.Ignite.dll Criteria exception base class. [Serializable] public sealed class CriteriaException : IgniteException, ISerializable Inheritance object Exception IgniteException CriteriaException Implements ISerializable Inherited Members IgniteException.ErrorPrefix IgniteException.GroupName IgniteException.Code IgniteException.TraceId IgniteException.ErrorCode IgniteException.GroupCode IgniteException.CodeAsString Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors CriteriaException(Guid, int, string?, Exception?) Initializes a new instance of the CriteriaException class. public CriteriaException(Guid traceId, int code, string? message, Exception? innerException = null) Parameters traceId Guid Trace id. code int Code. message string Message. innerException Exception Inner exception."
  },
  "api/Apache.Ignite.Table.Criteria.html": {
    "href": "api/Apache.Ignite.Table.Criteria.html",
    "title": "Namespace Apache.Ignite.Table.Criteria | Apache Ignite.NET API Documentation",
    "keywords": "Namespace Apache.Ignite.Table.Criteria Classes CriteriaException Criteria exception base class."
  },
  "api/Apache.Ignite.Table.DataStreamerException.html": {
    "href": "api/Apache.Ignite.Table.DataStreamerException.html",
    "title": "Class DataStreamerException | Apache Ignite.NET API Documentation",
    "keywords": "Class DataStreamerException Namespace Apache.Ignite.Table Assembly Apache.Ignite.dll Represents an exception that is thrown during data streaming. Includes information about failed items. [Serializable] public class DataStreamerException : IgniteException, ISerializable Inheritance object Exception IgniteException DataStreamerException Implements ISerializable Inherited Members IgniteException.ErrorPrefix IgniteException.GroupName IgniteException.Code IgniteException.TraceId IgniteException.ErrorCode IgniteException.GroupCode IgniteException.CodeAsString Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors DataStreamerException(Guid, int, string?, Exception, ISet<object>) Initializes a new instance of the DataStreamerException class. public DataStreamerException(Guid traceId, int code, string? message, Exception innerException, ISet<object> failedItems) Parameters traceId Guid Trace id. code int Code. message string Message. innerException Exception Inner exception. failedItems ISet<object> Failed items. Properties FailedItems Gets the set of items that were not streamed to the cluster. public ISet<object> FailedItems { get; } Property Value ISet<object> Methods Create(Exception, IEnumerable) Creates a new instance of DataStreamerException from the provided cause and failed items. public static DataStreamerException Create(Exception cause, IEnumerable failedItems) Parameters cause Exception Cause. failedItems IEnumerable Failed items. Returns DataStreamerException Exception."
  },
  "api/Apache.Ignite.Table.DataStreamerItem-1.html": {
    "href": "api/Apache.Ignite.Table.DataStreamerItem-1.html",
    "title": "Struct DataStreamerItem<T> | Apache Ignite.NET API Documentation",
    "keywords": "Struct DataStreamerItem<T> Namespace Apache.Ignite.Table Assembly Apache.Ignite.dll Data streamer item. public record struct DataStreamerItem<T> : IEquatable<DataStreamerItem<T>> Type Parameters T Data type. Implements IEquatable<DataStreamerItem<T>> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors DataStreamerItem(T, DataStreamerOperationType) Data streamer item. public DataStreamerItem(T Data, DataStreamerOperationType OperationType) Parameters Data T Data item. OperationType DataStreamerOperationType Operation type. Properties Data Data item. public T Data { readonly get; set; } Property Value T OperationType Operation type. public DataStreamerOperationType OperationType { readonly get; set; } Property Value DataStreamerOperationType"
  },
  "api/Apache.Ignite.Table.DataStreamerItem.html": {
    "href": "api/Apache.Ignite.Table.DataStreamerItem.html",
    "title": "Class DataStreamerItem | Apache Ignite.NET API Documentation",
    "keywords": "Class DataStreamerItem Namespace Apache.Ignite.Table Assembly Apache.Ignite.dll Creates instances of the DataStreamerItem<T> struct. public static class DataStreamerItem Inheritance object DataStreamerItem Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create<T>(T) Creates a new data streamer item with the Put operation type. public static DataStreamerItem<T> Create<T>(T data) Parameters data T Data. Returns DataStreamerItem<T> Data streamer item. Type Parameters T Data type. Create<T>(T, DataStreamerOperationType) Creates a new data streamer item instance using provided values. public static DataStreamerItem<T> Create<T>(T data, DataStreamerOperationType operationType) Parameters data T Data. operationType DataStreamerOperationType Operation type. Returns DataStreamerItem<T> Data streamer item. Type Parameters T Data type."
  },
  "api/Apache.Ignite.Table.DataStreamerOperationType.html": {
    "href": "api/Apache.Ignite.Table.DataStreamerOperationType.html",
    "title": "Enum DataStreamerOperationType | Apache Ignite.NET API Documentation",
    "keywords": "Enum DataStreamerOperationType Namespace Apache.Ignite.Table Assembly Apache.Ignite.dll Data streamer operation type. public enum DataStreamerOperationType Fields Put = 0 Put operation. Remove = 1 Remove operation."
  },
  "api/Apache.Ignite.Table.DataStreamerOptions.html": {
    "href": "api/Apache.Ignite.Table.DataStreamerOptions.html",
    "title": "Class DataStreamerOptions | Apache Ignite.NET API Documentation",
    "keywords": "Class DataStreamerOptions Namespace Apache.Ignite.Table Assembly Apache.Ignite.dll Data streamer options. public sealed record DataStreamerOptions : IEquatable<DataStreamerOptions> Inheritance object DataStreamerOptions Implements IEquatable<DataStreamerOptions> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors DataStreamerOptions() Initializes a new instance of the DataStreamerOptions class. public DataStreamerOptions() DataStreamerOptions(int, int, TimeSpan) Data streamer options. public DataStreamerOptions(int PageSize, int RetryLimit, TimeSpan AutoFlushInterval) Parameters PageSize int The number of entries that will be sent to the cluster in one network call. RetryLimit int Retry limit for a batch. If a batch fails to be sent to the cluster, the streamer will retry it a number of times. AutoFlushInterval TimeSpan Auto flush interval - the period of time after which the streamer will flush the per-node buffer even if it is not full. Fields Default Default streamer options. public static readonly DataStreamerOptions Default Field Value DataStreamerOptions Properties AutoFlushInterval Auto flush interval - the period of time after which the streamer will flush the per-node buffer even if it is not full. public TimeSpan AutoFlushInterval { get; init; } Property Value TimeSpan PageSize The number of entries that will be sent to the cluster in one network call. public int PageSize { get; init; } Property Value int RetryLimit Retry limit for a batch. If a batch fails to be sent to the cluster, the streamer will retry it a number of times. public int RetryLimit { get; init; } Property Value int"
  },
  "api/Apache.Ignite.Table.IDataStreamerTarget-1.html": {
    "href": "api/Apache.Ignite.Table.IDataStreamerTarget-1.html",
    "title": "Interface IDataStreamerTarget<T> | Apache Ignite.NET API Documentation",
    "keywords": "Interface IDataStreamerTarget<T> Namespace Apache.Ignite.Table Assembly Apache.Ignite.dll Represents an entity that can be used as a target for streaming data. public interface IDataStreamerTarget<T> Type Parameters T Data type. Methods StreamDataAsync(IAsyncEnumerable<DataStreamerItem<T>>, DataStreamerOptions?, CancellationToken) Streams data into the underlying table. Task StreamDataAsync(IAsyncEnumerable<DataStreamerItem<T>> data, DataStreamerOptions? options = null, CancellationToken cancellationToken = default) Parameters data IAsyncEnumerable<DataStreamerItem<T>> Data. options DataStreamerOptions Streamer options. cancellationToken CancellationToken Cancellation token. Returns Task A Task representing the asynchronous operation. StreamDataAsync(IAsyncEnumerable<T>, DataStreamerOptions?, CancellationToken) Streams data into the underlying table. Task StreamDataAsync(IAsyncEnumerable<T> data, DataStreamerOptions? options = null, CancellationToken cancellationToken = default) Parameters data IAsyncEnumerable<T> Data. options DataStreamerOptions Streamer options. cancellationToken CancellationToken Cancellation token. Returns Task A Task representing the asynchronous operation. StreamDataAsync<TSource, TPayload, TArg>(IAsyncEnumerable<TSource>, Func<TSource, T>, Func<TSource, TPayload>, ReceiverDescriptor<TArg>, TArg, DataStreamerOptions?, CancellationToken) Streams data into the underlying table with receiver, ignoring receiver results (if any). Task StreamDataAsync<TSource, TPayload, TArg>(IAsyncEnumerable<TSource> data, Func<TSource, T> keySelector, Func<TSource, TPayload> payloadSelector, ReceiverDescriptor<TArg> receiver, TArg receiverArg, DataStreamerOptions? options = null, CancellationToken cancellationToken = default) where TPayload : notnull Parameters data IAsyncEnumerable<TSource> Data. keySelector Func<TSource, T> Key selector. payloadSelector Func<TSource, TPayload> Payload selector. receiver ReceiverDescriptor<TArg> Receiver descriptor. receiverArg TArg Receiver arg. options DataStreamerOptions Streamer options. cancellationToken CancellationToken Cancellation token. Returns Task A Task representing the asynchronous operation. Type Parameters TSource Source item type. TPayload Payload type. TArg Argument type. StreamDataAsync<TSource, TPayload, TArg, TResult>(IAsyncEnumerable<TSource>, Func<TSource, T>, Func<TSource, TPayload>, ReceiverDescriptor<TArg, TResult>, TArg, DataStreamerOptions?, CancellationToken) Streams data into the underlying table with receiver that returns results. IAsyncEnumerable<TResult> StreamDataAsync<TSource, TPayload, TArg, TResult>(IAsyncEnumerable<TSource> data, Func<TSource, T> keySelector, Func<TSource, TPayload> payloadSelector, ReceiverDescriptor<TArg, TResult> receiver, TArg receiverArg, DataStreamerOptions? options = null, CancellationToken cancellationToken = default) where TPayload : notnull Parameters data IAsyncEnumerable<TSource> Data. keySelector Func<TSource, T> Key selector. payloadSelector Func<TSource, TPayload> Payload selector. receiver ReceiverDescriptor<TArg, TResult> Streamer receiver descriptor. receiverArg TArg Receiver argument. options DataStreamerOptions Streamer options. cancellationToken CancellationToken Cancellation token. Returns IAsyncEnumerable<TResult> A IAsyncEnumerable<T> with the results from the receiver. The resulting async enumerator applies back-pressure to the data source, so it should be either fully consumed or disposed to complete the streaming. Disposing the enumerator before it is fully consumed will ignore the remaining results. Type Parameters TSource Source item type. TPayload Payload type. TArg Argument type. TResult Result type."
  },
  "api/Apache.Ignite.Table.IIgniteTuple.html": {
    "href": "api/Apache.Ignite.Table.IIgniteTuple.html",
    "title": "Interface IIgniteTuple | Apache Ignite.NET API Documentation",
    "keywords": "Interface IIgniteTuple Namespace Apache.Ignite.Table Assembly Apache.Ignite.dll Ignite Tuple. Default implementation is IgniteTuple. public interface IIgniteTuple Properties FieldCount Gets the number of columns. int FieldCount { get; } Property Value int this[int] Gets the value of the specified column as an object. object? this[int ordinal] { get; set; } Parameters ordinal int The zero-based column ordinal. Property Value object this[string] Gets the value of the specified column as an object. object? this[string name] { get; set; } Parameters name string The column name. Property Value object Methods Equals(IIgniteTuple?, IIgniteTuple?) Determines whether the specified object instances are considered equal. Ignores column order. public static bool Equals(IIgniteTuple? tuple1, IIgniteTuple? tuple2) Parameters tuple1 IIgniteTuple The first tuple to compare. tuple2 IIgniteTuple The second tuple to compare. Returns bool true if the tuples are considered equal; otherwise, false. If both tuple1 and tuple1 are null, the method returns true. GetHashCode(IIgniteTuple) Gets a hash code for the current tuple according to column names and values, ignoring column order. public static int GetHashCode(IIgniteTuple tuple) Parameters tuple IIgniteTuple Tuple. Returns int A hash code for the specified tuple. GetName(int) Gets the name of the column, given the zero-based column ordinal. string GetName(int ordinal) Parameters ordinal int Zero-based column ordinal. Returns string Column name. GetOrdinal(string) Gets the column ordinal given the name of the column, or -1 when the column with the given name does not exist. int GetOrdinal(string name) Parameters name string Column name. Returns int Column ordinal, or -1 when the column with the given name does not exist. ToString(IIgniteTuple) Converts tuple to string. public static string ToString(IIgniteTuple tuple) Parameters tuple IIgniteTuple Tuple. Returns string String representation."
  },
  "api/Apache.Ignite.Table.IKeyValueView-2.html": {
    "href": "api/Apache.Ignite.Table.IKeyValueView-2.html",
    "title": "Interface IKeyValueView<TK, TV> | Apache Ignite.NET API Documentation",
    "keywords": "Interface IKeyValueView<TK, TV> Namespace Apache.Ignite.Table Assembly Apache.Ignite.dll Key-value view provides access to table records in form of separate key and value parts. public interface IKeyValueView<TK, TV> : IDataStreamerTarget<KeyValuePair<TK, TV>> where TK : notnull Type Parameters TK Key type. TV Value type. Inherited Members IDataStreamerTarget<KeyValuePair<TK, TV>>.StreamDataAsync(IAsyncEnumerable<DataStreamerItem<KeyValuePair<TK, TV>>>, DataStreamerOptions, CancellationToken) IDataStreamerTarget<KeyValuePair<TK, TV>>.StreamDataAsync(IAsyncEnumerable<KeyValuePair<TK, TV>>, DataStreamerOptions, CancellationToken) IDataStreamerTarget<KeyValuePair<TK, TV>>.StreamDataAsync<TSource, TPayload, TArg, TResult>(IAsyncEnumerable<TSource>, Func<TSource, KeyValuePair<TK, TV>>, Func<TSource, TPayload>, ReceiverDescriptor<TArg, TResult>, TArg, DataStreamerOptions, CancellationToken) IDataStreamerTarget<KeyValuePair<TK, TV>>.StreamDataAsync<TSource, TPayload, TArg>(IAsyncEnumerable<TSource>, Func<TSource, KeyValuePair<TK, TV>>, Func<TSource, TPayload>, ReceiverDescriptor<TArg>, TArg, DataStreamerOptions, CancellationToken) Methods AsQueryable(ITransaction?, QueryableOptions?) Gets a IQueryable<T> to perform Ignite SQL queries using LINQ (see https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/). Use ToResultSetAsync<T>(IQueryable<T>) to materialize query results asynchronously. IQueryable<KeyValuePair<TK, TV>> AsQueryable(ITransaction? transaction = null, QueryableOptions? options = null) Parameters transaction ITransaction Optional transaction. options QueryableOptions Options. Returns IQueryable<KeyValuePair<TK, TV>> IQueryable<T>. ContainsAsync(ITransaction?, TK) Determines if the table contains an entry for the specified key. Task<bool> ContainsAsync(ITransaction? transaction, TK key) Parameters transaction ITransaction The transaction or null to auto commit. key TK Key. Returns Task<bool> A Task representing the asynchronous operation. The task result is true if a value exists for the specified key, and false otherwise. GetAllAsync(ITransaction?, IEnumerable<TK>) Gets multiple records by keys. Task<IDictionary<TK, TV>> GetAllAsync(ITransaction? transaction, IEnumerable<TK> keys) Parameters transaction ITransaction The transaction or null to auto commit. keys IEnumerable<TK> Keys. Returns Task<IDictionary<TK, TV>> A Task representing the asynchronous operation. The task result contains a dictionary with specified keys and their values. If a record for a particular key does not exist, it will not be present in the resulting dictionary. GetAndPutAsync(ITransaction?, TK, TV) Puts a value with a given key and returns previous value for that key. Task<Option<TV>> GetAndPutAsync(ITransaction? transaction, TK key, TV val) Parameters transaction ITransaction The transaction or null to auto commit. key TK Key. val TV Value. Returns Task<Option<TV>> A Task<TResult> representing the asynchronous operation. The task result contains the value for the specified key, or an Option<T> instance without a value when specified key is not present in the table. GetAndRemoveAsync(ITransaction?, TK) Gets and removes a value associated with the given key. Task<Option<TV>> GetAndRemoveAsync(ITransaction? transaction, TK key) Parameters transaction ITransaction The transaction or null to auto commit. key TK Key. Returns Task<Option<TV>> A Task<TResult> representing the asynchronous operation. The task result contains a value indicating whether the key was removed from the table. GetAndReplaceAsync(ITransaction?, TK, TV) Replaces a record with the same key columns if it exists. Task<Option<TV>> GetAndReplaceAsync(ITransaction? transaction, TK key, TV val) Parameters transaction ITransaction The transaction or null to auto commit. key TK Key. val TV Value. Returns Task<Option<TV>> A Task representing the asynchronous operation. The task result contains the previous value for the given key, or empty Option<T> if it did not exist. GetAsync(ITransaction?, TK) Gets a value associated with the given key. Task<Option<TV>> GetAsync(ITransaction? transaction, TK key) Parameters transaction ITransaction The transaction or null to auto commit. key TK Key. Returns Task<Option<TV>> A Task<TResult> representing the asynchronous operation. The task result contains the value for the specified key, or an Option<T> instance without a value when specified key is not present in the table. PutAllAsync(ITransaction?, IEnumerable<KeyValuePair<TK, TV>>) Puts multiple key-value pairs. Task PutAllAsync(ITransaction? transaction, IEnumerable<KeyValuePair<TK, TV>> pairs) Parameters transaction ITransaction The transaction or null to auto commit. pairs IEnumerable<KeyValuePair<TK, TV>> Pairs. Returns Task A Task<TResult> representing the asynchronous operation. PutAsync(ITransaction?, TK, TV) Puts a value with a given key. Task PutAsync(ITransaction? transaction, TK key, TV val) Parameters transaction ITransaction The transaction or null to auto commit. key TK Key. val TV Value. Returns Task A Task<TResult> representing the asynchronous operation. PutIfAbsentAsync(ITransaction?, TK, TV) Puts a value with a given key if the specified key is not present in the table. Task<bool> PutIfAbsentAsync(ITransaction? transaction, TK key, TV val) Parameters transaction ITransaction The transaction or null to auto commit. key TK Key. val TV Value. Returns Task<bool> A Task<TResult> representing the asynchronous operation. The task result contains a value indicating whether the value was added to the table. RemoveAllAsync(ITransaction?, IEnumerable<KeyValuePair<TK, TV>>) Removes records with given keys and values from the table. Task<IList<TK>> RemoveAllAsync(ITransaction? transaction, IEnumerable<KeyValuePair<TK, TV>> pairs) Parameters transaction ITransaction The transaction or null to auto commit. pairs IEnumerable<KeyValuePair<TK, TV>> Keys. Returns Task<IList<TK>> A Task<TResult> representing the asynchronous operation. The task result contains skipped keys. RemoveAllAsync(ITransaction?, IEnumerable<TK>) Removes values with given keys from the table. Task<IList<TK>> RemoveAllAsync(ITransaction? transaction, IEnumerable<TK> keys) Parameters transaction ITransaction The transaction or null to auto commit. keys IEnumerable<TK> Keys. Returns Task<IList<TK>> A Task<TResult> representing the asynchronous operation. The task result contains skipped keys. RemoveAsync(ITransaction?, TK) Removes a value with a given key from the table. Task<bool> RemoveAsync(ITransaction? transaction, TK key) Parameters transaction ITransaction The transaction or null to auto commit. key TK Key. Returns Task<bool> A Task<TResult> representing the asynchronous operation. The task result contains a value indicating whether the key was removed from the table. RemoveAsync(ITransaction?, TK, TV) Removes a value with a given key from the table only if it is equal to the specified value. Task<bool> RemoveAsync(ITransaction? transaction, TK key, TV val) Parameters transaction ITransaction The transaction or null to auto commit. key TK Key. val TV Val. Returns Task<bool> A Task<TResult> representing the asynchronous operation. The task result contains a value indicating whether the key was removed from the table. ReplaceAsync(ITransaction?, TK, TV) Replaces a record with the same key columns if it exists, otherwise does nothing. Task<bool> ReplaceAsync(ITransaction? transaction, TK key, TV val) Parameters transaction ITransaction The transaction or null to auto commit. key TK Key. val TV Value. Returns Task<bool> A Task representing the asynchronous operation. The task result contains a value indicating whether a record with the specified key was replaced. ReplaceAsync(ITransaction?, TK, TV, TV) Replaces a record with a new one only if all existing columns have the same values as the specified oldVal. Task<bool> ReplaceAsync(ITransaction? transaction, TK key, TV oldVal, TV newVal) Parameters transaction ITransaction The transaction or null to auto commit. key TK Key. oldVal TV Old value. newVal TV New value. Returns Task<bool> A Task representing the asynchronous operation. The task result contains a value indicating whether a record was replaced."
  },
  "api/Apache.Ignite.Table.IPartition.html": {
    "href": "api/Apache.Ignite.Table.IPartition.html",
    "title": "Interface IPartition | Apache Ignite.NET API Documentation",
    "keywords": "Interface IPartition Namespace Apache.Ignite.Table Assembly Apache.Ignite.dll Table partition. public interface IPartition : IEquatable<IPartition> Inherited Members IEquatable<IPartition>.Equals(IPartition)"
  },
  "api/Apache.Ignite.Table.IPartitionManager.html": {
    "href": "api/Apache.Ignite.Table.IPartitionManager.html",
    "title": "Interface IPartitionManager | Apache Ignite.NET API Documentation",
    "keywords": "Interface IPartitionManager Namespace Apache.Ignite.Table Assembly Apache.Ignite.dll Partition manager provides table partition information. public interface IPartitionManager Methods GetPartitionAsync(IIgniteTuple) Gets the partition for the specified table key. ValueTask<IPartition> GetPartitionAsync(IIgniteTuple tuple) Parameters tuple IIgniteTuple Table key tuple. Returns ValueTask<IPartition> Partition that contains the specified key. GetPartitionAsync<TK>(TK) Gets the partition for the specified table key. ValueTask<IPartition> GetPartitionAsync<TK>(TK key) where TK : notnull Parameters key TK Table key. Returns ValueTask<IPartition> Partition that contains the specified key. Type Parameters TK Key type. GetPrimaryReplicaAsync(IPartition) Gets the primary replica for the specified partition. NOTE: Prefer this method over GetPrimaryReplicasAsync() for performance-critical code. ValueTask<IClusterNode> GetPrimaryReplicaAsync(IPartition partition) Parameters partition IPartition Partition. Returns ValueTask<IClusterNode> Primary replica. GetPrimaryReplicasAsync() Gets the primary replicas for all partitions. NOTE: Prefer GetPrimaryReplicaAsync(IPartition) for performance-critical code. ValueTask<IReadOnlyDictionary<IPartition, IClusterNode>> GetPrimaryReplicasAsync() Returns ValueTask<IReadOnlyDictionary<IPartition, IClusterNode>> Map of partition to primary replica node."
  },
  "api/Apache.Ignite.Table.IRecordView-1.html": {
    "href": "api/Apache.Ignite.Table.IRecordView-1.html",
    "title": "Interface IRecordView<T> | Apache Ignite.NET API Documentation",
    "keywords": "Interface IRecordView<T> Namespace Apache.Ignite.Table Assembly Apache.Ignite.dll Record view interface provides methods to access table records. public interface IRecordView<T> : IDataStreamerTarget<T> where T : notnull Type Parameters T Record type. Inherited Members IDataStreamerTarget<T>.StreamDataAsync(IAsyncEnumerable<DataStreamerItem<T>>, DataStreamerOptions, CancellationToken) IDataStreamerTarget<T>.StreamDataAsync(IAsyncEnumerable<T>, DataStreamerOptions, CancellationToken) IDataStreamerTarget<T>.StreamDataAsync<TSource, TPayload, TArg, TResult>(IAsyncEnumerable<TSource>, Func<TSource, T>, Func<TSource, TPayload>, ReceiverDescriptor<TArg, TResult>, TArg, DataStreamerOptions, CancellationToken) IDataStreamerTarget<T>.StreamDataAsync<TSource, TPayload, TArg>(IAsyncEnumerable<TSource>, Func<TSource, T>, Func<TSource, TPayload>, ReceiverDescriptor<TArg>, TArg, DataStreamerOptions, CancellationToken) Methods AsQueryable(ITransaction?, QueryableOptions?) Gets a IQueryable<T> to perform Ignite SQL queries using LINQ (see https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/). Use ToResultSetAsync<T>(IQueryable<T>) to materialize query results asynchronously. IQueryable<T> AsQueryable(ITransaction? transaction = null, QueryableOptions? options = null) Parameters transaction ITransaction Optional transaction. options QueryableOptions Options. Returns IQueryable<T> IQueryable<T>. ContainsKeyAsync(ITransaction?, T) Determines if the table contains an entry for the specified key. Task<bool> ContainsKeyAsync(ITransaction? transaction, T key) Parameters transaction ITransaction The transaction or null to auto commit. key T A record with key columns set. Returns Task<bool> A Task representing the asynchronous operation. The task result is true if a value exists for the specified key, and false otherwise. DeleteAllAsync(ITransaction?, IEnumerable<T>) Deletes multiple records. If one or more keys do not exist, other records are still deleted. Task<IList<T>> DeleteAllAsync(ITransaction? transaction, IEnumerable<T> keys) Parameters transaction ITransaction The transaction or null to auto commit. keys IEnumerable<T> Record keys to delete. Returns Task<IList<T>> A Task representing the asynchronous operation. The task result contains records from keys that did not exist. DeleteAllExactAsync(ITransaction?, IEnumerable<T>) Deletes multiple exactly matching records. If one or more records do not exist, other records are still deleted. Task<IList<T>> DeleteAllExactAsync(ITransaction? transaction, IEnumerable<T> records) Parameters transaction ITransaction The transaction or null to auto commit. records IEnumerable<T> Records to delete. Returns Task<IList<T>> A Task representing the asynchronous operation. The task result contains records from records that did not exist. DeleteAsync(ITransaction?, T) Deletes a record with the specified key. Task<bool> DeleteAsync(ITransaction? transaction, T key) Parameters transaction ITransaction The transaction or null to auto commit. key T A record with key columns set. Returns Task<bool> A Task representing the asynchronous operation. The task result contains a value indicating whether a record with the specified key was deleted. DeleteExactAsync(ITransaction?, T) Deletes a record only if all existing columns have the same values as the specified record. Task<bool> DeleteExactAsync(ITransaction? transaction, T record) Parameters transaction ITransaction The transaction or null to auto commit. record T A record with all columns set. Returns Task<bool> A Task representing the asynchronous operation. The task result contains a value indicating whether a record was deleted. GetAllAsync(ITransaction?, IEnumerable<T>) Gets multiple records by keys. Task<IList<Option<T>>> GetAllAsync(ITransaction? transaction, IEnumerable<T> keys) Parameters transaction ITransaction The transaction or null to auto commit. keys IEnumerable<T> Collection of records with key columns set. Returns Task<IList<Option<T>>> A Task representing the asynchronous operation. The task result contains matching records with all columns filled from the table. The order of collection elements is guaranteed to be the same as the order of keys. If a record does not exist, the element at the corresponding index of the resulting collection will be empty Option<T>. GetAndDeleteAsync(ITransaction?, T) Gets and deletes a record with the specified key. Task<Option<T>> GetAndDeleteAsync(ITransaction? transaction, T key) Parameters transaction ITransaction The transaction or null to auto commit. key T A record with key columns set. Returns Task<Option<T>> A Task representing the asynchronous operation. The task result contains deleted record or empty Option<T> if it did not exist. GetAndReplaceAsync(ITransaction?, T) Replaces a record with the same key columns if it exists. Task<Option<T>> GetAndReplaceAsync(ITransaction? transaction, T record) Parameters transaction ITransaction The transaction or null to auto commit. record T Record to insert. Returns Task<Option<T>> A Task representing the asynchronous operation. The task result contains the previous value for the given key, or empty Option<T> if it did not exist. GetAndUpsertAsync(ITransaction?, T) Inserts a record into the table and returns previous record. Task<Option<T>> GetAndUpsertAsync(ITransaction? transaction, T record) Parameters transaction ITransaction The transaction or null to auto commit. record T Record to upsert. Returns Task<Option<T>> A Task representing the asynchronous operation. The task result contains replaced record or null if it did not exist. GetAsync(ITransaction?, T) Gets a record by key. Task<Option<T>> GetAsync(ITransaction? transaction, T key) Parameters transaction ITransaction The transaction or null to auto commit. key T A record with key columns set. Returns Task<Option<T>> A Task representing the asynchronous operation. The task result contains a record with all columns. InsertAllAsync(ITransaction?, IEnumerable<T>) Inserts multiple records into the table, skipping existing ones. Task<IList<T>> InsertAllAsync(ITransaction? transaction, IEnumerable<T> records) Parameters transaction ITransaction The transaction or null to auto commit. records IEnumerable<T> Records to insert. Returns Task<IList<T>> A Task representing the asynchronous operation. The task result contains skipped records. InsertAsync(ITransaction?, T) Inserts a record into the table if it does not exist. Task<bool> InsertAsync(ITransaction? transaction, T record) Parameters transaction ITransaction The transaction or null to auto commit. record T Record to insert. Returns Task<bool> A Task representing the asynchronous operation. The task result contains a value indicating whether the record was inserted. Returns false if a record with the same key already exists. ReplaceAsync(ITransaction?, T) Replaces a record with the same key columns if it exists, otherwise does nothing. Task<bool> ReplaceAsync(ITransaction? transaction, T record) Parameters transaction ITransaction The transaction or null to auto commit. record T Record to insert. Returns Task<bool> A Task representing the asynchronous operation. The task result contains a value indicating whether a record with the specified key was replaced. ReplaceAsync(ITransaction?, T, T) Replaces a record with a new one only if all existing columns have the same values as the specified record. Task<bool> ReplaceAsync(ITransaction? transaction, T record, T newRecord) Parameters transaction ITransaction The transaction or null to auto commit. record T Record to replace. newRecord T Record to replace with. Returns Task<bool> A Task representing the asynchronous operation. The task result contains a value indicating whether a record was replaced. UpsertAllAsync(ITransaction?, IEnumerable<T>) Inserts multiple records into the table, replacing existing ones. Task UpsertAllAsync(ITransaction? transaction, IEnumerable<T> records) Parameters transaction ITransaction The transaction or null to auto commit. records IEnumerable<T> Records to upsert. Returns Task A Task representing the asynchronous operation. UpsertAsync(ITransaction?, T) Inserts a record into the table if it does not exist or replaces the existing one. Task UpsertAsync(ITransaction? transaction, T record) Parameters transaction ITransaction The transaction or null to auto commit. record T Record to upsert. Returns Task A Task representing the asynchronous operation."
  },
  "api/Apache.Ignite.Table.ITable.html": {
    "href": "api/Apache.Ignite.Table.ITable.html",
    "title": "Interface ITable | Apache Ignite.NET API Documentation",
    "keywords": "Interface ITable Namespace Apache.Ignite.Table Assembly Apache.Ignite.dll Table view. public interface ITable Properties KeyValueBinaryView Gets the key-value binary view. IKeyValueView<IIgniteTuple, IIgniteTuple> KeyValueBinaryView { get; } Property Value IKeyValueView<IIgniteTuple, IIgniteTuple> Name Gets the table name. string Name { get; } Property Value string PartitionManager Gets the partition manager. IPartitionManager PartitionManager { get; } Property Value IPartitionManager RecordBinaryView Gets the record binary view. IRecordView<IIgniteTuple> RecordBinaryView { get; } Property Value IRecordView<IIgniteTuple> Methods GetKeyValueView<TK, TV>() Gets the record view mapped to specified key and value types. Table columns will be mapped to properties or fields by name, ignoring case. Any fields are supported, including private and readonly. IKeyValueView<TK, TV> GetKeyValueView<TK, TV>() where TK : notnull Returns IKeyValueView<TK, TV> Key-value view. Type Parameters TK Key type. TV Value type. GetRecordView<T>() Gets the record view mapped to specified type T. Table columns will be mapped to properties or fields by name, ignoring case. Any fields are supported, including private and readonly. IRecordView<T> GetRecordView<T>() where T : notnull Returns IRecordView<T> Record view. Type Parameters T Record type."
  },
  "api/Apache.Ignite.Table.ITables.html": {
    "href": "api/Apache.Ignite.Table.ITables.html",
    "title": "Interface ITables | Apache Ignite.NET API Documentation",
    "keywords": "Interface ITables Namespace Apache.Ignite.Table Assembly Apache.Ignite.dll Table management. public interface ITables Methods GetTableAsync(string) Gets a table by name. Task<ITable?> GetTableAsync(string name) Parameters name string Table name. Returns Task<ITable> A Task representing the asynchronous operation. GetTablesAsync() Gets all tables. Task<IList<ITable>> GetTablesAsync() Returns Task<IList<ITable>> A Task representing the asynchronous operation."
  },
  "api/Apache.Ignite.Table.IgniteTuple.html": {
    "href": "api/Apache.Ignite.Table.IgniteTuple.html",
    "title": "Class IgniteTuple | Apache Ignite.NET API Documentation",
    "keywords": "Class IgniteTuple Namespace Apache.Ignite.Table Assembly Apache.Ignite.dll Ignite tuple. public sealed class IgniteTuple : IIgniteTuple, IEquatable<IgniteTuple>, IEquatable<IIgniteTuple> Inheritance object IgniteTuple Implements IIgniteTuple IEquatable<IgniteTuple> IEquatable<IIgniteTuple> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors IgniteTuple(int) Initializes a new instance of the IgniteTuple class. public IgniteTuple(int capacity = 16) Parameters capacity int Capacity. Properties FieldCount Gets the number of columns. public int FieldCount { get; } Property Value int this[int] Gets the value of the specified column as an object. public object? this[int ordinal] { get; set; } Parameters ordinal int The zero-based column ordinal. Property Value object this[string] Gets the value of the specified column as an object. public object? this[string name] { get; set; } Parameters name string The column name. Property Value object Methods Clear() Clears the tuple. public void Clear() Equals(IIgniteTuple?) Indicates whether the current object is equal to another object of the same type. public bool Equals(IIgniteTuple? other) Parameters other IIgniteTuple An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(IgniteTuple?) Indicates whether the current object is equal to another object of the same type. public bool Equals(IgniteTuple? other) Parameters other IgniteTuple An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. GetName(int) Gets the name of the column, given the zero-based column ordinal. public string GetName(int ordinal) Parameters ordinal int Zero-based column ordinal. Returns string Column name. GetOrdinal(string) Gets the column ordinal given the name of the column, or -1 when the column with the given name does not exist. public int GetOrdinal(string name) Parameters name string Column name. Returns int Column ordinal, or -1 when the column with the given name does not exist. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Apache.Ignite.Table.ReceiverDescriptor-1.html": {
    "href": "api/Apache.Ignite.Table.ReceiverDescriptor-1.html",
    "title": "Class ReceiverDescriptor<TArg> | Apache Ignite.NET API Documentation",
    "keywords": "Class ReceiverDescriptor<TArg> Namespace Apache.Ignite.Table Assembly Apache.Ignite.dll Stream receiver descriptor without results. If the specified receiver returns results, they will be discarded on the server. public sealed record ReceiverDescriptor<TArg> : IEquatable<ReceiverDescriptor<TArg>> Type Parameters TArg Argument type. Inheritance object ReceiverDescriptor<TArg> Implements IEquatable<ReceiverDescriptor<TArg>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ReceiverDescriptor(string, IEnumerable<DeploymentUnit>?) Stream receiver descriptor without results. If the specified receiver returns results, they will be discarded on the server. public ReceiverDescriptor(string ReceiverClassName, IEnumerable<DeploymentUnit>? DeploymentUnits = null) Parameters ReceiverClassName string Java class name of the streamer receiver to execute. DeploymentUnits IEnumerable<DeploymentUnit> Deployment units. Properties DeploymentUnits Deployment units. public IEnumerable<DeploymentUnit>? DeploymentUnits { get; init; } Property Value IEnumerable<DeploymentUnit> ReceiverClassName Java class name of the streamer receiver to execute. public string ReceiverClassName { get; init; } Property Value string"
  },
  "api/Apache.Ignite.Table.ReceiverDescriptor-2.html": {
    "href": "api/Apache.Ignite.Table.ReceiverDescriptor-2.html",
    "title": "Class ReceiverDescriptor<TArg, TResult> | Apache Ignite.NET API Documentation",
    "keywords": "Class ReceiverDescriptor<TArg, TResult> Namespace Apache.Ignite.Table Assembly Apache.Ignite.dll Stream receiver descriptor with result type. public sealed record ReceiverDescriptor<TArg, TResult> : IEquatable<ReceiverDescriptor<TArg, TResult>> Type Parameters TArg Argument type. TResult Result type. Inheritance object ReceiverDescriptor<TArg, TResult> Implements IEquatable<ReceiverDescriptor<TArg, TResult>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ReceiverDescriptor(string, IEnumerable<DeploymentUnit>?) Stream receiver descriptor with result type. public ReceiverDescriptor(string ReceiverClassName, IEnumerable<DeploymentUnit>? DeploymentUnits = null) Parameters ReceiverClassName string Java class name of the streamer receiver to execute. DeploymentUnits IEnumerable<DeploymentUnit> Deployment units. Properties DeploymentUnits Deployment units. public IEnumerable<DeploymentUnit>? DeploymentUnits { get; init; } Property Value IEnumerable<DeploymentUnit> ReceiverClassName Java class name of the streamer receiver to execute. public string ReceiverClassName { get; init; } Property Value string"
  },
  "api/Apache.Ignite.Table.html": {
    "href": "api/Apache.Ignite.Table.html",
    "title": "Namespace Apache.Ignite.Table | Apache Ignite.NET API Documentation",
    "keywords": "Namespace Apache.Ignite.Table Classes DataStreamerException Represents an exception that is thrown during data streaming. Includes information about failed items. DataStreamerItem Creates instances of the DataStreamerItem<T> struct. DataStreamerOptions Data streamer options. IgniteTuple Ignite tuple. ReceiverDescriptor<TArg> Stream receiver descriptor without results. If the specified receiver returns results, they will be discarded on the server. ReceiverDescriptor<TArg, TResult> Stream receiver descriptor with result type. Structs DataStreamerItem<T> Data streamer item. Interfaces IDataStreamerTarget<T> Represents an entity that can be used as a target for streaming data. IIgniteTuple Ignite Tuple. Default implementation is IgniteTuple. IKeyValueView<TK, TV> Key-value view provides access to table records in form of separate key and value parts. IPartition Table partition. IPartitionManager Partition manager provides table partition information. IRecordView<T> Record view interface provides methods to access table records. ITable Table view. ITables Table management. Enums DataStreamerOperationType Data streamer operation type."
  },
  "api/Apache.Ignite.TableAlreadyExistsException.html": {
    "href": "api/Apache.Ignite.TableAlreadyExistsException.html",
    "title": "Class TableAlreadyExistsException | Apache Ignite.NET API Documentation",
    "keywords": "Class TableAlreadyExistsException Namespace Apache.Ignite Assembly Apache.Ignite.dll This exception is thrown when a table creation has failed because a table with the specified name already existed. [Serializable] public sealed class TableAlreadyExistsException : IgniteException, ISerializable Inheritance object Exception IgniteException TableAlreadyExistsException Implements ISerializable Inherited Members IgniteException.ErrorPrefix IgniteException.GroupName IgniteException.Code IgniteException.TraceId IgniteException.ErrorCode IgniteException.GroupCode IgniteException.CodeAsString Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors TableAlreadyExistsException(Guid, int, string?, Exception?) Initializes a new instance of the TableAlreadyExistsException class. public TableAlreadyExistsException(Guid traceId, int code, string? message, Exception? innerException = null) Parameters traceId Guid Trace id. code int Code. message string Message. innerException Exception Inner exception."
  },
  "api/Apache.Ignite.TableNotFoundException.html": {
    "href": "api/Apache.Ignite.TableNotFoundException.html",
    "title": "Class TableNotFoundException | Apache Ignite.NET API Documentation",
    "keywords": "Class TableNotFoundException Namespace Apache.Ignite Assembly Apache.Ignite.dll Exception is thrown when a specified table cannot be found. [Serializable] public sealed class TableNotFoundException : IgniteException, ISerializable Inheritance object Exception IgniteException TableNotFoundException Implements ISerializable Inherited Members IgniteException.ErrorPrefix IgniteException.GroupName IgniteException.Code IgniteException.TraceId IgniteException.ErrorCode IgniteException.GroupCode IgniteException.CodeAsString Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors TableNotFoundException(Guid, int, string?, Exception?) Initializes a new instance of the TableNotFoundException class. public TableNotFoundException(Guid traceId, int code, string? message, Exception? innerException = null) Parameters traceId Guid Trace id. code int Code. message string Message. innerException Exception Inner exception."
  },
  "api/Apache.Ignite.Transactions.ITransaction.html": {
    "href": "api/Apache.Ignite.Transactions.ITransaction.html",
    "title": "Interface ITransaction | Apache Ignite.NET API Documentation",
    "keywords": "Interface ITransaction Namespace Apache.Ignite.Transactions Assembly Apache.Ignite.dll Ignite transaction. Use BeginAsync() to start a new transaction. public interface ITransaction : IAsyncDisposable Inherited Members IAsyncDisposable.DisposeAsync() Properties IsReadOnly Gets a value indicating whether this transaction is read-only. bool IsReadOnly { get; } Property Value bool Methods CommitAsync() Commits the transaction. Task CommitAsync() Returns Task A Task representing the asynchronous operation. RollbackAsync() Rolls back the transaction. Task RollbackAsync() Returns Task A Task representing the asynchronous operation."
  },
  "api/Apache.Ignite.Transactions.ITransactions.html": {
    "href": "api/Apache.Ignite.Transactions.ITransactions.html",
    "title": "Interface ITransactions | Apache Ignite.NET API Documentation",
    "keywords": "Interface ITransactions Namespace Apache.Ignite.Transactions Assembly Apache.Ignite.dll Ignite transactions API. public interface ITransactions Methods BeginAsync() Starts a new transaction. ValueTask<ITransaction> BeginAsync() Returns ValueTask<ITransaction> A ValueTask representing the asynchronous operation. BeginAsync(TransactionOptions) Starts a new transaction. ValueTask<ITransaction> BeginAsync(TransactionOptions options) Parameters options TransactionOptions Transaction options. Returns ValueTask<ITransaction> A ValueTask representing the asynchronous operation."
  },
  "api/Apache.Ignite.Transactions.TransactionOptions.html": {
    "href": "api/Apache.Ignite.Transactions.TransactionOptions.html",
    "title": "Struct TransactionOptions | Apache Ignite.NET API Documentation",
    "keywords": "Struct TransactionOptions Namespace Apache.Ignite.Transactions Assembly Apache.Ignite.dll Ignite transaction options. public readonly record struct TransactionOptions : IEquatable<TransactionOptions> Implements IEquatable<TransactionOptions> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors TransactionOptions(bool, long) Ignite transaction options. public TransactionOptions(bool ReadOnly, long TimeoutMillis = 0) Parameters ReadOnly bool Whether to start a read-only transaction. Read-only transactions provide a snapshot view of data at a certain point in time. They are lock-free and perform better than normal transactions, but do not permit data modifications. TimeoutMillis long Transaction timeout. 0 means 'use default timeout'. For RO transactions, the default timeout is data availability time configured via ignite.gc.lowWatermark.dataAvailabilityTime configuration setting. For RW transactions, timeouts are not supported yet. TODO: IGNITE-15936. Properties ReadOnly Whether to start a read-only transaction. Read-only transactions provide a snapshot view of data at a certain point in time. They are lock-free and perform better than normal transactions, but do not permit data modifications. public bool ReadOnly { get; init; } Property Value bool TimeoutMillis Transaction timeout. 0 means 'use default timeout'. For RO transactions, the default timeout is data availability time configured via ignite.gc.lowWatermark.dataAvailabilityTime configuration setting. For RW transactions, timeouts are not supported yet. TODO: IGNITE-15936. public long TimeoutMillis { get; init; } Property Value long"
  },
  "api/Apache.Ignite.Transactions.html": {
    "href": "api/Apache.Ignite.Transactions.html",
    "title": "Namespace Apache.Ignite.Transactions | Apache Ignite.NET API Documentation",
    "keywords": "Namespace Apache.Ignite.Transactions Structs TransactionOptions Ignite transaction options. Interfaces ITransaction Ignite transaction. Use BeginAsync() to start a new transaction. ITransactions Ignite transactions API."
  },
  "api/Apache.Ignite.Tx.IncompatibleSchemaException.html": {
    "href": "api/Apache.Ignite.Tx.IncompatibleSchemaException.html",
    "title": "Class IncompatibleSchemaException | Apache Ignite.NET API Documentation",
    "keywords": "Class IncompatibleSchemaException Namespace Apache.Ignite.Tx Assembly Apache.Ignite.dll Thrown when, during an attempt to execute a transactional operation, it turns out that the operation cannot be executed because an incompatible schema change has happened. The transaction in question is aborted. [Serializable] public sealed class IncompatibleSchemaException : IgniteException, ISerializable Inheritance object Exception IgniteException IncompatibleSchemaException Implements ISerializable Inherited Members IgniteException.ErrorPrefix IgniteException.GroupName IgniteException.Code IgniteException.TraceId IgniteException.ErrorCode IgniteException.GroupCode IgniteException.CodeAsString Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors IncompatibleSchemaException(Guid, int, string?, Exception?) Initializes a new instance of the IncompatibleSchemaException class. public IncompatibleSchemaException(Guid traceId, int code, string? message, Exception? innerException = null) Parameters traceId Guid Trace id. code int Code. message string Message. innerException Exception Inner exception."
  },
  "api/Apache.Ignite.Tx.MismatchingTransactionOutcomeException.html": {
    "href": "api/Apache.Ignite.Tx.MismatchingTransactionOutcomeException.html",
    "title": "Class MismatchingTransactionOutcomeException | Apache Ignite.NET API Documentation",
    "keywords": "Class MismatchingTransactionOutcomeException Namespace Apache.Ignite.Tx Assembly Apache.Ignite.dll The exception is thrown when the transaction result differs from the intended one. For example, {@code tx.commit()} is called for a transaction, but the verification logic decided to abort it instead. The transaction will be aborted and the call to {@code tx.commit()} will throw this exception. [Serializable] public sealed class MismatchingTransactionOutcomeException : IgniteException, ISerializable Inheritance object Exception IgniteException MismatchingTransactionOutcomeException Implements ISerializable Inherited Members IgniteException.ErrorPrefix IgniteException.GroupName IgniteException.Code IgniteException.TraceId IgniteException.ErrorCode IgniteException.GroupCode IgniteException.CodeAsString Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors MismatchingTransactionOutcomeException(Guid, int, string?, Exception?) Initializes a new instance of the MismatchingTransactionOutcomeException class. public MismatchingTransactionOutcomeException(Guid traceId, int code, string? message, Exception? innerException = null) Parameters traceId Guid Trace id. code int Code. message string Message. innerException Exception Inner exception."
  },
  "api/Apache.Ignite.Tx.TransactionException.html": {
    "href": "api/Apache.Ignite.Tx.TransactionException.html",
    "title": "Class TransactionException | Apache Ignite.NET API Documentation",
    "keywords": "Class TransactionException Namespace Apache.Ignite.Tx Assembly Apache.Ignite.dll This exception is thrown if a transaction can't be finished for some reason. [Serializable] public sealed class TransactionException : IgniteException, ISerializable Inheritance object Exception IgniteException TransactionException Implements ISerializable Inherited Members IgniteException.ErrorPrefix IgniteException.GroupName IgniteException.Code IgniteException.TraceId IgniteException.ErrorCode IgniteException.GroupCode IgniteException.CodeAsString Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors TransactionException(Guid, int, string?, Exception?) Initializes a new instance of the TransactionException class. public TransactionException(Guid traceId, int code, string? message, Exception? innerException = null) Parameters traceId Guid Trace id. code int Code. message string Message. innerException Exception Inner exception."
  },
  "api/Apache.Ignite.Tx.html": {
    "href": "api/Apache.Ignite.Tx.html",
    "title": "Namespace Apache.Ignite.Tx | Apache Ignite.NET API Documentation",
    "keywords": "Namespace Apache.Ignite.Tx Classes IncompatibleSchemaException Thrown when, during an attempt to execute a transactional operation, it turns out that the operation cannot be executed because an incompatible schema change has happened. The transaction in question is aborted. MismatchingTransactionOutcomeException The exception is thrown when the transaction result differs from the intended one. For example, {@code tx.commit()} is called for a transaction, but the verification logic decided to abort it instead. The transaction will be aborted and the call to {@code tx.commit()} will throw this exception. TransactionException This exception is thrown if a transaction can't be finished for some reason."
  },
  "api/Apache.Ignite.UnexpectedNullValueException.html": {
    "href": "api/Apache.Ignite.UnexpectedNullValueException.html",
    "title": "Class UnexpectedNullValueException | Apache Ignite.NET API Documentation",
    "keywords": "Class UnexpectedNullValueException Namespace Apache.Ignite Assembly Apache.Ignite.dll This exception is thrown instead of returning a null value from a method that does not respect {@code null}-value to avoid ambiguity (whether the value is absent or is {@code null}). [Serializable] public sealed class UnexpectedNullValueException : IgniteException, ISerializable Inheritance object Exception IgniteException UnexpectedNullValueException Implements ISerializable Inherited Members IgniteException.ErrorPrefix IgniteException.GroupName IgniteException.Code IgniteException.TraceId IgniteException.ErrorCode IgniteException.GroupCode IgniteException.CodeAsString Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors UnexpectedNullValueException(Guid, int, string?, Exception?) Initializes a new instance of the UnexpectedNullValueException class. public UnexpectedNullValueException(Guid traceId, int code, string? message, Exception? innerException = null) Parameters traceId Guid Trace id. code int Code. message string Message. innerException Exception Inner exception."
  },
  "api/Apache.Ignite.UnsupportedPartitionTypeException.html": {
    "href": "api/Apache.Ignite.UnsupportedPartitionTypeException.html",
    "title": "Class UnsupportedPartitionTypeException | Apache Ignite.NET API Documentation",
    "keywords": "Class UnsupportedPartitionTypeException Namespace Apache.Ignite Assembly Apache.Ignite.dll This exception is thrown when a table does not support the specified partition type. [Serializable] public sealed class UnsupportedPartitionTypeException : IgniteException, ISerializable Inheritance object Exception IgniteException UnsupportedPartitionTypeException Implements ISerializable Inherited Members IgniteException.ErrorPrefix IgniteException.GroupName IgniteException.Code IgniteException.TraceId IgniteException.ErrorCode IgniteException.GroupCode IgniteException.CodeAsString Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors UnsupportedPartitionTypeException(Guid, int, string?, Exception?) Initializes a new instance of the UnsupportedPartitionTypeException class. public UnsupportedPartitionTypeException(Guid traceId, int code, string? message, Exception? innerException = null) Parameters traceId Guid Trace id. code int Code. message string Message. innerException Exception Inner exception."
  },
  "api/Apache.Ignite.html": {
    "href": "api/Apache.Ignite.html",
    "title": "Namespace Apache.Ignite | Apache Ignite.NET API Documentation",
    "keywords": "Namespace Apache.Ignite Classes BasicAuthenticator Basic authenticator with username and password. Credentials are sent to the server in plain text, unless SSL/TLS is enabled - see SslStreamFactory. ClusterInitFailureException Thrown when cluster initialization failed. ClusterNotInitializedException Thrown when cluster is not yet initialized. ColumnAlreadyExistsException This exception is thrown when a column creation has failed because a column with the specified name already existed. ColumnNotFoundException Exception is thrown when the indicated column is not found. CursorClosedException Exception is thrown when a data fetch attempt is performed on a closed cursor. ErrorGroups Represents a concept of error group. Error group defines a collection of errors that belong to a single semantic component. Each group can be identified by a name and an integer number that both must be unique across all error groups. ErrorGroups.Authentication Authentication errors. ErrorGroups.Catalog Catalog errors. ErrorGroups.Client Client errors. ErrorGroups.CodeDeployment CodeDeployment errors. ErrorGroups.Common Common errors. ErrorGroups.Compute Compute errors. ErrorGroups.CriticalWorkers CriticalWorkers errors. ErrorGroups.DisasterRecovery DisasterRecovery errors. ErrorGroups.DistributionZones DistributionZones errors. ErrorGroups.Embedded Embedded errors. ErrorGroups.GarbageCollector GarbageCollector errors. ErrorGroups.Index Index errors. ErrorGroups.Marshalling Marshalling errors. ErrorGroups.MetaStorage MetaStorage errors. ErrorGroups.Network Network errors. ErrorGroups.NodeConfiguration NodeConfiguration errors. ErrorGroups.PlacementDriver PlacementDriver errors. ErrorGroups.Replicator Replicator errors. ErrorGroups.Rest Rest errors. ErrorGroups.Sql Sql errors. ErrorGroups.Storage Storage errors. ErrorGroups.Table Table errors. ErrorGroups.Transactions Transactions errors. IgniteClient Ignite client builder. IgniteClientConfiguration Ignite client driver configuration. IgniteClientConnectionException Ignite thin client exception. IgniteClientException Ignite thin client exception. IgniteClientGroup Ignite client group. Thread safe. Creates and maintains up to Size Ignite clients and returns them in a round-robin fashion. Ignite clients are thread safe, so there is no rent/return semantics. Register as a singleton in DI container: builder.Services.AddSingleton(_ => new IgniteClientGroup( new IgniteClientGroupConfiguration { Size = 3, ClientConfiguration = new(\"localhost\"), })); Invoke from a controller: public async Task<IActionResult> Index([FromServices] IgniteClientGroup igniteGroup) { IIgnite ignite = await igniteGroup.GetIgniteAsync(); var tables = await ignite.Tables.GetTablesAsync(); return Ok(tables); } IgniteClientGroupConfiguration Ignite client group configuration. See IgniteClientGroup for more details. IgniteException Ignite exception. IgniteServiceCollectionExtensions Extension methods for setting up Apache Ignite services in an IServiceCollection. IndexAlreadyExistsException This exception is thrown when a new index creation has failed because an index with the specified name already existed. IndexNotFoundException Exception is thrown when the specified index is not found. MarshallerException This exception is caused by a failure to marshall or unmarshall a value. The failure can be due to a value not matching the a schema or to another reason. MetricNames Ignite.NET client metrics. CLI usage example: dotnet-counters monitor --counters Apache.Ignite,System.Runtime --process-id PID See https://learn.microsoft.com/en-us/dotnet/core/diagnostics/dotnet-counters for details. Code usage example: var meterListener = new MeterListener(); meterListener.InstrumentPublished = (instrument, listener) => { if (instrument.Meter.Name == MetricNames.MeterName) { listener.EnableMeasurementEvents(instrument); Console.WriteLine($\"Instrument enabled: {instrument.Name}\"); } }; meterListener.SetMeasurementEventCallback<long>((instrument, measurement, tags, state) => Console.WriteLine($\"{instrument.Name}: {measurement}\")); meterListener.SetMeasurementEventCallback<int>((instrument, measurement, tags, state) => Console.WriteLine($\"{instrument.Name}: {measurement}\")); meterListener.Start(); See https://learn.microsoft.com/en-us/dotnet/core/diagnostics/metrics for details. MetricTags Metric tag names. See also MetricNames. NodeNotStartedException Thrown when embedded node is not yet started or it's already stopped. NodeStartException Thrown when node failed to start. Option Static helpers for Option<T>. RetryLimitPolicy Retry policy that returns true when Iteration is less than the specified RetryLimit, or the limit is zero or less. RetryNonePolicy Retry policy that always returns false. RetryReadPolicy Retry policy that returns true for all read-only operations that do not modify data. SchemaNotFoundException Exception is thrown when a specified schema cannot be found. SslStreamFactory Standard SSL stream factory. Can be used with or without client-side certificates. TableAlreadyExistsException This exception is thrown when a table creation has failed because a table with the specified name already existed. TableNotFoundException Exception is thrown when a specified table cannot be found. UnexpectedNullValueException This exception is thrown instead of returning a null value from a method that does not respect {@code null}-value to avoid ambiguity (whether the value is absent or is {@code null}). UnsupportedPartitionTypeException This exception is thrown when a table does not support the specified partition type. Structs BigDecimal Big decimal. Ignite supports values with up to MaxValue precision (in tables, SQL, Compute, and other APIs). .NET decimal has 28-29 digit precision and can not represent all values that Ignite supports. This type fills the gap. Option<T> A wrapper that may or may not contain a value of type T. Interfaces IAuthenticator Ignite client authenticator. Provides authentication information during server handshake. IIgnite Ignite API entry point. All Ignite APIs are thread-safe, unless noted otherwise. Implementation can be a thin client (see IIgniteClient and StartAsync(IgniteClientConfiguration)), or a direct IPC connection for server-side functionality like compute. IIgniteClient Ignite client. Extends IIgnite with client-specific functionality. All Ignite APIs are thread-safe, unless noted otherwise. IRetryPolicy Client retry policy determines whether client operations that have failed due to a connection issue should be retried. IRetryPolicyContext Retry policy context. See ShouldRetry(IRetryPolicyContext). ISslStreamFactory SSL Stream Factory defines how SSL connection is established. See SslStreamFactory, SslStreamFactory. Enums ClientOperationType Client operation type."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Ignite.NET API Documentation | Apache Ignite.NET API Documentation",
    "keywords": "Ignite.NET API Documentation IgniteClient is the API entry point."
  },
  "articles/linq.html": {
    "href": "articles/linq.html",
    "title": "Apache Ignite LINQ provider | Apache Ignite.NET API Documentation",
    "keywords": "Apache Ignite LINQ provider What? LINQ provider translates C# LINQ expressions into Ignite-specific SQL. For example, the following two snippets achieve the same result: SQL var query = \"select KEY, VAL from PUBLIC.TBL1 where (KEY > ?) order by KEY asc\"; await using IResultSet<IIgniteTuple> resultSet = await Client.Sql.ExecuteAsync(transaction: null, query, 3); var queryResults = new List<Poco>(); await foreach (IIgniteTuple row in resultSet) { queryResults.Add(new Poco { Key = (long)row[0]!, Val = (string?)row[1] }); } LINQ var table = await Client.Tables.GetTableAsync(\"TBL1\"); IQueryable<Poco> query = table!.GetRecordView<Poco>().AsQueryable() .Where(x => x.Key > 3) .OrderBy(x => x.Key); List<Poco> queryResults = await query.ToListAsync(); Why? LINQ has the following advantages over SQL: Queries are strongly typed and compile-time checked: Easier to write and maintain with IDE support (auto-completion, navigation, find usages). Refactoring-friendly: rename a column and all queries are updated at once. Ignite-specific SQL knowledge is not required, and most C# developers are already familiar with LINQ. Safe against SQL injections. Results are mapped to types naturally. Getting Started Create a table. await Client.Sql.ExecuteAsync(null, @\"CREATE TABLE PUBLIC.PERSON (NAME VARCHAR PRIMARY KEY, AGE INT)\"); Define classes (or records) that represent tables. Member names should match column names (case-insensitive). If a column name is not a valid C# identifier, use [Column(\"name\")] attribute to specify the name. public record Person(string Name, int Age, string Address, string Status); Obtain a table reference ITable table = await Client.Tables.GetTableAsync(\"PERSON\"); Use GetRecordView<T>() to get a typed view of the table. IRecordView<Person> view = table.GetRecordView<Person>(); Use AsQueryable() to perform LINQ queries on IRecordView<T>. List<string> names = await view.AsQueryable() .Where(x => x.Age > 30) .Select(x => x.Name) .ToListAsync(); Inspecting Generated SQL Viewing generated SQL is useful for debugging and performance tuning. There are two ways to do it: IgniteQueryableExtensions.ToQueryString() extension method: IQueryable<Person> query = table.GetRecordView<Person>().AsQueryable().Where(x => x.Age > 30); string sql = query.ToQueryString(); Debug logging: var cfg = new IgniteClientConfiguration { Logger = LoggerFactory.Create(builder => builder.AddConsole().SetMinimumLevel(LogLevel.Debug)), ... }; using var client = IgniteClient.StartAsync(cfg); ... All generated SQL will be logged with Debug level to the specified logger. Using Transactions Transaction can be passed to the LINQ provider via the first AsQueryeable parameter: await using var tx = await client.Transactions.BeginAsync(); var view = (await client.Tables.GetTableAsync(\"person\"))!.GetRecordView<Person>(); pocoView.AsQueryable(tx)...; Custom Query Options Custom query options (timeout, page size) can be specified via the second AsQueryable parameter with QueryableOptions: var options = new QueryableOptions { PageSize = 512, Timeout = TimeSpan.FromSeconds(30) }; table.GetRecordView<Person>().AsQueryable(options: options)...; Result Materialization Materialization is the process of converting query results (IQueryable<T>) into an object or a collection of objects. LINQ is lazy. Nothing happens (no network calls, no SQL translation) until the query is materialized. For example, the following code only constructs an expression, but does not execute anything: IQueryable<Person> query = table!.GetRecordView<Person>().AsQueryable() .Where(x => x.Key > 3) .OrderBy(x => x.Key); Query execution and materialization can be triggered in multiple ways: Iteration foreach (var person in query) { ... } await foreach (var person in query.AsAsyncEnumerable()) { ... } ToList, ToDictionary List<Person> list = query.ToList(); Dictionary<string, int> dict = query.ToDictionary(x => x.Name, x => x.Age); Async variants are available in IgniteQueryableExtensions: List<Person> list = await query.ToListAsync(); Dictionary<string, int> dict = await query.ToDictionaryAsync(x => x.Name, x => x.Age); Single Result Functions Person first = query.First(); Person? firstOrDefault = query.FirstOrDefault(); Person single = query.Single(); Person? singleOrDefault = query.SingleOrDefault(); int maxAge = query.Max(x => x.Age); int minAge = query.Min(x => x.Age); int avgAge = query.Average(x => x.Age); int sumAge = query.Sum(x => x.Age); int count = query.Count(); long longCount = query.LongCount(); bool any = query.Any(x => x.Age > 30); bool all = query.All(x => x.Age > 30); Async variants are available in IgniteQueryableExtensions: Person first = await query.FirstAsync(); Person? firstOrDefault = await query.FirstOrDefaultAsync(); Person single = await query.SingleAsync(); Person? singleOrDefault = await query.SingleOrDefaultAsync(); int maxAge = await query.MaxAsync(x => x.Age); int minAge = await query.MinAsync(x => x.Age); int avgAge = await query.AverageAsync(x => x.Age); int sumAge = await query.SumAsync(x => x.Age); int count = await query.CountAsync(); long longCount = await query.LongCountAsync(); bool any = await query.AnyAsync(x => x.Age > 30); bool all = await query.AllAsync(x => x.Age > 30); Ignite-specific IResultSet Underlying IResultSet can be obtained via IgniteQueryableExtensions.ToResultSetAsync() extension method: await using IResultSet<Person> resultSet = await query.ToResultSetAsync(); Console.WriteLine(resultSet.Metadata); var rows = resultSet.CollectAsync(...); Obtaining IResultSet can be useful for access to metadata and CollectAsync method, which provides more control over result materialization. Supported LINQ Features Projections Projection is the process of converting query results into a different type. Among other things, projections are used to select a subset of columns. For example, Person table may have many columns, but we only need Name and Age. First, create a projection class: public record PersonInfo(string Name, int Age); Then, use Select to project query results: List<PersonInfo> result = query .Select(x => new PersonInfo(x.Name, x.Age)) .ToList(); Resulting SQL will select only those two columns, avoiding overfetching (overfetching is a common issue when ORM-generated query includes all table columns, but only a few of them are needed by the business logic). Ignite also supports anonymous type projections: var result = query.Select(x => new { x.Name, x.Age }).ToList(); Inner Joins Use standard Join method to perform joins on other tables: var customerQuery = customerTable.GetRecordView<Customer>().AsQueryable(); var orderQuery = orderTable.GetRecordView<Order>().AsQueryable(); var ordersByCustomer = customerQuery .Join(orderQuery, cust => cust.Id, order => order.CustId, (cust, order) => new { cust.Name, order.Amount }) .ToList(); Outer Joins Outer joins are supported via DefaultIfEmpty method. For example, not every book in a library is borrowed by a student, so a left outer join is used to retrieve all books and their current borrowers (if any): var bookQuery = bookTable.GetRecordView<Book>().AsQueryable(); var studentQuery = studentTable.GetRecordView<Student>().AsQueryable(); var booksWithStudents = bookQuery .Join(studentQuery.DefaultIfEmpty(), book => book.StudentId, student => student.Id, (book, student) => new { book.Title, student.Name }) .ToList(); Grouping Single column: var bookCountByAuthor = bookTable.GetRecordView<Book>().AsQueryable() .GroupBy(book => book.Author) .Select(grp => new { Author = grp.Key, Count = x.Count() }) .ToList(); Multiple columns - use anonymous type: var bookCountByAuthorAndYear = bookTable.GetRecordView<Book>().AsQueryable() .GroupBy(book => new { book.Author, book.Year }) .Select(grp => new { Author = grp.Key.Author, Year = grp.Key.Year, Count = x.Count() }) .ToList(); Aggregate functions Count, Sum, Min, Max, Average can be used with groupings. Ordering OrderBy, OrderByDescending, ThenBy, ThenByDescending are supported. Combine them to order by multiple columns: var booksOrderedByAuthorAndYear = bookTable.GetRecordView<Book>().AsQueryable() .OrderBy(book => book.Author) .ThenByDescending(book => book.Year) .ToList(); Aggregates All aggregate functions are supported: Count, Sum, Min, Max, Average. Async variants are available in IgniteQueryableExtensions. See examples in \"Single Result Functions\" above. Union, Intersect, Except Multiple result sets can be combined using Union, Intersect, Except methods. IQueryable<string> employeeEmails = employeeTable.GetRecordView<Employee>().AsQueryable() .Select(x => x.Email); IQueryable<string> customerEmails = customerTable.GetRecordView<Customer>().AsQueryable() .Select(x => x.Email); List<string> allEmails = employeeEmails.Union(customerEmails) .OrderBy(x => x) .ToList(); List<string> employeesThatAreCustomers = employeeEmails.Intersect(customerEmails).ToList(); Math Functions The following Math functions are supported (will be translated to SQL equivalents): Abs, Cos, Cosh, Acos, Sin, Sinh, Asin, Tan, Tanh, Atan, Ceiling, Floor, Exp, Log, Log10, Pow, Round, Sign, Sqrt, Truncate. The following Math functions are NOT supported (no equivalent in Ignite SQL engine): Acosh, Asinh, Atanh, Atan2, Log2, Log(x, y). Example: var triangles = table.GetRecordView<Triangle>().AsQueryable() .Select(t => new { Hypotenuse, Opposite = t.Hypotenuse * Math.Sin(t.Angle), Adjacent = t.Hypotenuse * Math.Cos(t.Angle) }) .ToList(); String Functions string.Compare(string), string.Compare(string, bool ignoreCase), concatenation s1 + s2 + s3, ToUpper, ToLower, Substring(start), Substring(start, len), Trim, Trim(char), TrimStart, TrimStart(char), TrimEnd, TrimEnd(char), Contains, StartsWith, EndsWith, IndexOf, Length, Replace. Example: List<string> fullNames = table.GetRecordView<Person>().AsQueryable() .Where(p => p.FirstName.StartsWith(\"Jo\")) .Select(p => new { FullName = p.FirstName.ToUpper() + \" \" + p.LastName.ToLower() }) .ToList(); Regular Expressions Regex.Replace is translated to regexp_replace function. List<string> addresses = table.GetRecordView<Person>().AsQueryable() .Select(p => new { Address = Regex.Replace(p.Address, @\"(\\d+)\", \"[$1]\") .ToList(); Keep in mind that regex engine within SQL may behave differently from .NET regex engine. DML (Bulk Update and Delete) Bulk update and delete with optional conditions are supported via ExecuteUpdateAsync and ExecuteDeleteAsync extensions methods on IQueryable<T>: var orders = orderTable.GetRecordView<Order>().AsQueryable(); await orders.Where(x => x.Amount == 0).ExecuteDeleteAsync(); Update statement can set properties to constant values or to an expression based on other properties of the same row: var orders = orderTable.GetRecordView<Order>().AsQueryable(); await orders .Where(x => x.CustomerId == customerId) .ExecuteUpdateAsync( order => order.SetProperty(x => x.Discount, 0.1m) .SetProperty(x => x.Note, x => x.Note + \" Happy birthday, \" + x.CustomerName)); Resulting SQL: update PUBLIC.tbl1 as _T0 set NOTE = concat(concat(_T0.NOTE, ?), _T0.CUSTOMERNAME), DISCOUNT = ? where (_T0.CUSTOMERID IS NOT DISTINCT FROM ?) Composing Queries IQueryable<T> expressions can be composed dynamically. A common use case is to compose a query based on user input. For example, optional filters on different columns can be applied to a query: public List<Book> GetBooks(string? author, int? year) { IQueryable<Book> query = bookTable.GetRecordView<Book>().AsQueryable(); if (!string.IsNullOrEmpty(author)) query = query.Where(x => x.Author == author); if (year != null) query = query.Where(x => x.Year == year); return query.ToList(); } Column Name Mapping Unless custom mapping is provided with [Column], LINQ provider will use property or field names as column names, using unquoted identifiers, which are case-insensitive. C# bookTable.GetRecordView<Book>().AsQueryable().Select(x => x.Author).ToList(); Resulting SQL select _T0.AUTHOR from PUBLIC.books as _T0 To use quoted identifiers, or to map column names to different property names, use [Column] attribute: public class Book { [Column(\"book_author\")] public string Author { get; set; } } // Or a record: public record Book([property: Column(\"book_author\")] string Author); Resulting SQL select _T0.\"book_author\" from PUBLIC.books as _T0 KeyValueView All examples above use IRecordView<T> to perform queries; LINQ provider supports IKeyValueView<TK, TV> equally well: IQueryable<KeyValuePair<int, Book>> query = bookTable.GetKeyValueView<int, Book>().AsQueryable(); List<Book> books = query .Where(x => x.Key > 10) .Select(x => x.Value) .ToList(); Performance Considerations Our benchmarks indicate that in real-world scenarios LINQ queries are on par with equivalent SQL queries. However, a small overhead still exists (due to query translation), and your mileage may vary depending on the query complexity, so it's recommended to measure the performance of your queries."
  },
  "index.html": {
    "href": "index.html",
    "title": "Apache Ignite 3 .NET Client | Apache Ignite.NET API Documentation",
    "keywords": "Apache Ignite 3 .NET Client .NET client for Apache Ignite - a distributed database for high‑performance applications with in‑memory speed. Key Features Full support of all Ignite APIs: SQL, Transactions, Key/Value, Compute. Connects to any number of Ignite nodes at the same time. Partition awareness: sends key-based requests to the right node. Load-balancing, failover, automatic reconnection and request retries. Built-in LINQ provider for strongly-typed SQL queries. Integrates with NodaTime to provide precise mapping to Ignite date/time types. Logging and metrics. High performance and fully asynchronous. Getting Started Below are a few examples of basic usage to get you started: // Connect to the cluster. var cfg = new IgniteClientConfiguration(\"127.0.0.1:10800\"); IIgniteClient client = await IgniteClient.StartAsync(cfg); // Start a read-only transaction. await using var tx = await client.Transactions.BeginAsync( new TransactionOptions { ReadOnly = true }); // Get table by name. ITable? table = await client.Tables.GetTableAsync(\"Person\"); // Get a strongly-typed view of table data using Person record. IRecordView<Person> view = table!.GetRecordView<Person>(); // Upsert a record with KV (NoSQL) API. await view.UpsertAsync(tx, new Person(1, \"John\")); // Query data with SQL. await using var resultSet = await client.Sql.ExecuteAsync<Person>( tx, \"SELECT * FROM Person\"); List<Person> sqlResults = await resultSet.ToListAsync(); // Query data with LINQ. List<string> names = view.AsQueryable(tx) .OrderBy(person => person.Name) .Select(person => person.Name) .ToList(); // Execute a distributed computation. IList<IClusterNode> nodes = await client.GetClusterNodesAsync(); int wordCount = await client.Compute.ExecuteAsync<int>( nodes, \"org.foo.bar.WordCountTask\", \"Hello, world!\"); API Walkthrough Configuration IgniteClientConfiguration is used to configure connections properties (endpoints, SSL), retry policy, logging, and timeouts. var cfg = new IgniteClientConfiguration { // Connect to multiple servers. Endpoints = { \"server1:10800\", \"server2:10801\" }, // Enable TLS. SslStreamFactory = new SslStreamFactory { SslClientAuthenticationOptions = new SslClientAuthenticationOptions { // Allow self-signed certificates. RemoteCertificateValidationCallback = (sender, certificate, chain, errors) => true } }, // Retry all read operations in case of network issues. RetryPolicy = new RetryReadPolicy { RetryLimit = 32 } }; SQL SQL is the primary API for data access. It is used to create, drop, and query tables, as well as to insert, update, and delete data. using var client = await IgniteClient.StartAsync(new(\"localhost\")); await client.Sql.ExecuteAsync( null, \"CREATE TABLE Person (Id INT PRIMARY KEY, Name VARCHAR)\"); await client.Sql.ExecuteAsync( null, \"INSERT INTO Person (Id, Name) VALUES (1, 'John Doe')\"); await using var resultSet = await client.Sql.ExecuteAsync( null, \"SELECT Name FROM Person\"); await foreach (IIgniteTuple row in resultSet) Console.WriteLine(row[0]); Mapping SQL Results to User Types SQL results can be mapped to user types using ExecuteAsync<T> method. This is cleaner and more efficient than IIgniteTuple approach above. await using var resultSet = await client.Sql.ExecuteAsync<Person>( null, \"SELECT Name FROM Person\"); await foreach (Person p in resultSet) Console.WriteLine(p.Name); public record Person(int Id, string Name); Column names are matched to record properties by name. To map columns to properties with different names, use ColumnAttribute. DbDataReader (ADO.NET API) Another way to work with query results is System.Data.Common.DbDataReader, which can be obtained with ExecuteReaderAsync method. For example, you can bind query results to a DataGridView control: await using var reader = await Client.Sql.ExecuteReaderAsync( null, \"select * from Person\"); var dt = new DataTable(); dt.Load(reader); dataGridView1.DataSource = dt; NoSQL NoSQL API is used to store and retrieve data in a key/value fashion. It can be more efficient than SQL in certain scenarios. Existing tables can be accessed, but new tables can only be created with SQL. First, get a table by name: ITable? table = await client.Tables.GetTableAsync(\"Person\"); Then, there are two ways to look at the data. Record View Record view represents the entire row as a single object. It can be an IIgniteTuple or a user-defined type. IRecordView<IIgniteTuple> binaryView = table.RecordBinaryView; IRecordView<Person> view = table.GetRecordView<Person>(); await view.UpsertAsync(null, new Person(1, \"John\")); KeyValue View Key/Value view splits the row into key and value parts. IKeyValueView<IIgniteTuple, IIgniteTuple> kvBinaryView = table.KeyValueBinaryView; IKeyValueView<PersonKey, Person> kvView = table.GetKeyValueView<PersonKey, Person>(); await kvView.PutAsync(null, new PersonKey(1), new Person(\"John\")); LINQ Data can be queried and modified with LINQ using AsQueryable method. LINQ expressions are translated to SQL queries and executed on the server. ITable? table = await client.Tables.GetTableAsync(\"Person\"); IRecordView<Person> view = table!.GetRecordView<Person>(); IQueryable<string> query = view.AsQueryable() .Where(p => p.Id > 100) .Select(p => p.Name); List<string> names = await query.ToListAsync(); Generated SQL can be retrieved with ToQueryString extension method, or by enabling debug logging. Bulk update and delete with optional conditions are supported via ExecuteUpdateAsync and ExecuteDeleteAsync extensions methods on IQueryable<T> Transactions All operations on data in Ignite are transactional. If a transaction is not specified, an explicit transaction is started and committed automatically. To start a transaction, use ITransactions.BeginAsync method. Then, pass the transaction object to all operations that should be part of the same transaction. ITransaction tx = await client.Transactions.BeginAsync(); await view.UpsertAsync(tx, new Person(1, \"John\")); await client.Sql.ExecuteAsync( tx, \"INSERT INTO Person (Id, Name) VALUES (2, 'Jane')\"); await view.AsQueryable(tx) .Where(p => p.Id > 0) .ExecuteUpdateAsync(p => new Person(p.Id, p.Name + \" Doe\")); await tx.CommitAsync(); Compute Compute API is used to execute distributed computations on the cluster. Compute jobs should be implemented in Java, deployed to server nodes, and called by the full class name. IList<IClusterNode> nodes = await client.GetClusterNodesAsync(); string result = await client.Compute.ExecuteAsync<string>( nodes, \"org.acme.tasks.MyTask\", \"Task argument 1\", \"Task argument 2\"); Failover, Retry, Reconnect, Load Balancing Ignite client implements a number of features to improve reliability and performance: When multiple endpoints are configured, the client will maintain connections to all of them, and load balance requests between them. If a connection is lost, the client will try to reconnect, assuming it may be a temporary network issue or a node restart. Periodic heartbeat messages are used to detect connection issues early. If a user request fails due to a connection issue, the client will retry it automatically according to the configured IgniteClientConfiguration.RetryPolicy. Logging To enable logging, set IgniteClientConfiguration.LoggerFactory property. It uses the standard Microsoft.Extensions.Logging API. For example, to log to console (requires Microsoft.Extensions.Logging.Console package): var cfg = new IgniteClientConfiguration { LoggerFactory = LoggerFactory.Create(builder => builder.AddConsole().SetMinimumLevel(LogLevel.Debug)) }; Or with Serilog (requires Serilog.Extensions.Logging and Serilog.Sinks.Console packages): var cfg = new IgniteClientConfiguration { LoggerFactory = LoggerFactory.Create(builder => builder.AddSerilog(new LoggerConfiguration() .MinimumLevel.Debug() .WriteTo.Console() .CreateLogger())) }; Metrics Ignite client exposes a number of metrics with Apache.Ignite meter name through the System.Diagnostics.Metrics API that can be used to monitor system health and performance. For example, dotnet-counters tool can be used like this: dotnet-counters monitor --counters Apache.Ignite,System.Runtime --process-id PID Documentation Full documentation is available at https://ignite.apache.org/docs. Feedback Use any of the following channels to provide feedback: user@ignite.apache.org https://stackoverflow.com/questions/tagged/ignite https://github.com/apache/ignite-3/issues"
  }
}