{
  "api/Apache.Ignite.BasicAuthenticator.html": {
    "href": "api/Apache.Ignite.BasicAuthenticator.html",
    "title": "Class BasicAuthenticator | Apache Ignite.NET API Documentation",
    "keywords": "Class BasicAuthenticator Namespace Apache.Ignite Assembly Apache.Ignite.dll Basic authenticator with username and password. Credentials are sent to the server in plain text, unless SSL/TLS is enabled - see SslStreamFactory. public sealed class BasicAuthenticator : IAuthenticator Inheritance object BasicAuthenticator Implements IAuthenticator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Properties Identity Gets the identity. public object Identity { get; } Property Value object Password Gets or sets the password. public string Password { get; set; } Property Value string Secret Gets the secret. public object Secret { get; } Property Value object Type Gets the authenticator type. public string Type { get; } Property Value string Username Gets or sets the username. public string Username { get; set; } Property Value string Methods ToString() public override string ToString() Returns string"
  },
  "api/Apache.Ignite.ClientOperationType.html": {
    "href": "api/Apache.Ignite.ClientOperationType.html",
    "title": "Enum ClientOperationType | Apache Ignite.NET API Documentation",
    "keywords": "Enum ClientOperationType Namespace Apache.Ignite Assembly Apache.Ignite.dll Client operation type. public enum ClientOperationType Fields ComputeExecute = 18 Compute (ExecuteAsync<T>(IEnumerable<IClusterNode>, string, params object?[]?), BroadcastAsync<T>(IEnumerable<IClusterNode>, string, params object?[]?)). SqlExecute = 19 SQL (ExecuteAsync(ITransaction?, SqlStatement, params object?[]?), ExecuteAsync<T>(ITransaction?, SqlStatement, params object?[]?)). TableGet = 1 Get table (GetTableAsync(string)). TablesGet = 0 Get tables (GetTablesAsync()). TupleContainsKey = 17 Contains key (ContainsAsync(ITransaction?, TK)). TupleDelete = 12 Delete (DeleteAsync(ITransaction?, T)). TupleDeleteAll = 13 Delete All (DeleteAllAsync(ITransaction?, IEnumerable<T>)). TupleDeleteAllExact = 15 Delete All Exact (DeleteAllExactAsync(ITransaction?, IEnumerable<T>)). TupleDeleteExact = 14 Delete Exact (DeleteExactAsync(ITransaction?, T)). TupleGet = 3 Get (GetAsync(ITransaction?, T)). TupleGetAll = 5 Get All (GetAllAsync(ITransaction?, IEnumerable<T>)). TupleGetAndDelete = 16 Get and Delete (GetAndDeleteAsync(ITransaction?, T)). TupleGetAndReplace = 11 Get and Replace (GetAndReplaceAsync(ITransaction?, T)). TupleGetAndUpsert = 6 Get and Upsert (GetAndUpsertAsync(ITransaction?, T)). TupleInsert = 7 Insert (InsertAsync(ITransaction?, T)). TupleInsertAll = 8 Insert All (InsertAllAsync(ITransaction?, IEnumerable<T>)). TupleReplace = 9 Replace (ReplaceAsync(ITransaction?, T)). TupleReplaceExact = 10 Replace Exact (ReplaceAsync(ITransaction?, T, T)). TupleUpsert = 2 Upsert (UpsertAsync(ITransaction?, T)). TupleUpsertAll = 4 Upsert (UpsertAllAsync(ITransaction?, IEnumerable<T>))."
  },
  "api/Apache.Ignite.Compute.html": {
    "href": "api/Apache.Ignite.Compute.html",
    "title": "Namespace Apache.Ignite.Compute | Apache Ignite.NET API Documentation",
    "keywords": "Namespace Apache.Ignite.Compute Interfaces ICompute Ignite Compute API provides distributed job execution functionality."
  },
  "api/Apache.Ignite.Compute.ICompute.html": {
    "href": "api/Apache.Ignite.Compute.ICompute.html",
    "title": "Interface ICompute | Apache Ignite.NET API Documentation",
    "keywords": "Interface ICompute Namespace Apache.Ignite.Compute Assembly Apache.Ignite.dll Ignite Compute API provides distributed job execution functionality. public interface ICompute Methods BroadcastAsync<T>(IEnumerable<IClusterNode>, string, params object?[]?) Executes a compute job represented by the given class on all of the specified nodes. IDictionary<IClusterNode, Task<T>> BroadcastAsync<T>(IEnumerable<IClusterNode> nodes, string jobClassName, params object?[]? args) Parameters nodes IEnumerable<IClusterNode> Nodes to use for the job execution. jobClassName string Java class name of the job to execute. args object[] Job arguments. Returns IDictionary<IClusterNode, Task<T>> A map of Task representing the asynchronous operation for every node. Type Parameters T Job result type. ExecuteAsync<T>(IEnumerable<IClusterNode>, string, params object?[]?) Executes a compute job represented by the given class on one of the specified nodes. Task<T> ExecuteAsync<T>(IEnumerable<IClusterNode> nodes, string jobClassName, params object?[]? args) Parameters nodes IEnumerable<IClusterNode> Nodes to use for the job execution. jobClassName string Java class name of the job to execute. args object[] Job arguments. Returns Task<T> A Task representing the asynchronous operation. Type Parameters T Job result type. ExecuteColocatedAsync<T>(string, IIgniteTuple, string, params object?[]?) Executes a job represented by the given class on one node where the given key is located. Task<T> ExecuteColocatedAsync<T>(string tableName, IIgniteTuple key, string jobClassName, params object?[]? args) Parameters tableName string Name of the table to be used with key to determine target node. key IIgniteTuple Table key to be used to determine the target node for job execution. jobClassName string Java class name of the job to execute. args object[] Job arguments. Returns Task<T> A Task representing the asynchronous operation. Type Parameters T Job result type. ExecuteColocatedAsync<T, TKey>(string, TKey, string, params object?[]?) Executes a job represented by the given class on one node where the given key is located. Task<T> ExecuteColocatedAsync<T, TKey>(string tableName, TKey key, string jobClassName, params object?[]? args) where TKey : notnull Parameters tableName string Name of the table to be used with key to determine target node. key TKey Table key to be used to determine the target node for job execution. jobClassName string Java class name of the job to execute. args object[] Job arguments. Returns Task<T> A Task representing the asynchronous operation. Type Parameters T Job result type. TKey Key type."
  },
  "api/Apache.Ignite.ErrorGroups.html": {
    "href": "api/Apache.Ignite.ErrorGroups.html",
    "title": "Class ErrorGroups | Apache Ignite.NET API Documentation",
    "keywords": "Class ErrorGroups Namespace Apache.Ignite Assembly Apache.Ignite.dll Represents a concept of error group. Error group defines a collection of errors that belong to a single semantic component. Each group can be identified by a name and an integer number that both must be unique across all error groups. public static class ErrorGroups Inheritance object ErrorGroups Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ErrPrefix Ignite error prefix. public const string ErrPrefix = \"IGN-\" Field Value string UnknownGroupName Unknown error group name. public const string UnknownGroupName = \"UNKNOWN\" Field Value string Methods GetErrorCode(int) Gets error code extracted from the given full error code. public static int GetErrorCode(int fullCode) Parameters fullCode int Full error code. Returns int Error code. GetFullCode(int, int) Gets the full error code from group and error codes. public static int GetFullCode(int groupCode, int errorCode) Parameters groupCode int Group code. errorCode int Error code. Returns int Combined code. GetGroupCode(int) Returns group code extracted from the given full error code. public static int GetGroupCode(int fullCode) Parameters fullCode int Full error code. Returns int Group code."
  },
  "api/Apache.Ignite.html": {
    "href": "api/Apache.Ignite.html",
    "title": "Namespace Apache.Ignite | Apache Ignite.NET API Documentation",
    "keywords": "Namespace Apache.Ignite Classes BasicAuthenticator Basic authenticator with username and password. Credentials are sent to the server in plain text, unless SSL/TLS is enabled - see SslStreamFactory. ErrorGroups Represents a concept of error group. Error group defines a collection of errors that belong to a single semantic component. Each group can be identified by a name and an integer number that both must be unique across all error groups. IgniteClient Ignite client builder. IgniteClientConfiguration Ignite client driver configuration. IgniteClientConnectionException Ignite thin client exception. IgniteClientException Ignite thin client exception. IgniteException Ignite exception. Option Static helpers for Option<T>. RetryLimitPolicy Retry policy that returns true when Iteration is less than the specified RetryLimit, or the limit is zero or less. RetryNonePolicy Retry policy that always returns false. RetryReadPolicy Retry policy that returns true for all read-only operations that do not modify data. SslStreamFactory Standard SSL stream factory. Can be used with or without client-side certificates. Structs Option<T> A wrapper that may or may not contain a value of type T. Interfaces IAuthenticator Ignite client authenticator. Provides authentication information during server handshake. IIgnite Ignite API entry point. Implementation can be a thin client (see IIgniteClient and StartAsync(IgniteClientConfiguration)), or a direct IPC connection for server-side functionality like compute. IIgniteClient Ignite client. Extends IIgnite with client-specific functionality. IRetryPolicy Client retry policy determines whether client operations that have failed due to a connection issue should be retried. IRetryPolicyContext Retry policy context. See ShouldRetry(IRetryPolicyContext). ISslStreamFactory SSL Stream Factory defines how SSL connection is established. See SslStreamFactory, SslStreamFactory. Enums ClientOperationType Client operation type."
  },
  "api/Apache.Ignite.IAuthenticator.html": {
    "href": "api/Apache.Ignite.IAuthenticator.html",
    "title": "Interface IAuthenticator | Apache Ignite.NET API Documentation",
    "keywords": "Interface IAuthenticator Namespace Apache.Ignite Assembly Apache.Ignite.dll Ignite client authenticator. Provides authentication information during server handshake. public interface IAuthenticator Properties Identity Gets the identity. object Identity { get; } Property Value object Secret Gets the secret. object Secret { get; } Property Value object Type Gets the authenticator type. string Type { get; } Property Value string"
  },
  "api/Apache.Ignite.IgniteClient.html": {
    "href": "api/Apache.Ignite.IgniteClient.html",
    "title": "Class IgniteClient | Apache Ignite.NET API Documentation",
    "keywords": "Class IgniteClient Namespace Apache.Ignite Assembly Apache.Ignite.dll Ignite client builder. public static class IgniteClient Inheritance object IgniteClient Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods StartAsync(IgniteClientConfiguration) Starts the client. public static Task<IIgniteClient> StartAsync(IgniteClientConfiguration configuration) Parameters configuration IgniteClientConfiguration Configuration. Returns Task<IIgniteClient> Started client."
  },
  "api/Apache.Ignite.IgniteClientConfiguration.html": {
    "href": "api/Apache.Ignite.IgniteClientConfiguration.html",
    "title": "Class IgniteClientConfiguration | Apache Ignite.NET API Documentation",
    "keywords": "Class IgniteClientConfiguration Namespace Apache.Ignite Assembly Apache.Ignite.dll Ignite client driver configuration. public sealed record IgniteClientConfiguration : IEquatable<IgniteClientConfiguration> Inheritance object IgniteClientConfiguration Implements IEquatable<IgniteClientConfiguration> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors IgniteClientConfiguration() Initializes a new instance of the IgniteClientConfiguration class. public IgniteClientConfiguration() IgniteClientConfiguration(IgniteClientConfiguration) Initializes a new instance of the IgniteClientConfiguration class. public IgniteClientConfiguration(IgniteClientConfiguration other) Parameters other IgniteClientConfiguration Other configuration. IgniteClientConfiguration(params string[]) Initializes a new instance of the IgniteClientConfiguration class. public IgniteClientConfiguration(params string[] endpoints) Parameters endpoints string[] Endpoints. Fields DefaultHeartbeatInterval Default heartbeat interval. public static readonly TimeSpan DefaultHeartbeatInterval Field Value TimeSpan DefaultPort Default port. public const int DefaultPort = 10800 Field Value int DefaultReconnectInterval Default reconnect interval. public static readonly TimeSpan DefaultReconnectInterval Field Value TimeSpan DefaultSocketTimeout Default socket timeout. public static readonly TimeSpan DefaultSocketTimeout Field Value TimeSpan Properties Authenticator Gets or sets the authenticator. When null, no authentication is performed. See BasicAuthenticator. public IAuthenticator? Authenticator { get; set; } Property Value IAuthenticator Endpoints Gets endpoints to connect to. Providing addresses of multiple nodes in the cluster will improve performance: Ignite will balance requests across all connections, and use partition awareness to send key-based requests directly to the primary node. Examples of supported formats: * 192.168.1.25 (default port is used, see DefaultPort). * 192.168.1.25:780 (custom port) * 192.168.1.25:780..787 (custom port range) * my-host.com (default port is used, see DefaultPort). * my-host.com:780 (custom port) * my-host.com:780..787 (custom port range). public IList<string> Endpoints { get; } Property Value IList<string> HeartbeatInterval Gets or sets the heartbeat message interval. Default is DefaultHeartbeatInterval. When server-side idle timeout is not zero, effective heartbeat interval is set to Min(HeartbeatInterval, IdleTimeout / 3). When client connection is idle (no operations are performed), heartbeat messages are sent periodically to keep the connection alive and detect potential half-open state. public TimeSpan HeartbeatInterval { get; set; } Property Value TimeSpan Logger Gets or sets the logger. public IIgniteLogger? Logger { get; set; } Property Value IIgniteLogger ReconnectInterval Gets or sets the background reconnect interval. Default is DefaultReconnectInterval. Set to Zero to disable periodic reconnect. Ignite balances requests across all healthy connections (when multiple endpoints are configured). Ignite also repairs connections on demand (when a request is made). However, \"secondary\" connections can be lost (due to network issues, or node restarts). This property controls how ofter Ignite client will check all configured endpoints and try to reconnect them in case of failure. public TimeSpan ReconnectInterval { get; set; } Property Value TimeSpan RetryPolicy Gets or sets the retry policy. When a request fails due to a connection error, Ignite will retry the request if the specified policy allows it. Default is RetryReadPolicy - retry read operations up to DefaultRetryLimit times. See also RetryLimitPolicy, RetryReadPolicy, RetryNonePolicy, RetryLimit. public IRetryPolicy RetryPolicy { get; set; } Property Value IRetryPolicy SocketTimeout Gets or sets the socket timeout. The timeout applies to the initial handshake procedure and heartbeats (see HeartbeatInterval). If the server does not respond to the initial handshake message or a periodic heartbeat in the specified time, the connection is closed with a TimeoutException. -1 means infinite timeout. public TimeSpan SocketTimeout { get; set; } Property Value TimeSpan SslStreamFactory Gets or sets the SSL stream factory. When not null, secure socket connection will be established. See SslStreamFactory. public ISslStreamFactory? SslStreamFactory { get; set; } Property Value ISslStreamFactory"
  },
  "api/Apache.Ignite.IgniteClientConnectionException.html": {
    "href": "api/Apache.Ignite.IgniteClientConnectionException.html",
    "title": "Class IgniteClientConnectionException | Apache Ignite.NET API Documentation",
    "keywords": "Class IgniteClientConnectionException Namespace Apache.Ignite Assembly Apache.Ignite.dll Ignite thin client exception. [Serializable] public class IgniteClientConnectionException : IgniteClientException, ISerializable Inheritance object Exception IgniteException IgniteClientException IgniteClientConnectionException Implements ISerializable Inherited Members IgniteException.GroupName IgniteException.Code IgniteException.TraceId IgniteException.ErrorCode IgniteException.CodeAsString IgniteException.GetObjectData(SerializationInfo, StreamingContext) Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors IgniteClientConnectionException(Guid, int, string, Exception?) Initializes a new instance of the IgniteClientConnectionException class. public IgniteClientConnectionException(Guid traceId, int code, string message, Exception? innerException = null) Parameters traceId Guid Trace id. code int Code. message string Message. innerException Exception Inner exception. IgniteClientConnectionException(int, string, Exception?) Initializes a new instance of the IgniteClientConnectionException class. public IgniteClientConnectionException(int code, string message, Exception? innerException = null) Parameters code int Code. message string Message. innerException Exception Inner exception. IgniteClientConnectionException(SerializationInfo, StreamingContext) Initializes a new instance of the IgniteClientConnectionException class. protected IgniteClientConnectionException(SerializationInfo serializationInfo, StreamingContext streamingContext) Parameters serializationInfo SerializationInfo Serialization information. streamingContext StreamingContext Streaming context."
  },
  "api/Apache.Ignite.IgniteClientException.html": {
    "href": "api/Apache.Ignite.IgniteClientException.html",
    "title": "Class IgniteClientException | Apache Ignite.NET API Documentation",
    "keywords": "Class IgniteClientException Namespace Apache.Ignite Assembly Apache.Ignite.dll Ignite thin client exception. [Serializable] public class IgniteClientException : IgniteException, ISerializable Inheritance object Exception IgniteException IgniteClientException Implements ISerializable Derived IgniteClientConnectionException Inherited Members IgniteException.GroupName IgniteException.Code IgniteException.TraceId IgniteException.ErrorCode IgniteException.CodeAsString IgniteException.GetObjectData(SerializationInfo, StreamingContext) Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors IgniteClientException(Guid, int, string, Exception?) Initializes a new instance of the IgniteClientException class. public IgniteClientException(Guid traceId, int code, string message, Exception? innerException = null) Parameters traceId Guid Trace id. code int Code. message string Message. innerException Exception Inner exception. IgniteClientException(int, string, Exception?) Initializes a new instance of the IgniteClientException class. public IgniteClientException(int code, string message, Exception? innerException = null) Parameters code int Code. message string Message. innerException Exception Inner exception. IgniteClientException(SerializationInfo, StreamingContext) Initializes a new instance of the IgniteClientException class. protected IgniteClientException(SerializationInfo serializationInfo, StreamingContext streamingContext) Parameters serializationInfo SerializationInfo Serialization information. streamingContext StreamingContext Streaming context."
  },
  "api/Apache.Ignite.IgniteException.html": {
    "href": "api/Apache.Ignite.IgniteException.html",
    "title": "Class IgniteException | Apache Ignite.NET API Documentation",
    "keywords": "Class IgniteException Namespace Apache.Ignite Assembly Apache.Ignite.dll Ignite exception. [Serializable] public class IgniteException : Exception, ISerializable Inheritance object Exception IgniteException Implements ISerializable Derived IgniteClientException Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors IgniteException(Guid, int, string?, Exception?) Initializes a new instance of the IgniteException class. public IgniteException(Guid traceId, int code, string? message, Exception? innerException = null) Parameters traceId Guid Trace id. code int Code. message string Message. innerException Exception Inner exception. IgniteException(SerializationInfo, StreamingContext) Initializes a new instance of the IgniteException class. protected IgniteException(SerializationInfo serializationInfo, StreamingContext streamingContext) Parameters serializationInfo SerializationInfo Serialization information. streamingContext StreamingContext Streaming context. Properties Code Gets the full exception code. public int Code { get; } Property Value int CodeAsString Gets the code as string. public string CodeAsString { get; } Property Value string ErrorCode Gets the error code. public int ErrorCode { get; } Property Value int GroupName Gets the group name. public string GroupName { get; } Property Value string TraceId Gets the trace id (correlation id). public Guid TraceId { get; } Property Value Guid Methods GetObjectData(SerializationInfo, StreamingContext) public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo context StreamingContext"
  },
  "api/Apache.Ignite.IIgnite.html": {
    "href": "api/Apache.Ignite.IIgnite.html",
    "title": "Interface IIgnite | Apache Ignite.NET API Documentation",
    "keywords": "Interface IIgnite Namespace Apache.Ignite Assembly Apache.Ignite.dll Ignite API entry point. Implementation can be a thin client (see IIgniteClient and StartAsync(IgniteClientConfiguration)), or a direct IPC connection for server-side functionality like compute. public interface IIgnite Properties Compute Gets the compute API. ICompute Compute { get; } Property Value ICompute Sql Gets the SQL API. ISql Sql { get; } Property Value ISql Tables Gets the tables API. ITables Tables { get; } Property Value ITables Transactions Gets the transactions API. ITransactions Transactions { get; } Property Value ITransactions Methods GetClusterNodesAsync() Gets the cluster nodes. NOTE: Temporary API to enable Compute until we have proper Cluster API. Task<IList<IClusterNode>> GetClusterNodesAsync() Returns Task<IList<IClusterNode>> A Task representing the asynchronous operation."
  },
  "api/Apache.Ignite.IIgniteClient.html": {
    "href": "api/Apache.Ignite.IIgniteClient.html",
    "title": "Interface IIgniteClient | Apache Ignite.NET API Documentation",
    "keywords": "Interface IIgniteClient Namespace Apache.Ignite Assembly Apache.Ignite.dll Ignite client. Extends IIgnite with client-specific functionality. public interface IIgniteClient : IIgnite, IDisposable Inherited Members IIgnite.Tables IIgnite.Transactions IIgnite.Compute IIgnite.Sql IIgnite.GetClusterNodesAsync() IDisposable.Dispose() Properties Configuration Gets the configuration. IgniteClientConfiguration Configuration { get; } Property Value IgniteClientConfiguration Methods GetConnections() Gets active connections. IList<IConnectionInfo> GetConnections() Returns IList<IConnectionInfo> A list of connected cluster nodes."
  },
  "api/Apache.Ignite.IRetryPolicy.html": {
    "href": "api/Apache.Ignite.IRetryPolicy.html",
    "title": "Interface IRetryPolicy | Apache Ignite.NET API Documentation",
    "keywords": "Interface IRetryPolicy Namespace Apache.Ignite Assembly Apache.Ignite.dll Client retry policy determines whether client operations that have failed due to a connection issue should be retried. public interface IRetryPolicy Methods ShouldRetry(IRetryPolicyContext) Gets a value indicating whether a client operation that has failed due to a connection issue should be retried. bool ShouldRetry(IRetryPolicyContext context) Parameters context IRetryPolicyContext Operation context. Returns bool true if the operation should be retried on another connection, false otherwise."
  },
  "api/Apache.Ignite.IRetryPolicyContext.html": {
    "href": "api/Apache.Ignite.IRetryPolicyContext.html",
    "title": "Interface IRetryPolicyContext | Apache Ignite.NET API Documentation",
    "keywords": "Interface IRetryPolicyContext Namespace Apache.Ignite Assembly Apache.Ignite.dll Retry policy context. See ShouldRetry(IRetryPolicyContext). public interface IRetryPolicyContext Properties Configuration Gets the client configuration. IgniteClientConfiguration Configuration { get; } Property Value IgniteClientConfiguration Exception Gets the exception that caused current retry iteration. Exception Exception { get; } Property Value Exception Iteration Gets the current iteration. int Iteration { get; } Property Value int Operation Gets the operation type. ClientOperationType Operation { get; } Property Value ClientOperationType"
  },
  "api/Apache.Ignite.ISslStreamFactory.html": {
    "href": "api/Apache.Ignite.ISslStreamFactory.html",
    "title": "Interface ISslStreamFactory | Apache Ignite.NET API Documentation",
    "keywords": "Interface ISslStreamFactory Namespace Apache.Ignite Assembly Apache.Ignite.dll SSL Stream Factory defines how SSL connection is established. See SslStreamFactory, SslStreamFactory. public interface ISslStreamFactory Methods CreateAsync(Stream, string) Creates the SSL stream. Task<SslStream?> CreateAsync(Stream stream, string targetHost) Parameters stream Stream The underlying raw stream. targetHost string Target host. Returns Task<SslStream> SSL stream, or null if SSL is not enabled."
  },
  "api/Apache.Ignite.Log.CategoryLogger.html": {
    "href": "api/Apache.Ignite.Log.CategoryLogger.html",
    "title": "Class CategoryLogger | Apache Ignite.NET API Documentation",
    "keywords": "Class CategoryLogger Namespace Apache.Ignite.Log Assembly Apache.Ignite.dll Wrapping logger with a predefined category. When Log(LogLevel, string, object?[]?, IFormatProvider?, string?, string?, Exception?) method is called, and category parameter is null, predefined category will be used. public sealed class CategoryLogger : IIgniteLogger Inheritance object CategoryLogger Implements IIgniteLogger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods LoggerExtensions.Debug(IIgniteLogger, Exception?, string, params object?[]?) LoggerExtensions.Debug(IIgniteLogger, Exception?, string) LoggerExtensions.Debug(IIgniteLogger, string, params object?[]?) LoggerExtensions.Debug(IIgniteLogger, string) LoggerExtensions.Error(IIgniteLogger, Exception?, string, params object?[]?) LoggerExtensions.Error(IIgniteLogger, Exception?, string) LoggerExtensions.Error(IIgniteLogger, string, params object?[]?) LoggerExtensions.Error(IIgniteLogger, string) LoggerExtensions.GetLogger(IIgniteLogger?, string) LoggerExtensions.GetLogger(IIgniteLogger?, Type) LoggerExtensions.Info(IIgniteLogger, Exception?, string, params object?[]?) LoggerExtensions.Info(IIgniteLogger, Exception?, string) LoggerExtensions.Info(IIgniteLogger, string, params object?[]?) LoggerExtensions.Info(IIgniteLogger, string) LoggerExtensions.Log(IIgniteLogger, LogLevel, Exception?, string, params object?[]?) LoggerExtensions.Log(IIgniteLogger, LogLevel, Exception?, string) LoggerExtensions.Log(IIgniteLogger, LogLevel, string, params object?[]?) LoggerExtensions.Log(IIgniteLogger, LogLevel, string) LoggerExtensions.Trace(IIgniteLogger, Exception?, string, params object?[]?) LoggerExtensions.Trace(IIgniteLogger, Exception?, string) LoggerExtensions.Trace(IIgniteLogger, string, params object?[]?) LoggerExtensions.Trace(IIgniteLogger, string) LoggerExtensions.Warn(IIgniteLogger, Exception?, string, params object?[]?) LoggerExtensions.Warn(IIgniteLogger, Exception?, string) LoggerExtensions.Warn(IIgniteLogger, string, params object?[]?) LoggerExtensions.Warn(IIgniteLogger, string) Constructors CategoryLogger(IIgniteLogger, string) Initializes a new instance of the CategoryLogger class. public CategoryLogger(IIgniteLogger logger, string category) Parameters logger IIgniteLogger The logger to wrap. category string The category. Properties Category Gets the category name. public string Category { get; } Property Value string Methods IsEnabled(LogLevel) Determines whether the specified log level is enabled. public bool IsEnabled(LogLevel level) Parameters level LogLevel The level. Returns bool Value indicating whether the specified log level is enabled. Log(LogLevel, string, object?[]?, IFormatProvider?, string?, string?, Exception?) Logs the specified message. public void Log(LogLevel level, string message, object?[]? args, IFormatProvider? formatProvider, string? category, string? nativeErrorInfo, Exception? ex) Parameters level LogLevel The level. message string The message. args object[] The arguments to format message. Can be null (formatting will not occur). formatProvider IFormatProvider The format provider. Can be null if args is null. category string The logging category name. nativeErrorInfo string The native error information. ex Exception The exception. Can be null. ToString() public override string ToString() Returns string"
  },
  "api/Apache.Ignite.Log.ConsoleLogger.html": {
    "href": "api/Apache.Ignite.Log.ConsoleLogger.html",
    "title": "Class ConsoleLogger | Apache Ignite.NET API Documentation",
    "keywords": "Class ConsoleLogger Namespace Apache.Ignite.Log Assembly Apache.Ignite.dll Logs to Console. Simple logger implementation without dependencies, provided out of the box for convenience. For anything more complex please use NLog/log4net integrations. public sealed class ConsoleLogger : IIgniteLogger Inheritance object ConsoleLogger Implements IIgniteLogger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods LoggerExtensions.Debug(IIgniteLogger, Exception?, string, params object?[]?) LoggerExtensions.Debug(IIgniteLogger, Exception?, string) LoggerExtensions.Debug(IIgniteLogger, string, params object?[]?) LoggerExtensions.Debug(IIgniteLogger, string) LoggerExtensions.Error(IIgniteLogger, Exception?, string, params object?[]?) LoggerExtensions.Error(IIgniteLogger, Exception?, string) LoggerExtensions.Error(IIgniteLogger, string, params object?[]?) LoggerExtensions.Error(IIgniteLogger, string) LoggerExtensions.GetLogger(IIgniteLogger?, string) LoggerExtensions.GetLogger(IIgniteLogger?, Type) LoggerExtensions.Info(IIgniteLogger, Exception?, string, params object?[]?) LoggerExtensions.Info(IIgniteLogger, Exception?, string) LoggerExtensions.Info(IIgniteLogger, string, params object?[]?) LoggerExtensions.Info(IIgniteLogger, string) LoggerExtensions.Log(IIgniteLogger, LogLevel, Exception?, string, params object?[]?) LoggerExtensions.Log(IIgniteLogger, LogLevel, Exception?, string) LoggerExtensions.Log(IIgniteLogger, LogLevel, string, params object?[]?) LoggerExtensions.Log(IIgniteLogger, LogLevel, string) LoggerExtensions.Trace(IIgniteLogger, Exception?, string, params object?[]?) LoggerExtensions.Trace(IIgniteLogger, Exception?, string) LoggerExtensions.Trace(IIgniteLogger, string, params object?[]?) LoggerExtensions.Trace(IIgniteLogger, string) LoggerExtensions.Warn(IIgniteLogger, Exception?, string, params object?[]?) LoggerExtensions.Warn(IIgniteLogger, Exception?, string) LoggerExtensions.Warn(IIgniteLogger, string, params object?[]?) LoggerExtensions.Warn(IIgniteLogger, string) Constructors ConsoleLogger() Initializes a new instance of the ConsoleLogger class. Uses Warn minimum level. public ConsoleLogger() Properties DateTimeProvider Gets or sets DateTime provider. public IDateTimeProvider? DateTimeProvider { get; set; } Property Value IDateTimeProvider MinLevel Gets or sets the minimum level to be logged. Any levels lower than that are ignored. Default is Warn. public LogLevel MinLevel { get; set; } Property Value LogLevel Methods IsEnabled(LogLevel) Determines whether the specified log level is enabled. public bool IsEnabled(LogLevel level) Parameters level LogLevel The level. Returns bool Value indicating whether the specified log level is enabled. Log(LogLevel, string, object?[]?, IFormatProvider?, string?, string?, Exception?) Logs the specified message. public void Log(LogLevel level, string message, object?[]? args, IFormatProvider? formatProvider, string? category, string? nativeErrorInfo, Exception? ex) Parameters level LogLevel The level. message string The message. args object[] The arguments to format message. Can be null (formatting will not occur). formatProvider IFormatProvider The format provider. Can be null if args is null. category string The logging category name. nativeErrorInfo string The native error information. ex Exception The exception. Can be null. ToString() public override string ToString() Returns string"
  },
  "api/Apache.Ignite.Log.html": {
    "href": "api/Apache.Ignite.Log.html",
    "title": "Namespace Apache.Ignite.Log | Apache Ignite.NET API Documentation",
    "keywords": "Namespace Apache.Ignite.Log Classes CategoryLogger Wrapping logger with a predefined category. When Log(LogLevel, string, object?[]?, IFormatProvider?, string?, string?, Exception?) method is called, and category parameter is null, predefined category will be used. ConsoleLogger Logs to Console. Simple logger implementation without dependencies, provided out of the box for convenience. For anything more complex please use NLog/log4net integrations. LocalDateTimeProvider Returns Now. LoggerExtensions Extension methods for IIgniteLogger. Interfaces IDateTimeProvider DateTime abstraction for logging. IIgniteLogger Defines Ignite logging interface. This interface only provides essential log methods. All convenience overloads are in LoggerExtensions. Enums LogLevel Defines log levels."
  },
  "api/Apache.Ignite.Log.IDateTimeProvider.html": {
    "href": "api/Apache.Ignite.Log.IDateTimeProvider.html",
    "title": "Interface IDateTimeProvider | Apache Ignite.NET API Documentation",
    "keywords": "Interface IDateTimeProvider Namespace Apache.Ignite.Log Assembly Apache.Ignite.dll DateTime abstraction for logging. public interface IDateTimeProvider Methods Now() Gets current DateTime. DateTime Now() Returns DateTime Current DateTime."
  },
  "api/Apache.Ignite.Log.IIgniteLogger.html": {
    "href": "api/Apache.Ignite.Log.IIgniteLogger.html",
    "title": "Interface IIgniteLogger | Apache Ignite.NET API Documentation",
    "keywords": "Interface IIgniteLogger Namespace Apache.Ignite.Log Assembly Apache.Ignite.dll Defines Ignite logging interface. This interface only provides essential log methods. All convenience overloads are in LoggerExtensions. public interface IIgniteLogger Extension Methods LoggerExtensions.Debug(IIgniteLogger, Exception?, string, params object?[]?) LoggerExtensions.Debug(IIgniteLogger, Exception?, string) LoggerExtensions.Debug(IIgniteLogger, string, params object?[]?) LoggerExtensions.Debug(IIgniteLogger, string) LoggerExtensions.Error(IIgniteLogger, Exception?, string, params object?[]?) LoggerExtensions.Error(IIgniteLogger, Exception?, string) LoggerExtensions.Error(IIgniteLogger, string, params object?[]?) LoggerExtensions.Error(IIgniteLogger, string) LoggerExtensions.GetLogger(IIgniteLogger?, string) LoggerExtensions.GetLogger(IIgniteLogger?, Type) LoggerExtensions.Info(IIgniteLogger, Exception?, string, params object?[]?) LoggerExtensions.Info(IIgniteLogger, Exception?, string) LoggerExtensions.Info(IIgniteLogger, string, params object?[]?) LoggerExtensions.Info(IIgniteLogger, string) LoggerExtensions.Log(IIgniteLogger, LogLevel, Exception?, string, params object?[]?) LoggerExtensions.Log(IIgniteLogger, LogLevel, Exception?, string) LoggerExtensions.Log(IIgniteLogger, LogLevel, string, params object?[]?) LoggerExtensions.Log(IIgniteLogger, LogLevel, string) LoggerExtensions.Trace(IIgniteLogger, Exception?, string, params object?[]?) LoggerExtensions.Trace(IIgniteLogger, Exception?, string) LoggerExtensions.Trace(IIgniteLogger, string, params object?[]?) LoggerExtensions.Trace(IIgniteLogger, string) LoggerExtensions.Warn(IIgniteLogger, Exception?, string, params object?[]?) LoggerExtensions.Warn(IIgniteLogger, Exception?, string) LoggerExtensions.Warn(IIgniteLogger, string, params object?[]?) LoggerExtensions.Warn(IIgniteLogger, string) Methods IsEnabled(LogLevel) Determines whether the specified log level is enabled. bool IsEnabled(LogLevel level) Parameters level LogLevel The level. Returns bool Value indicating whether the specified log level is enabled. Log(LogLevel, string, object?[]?, IFormatProvider?, string?, string?, Exception?) Logs the specified message. void Log(LogLevel level, string message, object?[]? args, IFormatProvider? formatProvider, string? category, string? nativeErrorInfo, Exception? ex) Parameters level LogLevel The level. message string The message. args object[] The arguments to format message. Can be null (formatting will not occur). formatProvider IFormatProvider The format provider. Can be null if args is null. category string The logging category name. nativeErrorInfo string The native error information. ex Exception The exception. Can be null."
  },
  "api/Apache.Ignite.Log.LocalDateTimeProvider.html": {
    "href": "api/Apache.Ignite.Log.LocalDateTimeProvider.html",
    "title": "Class LocalDateTimeProvider | Apache Ignite.NET API Documentation",
    "keywords": "Class LocalDateTimeProvider Namespace Apache.Ignite.Log Assembly Apache.Ignite.dll Returns Now. public sealed class LocalDateTimeProvider : IDateTimeProvider Inheritance object LocalDateTimeProvider Implements IDateTimeProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Fields Instance Default instance. public static readonly LocalDateTimeProvider Instance Field Value LocalDateTimeProvider Methods Now() Gets current DateTime. public DateTime Now() Returns DateTime Current DateTime. ToString() public override string ToString() Returns string"
  },
  "api/Apache.Ignite.Log.LoggerExtensions.html": {
    "href": "api/Apache.Ignite.Log.LoggerExtensions.html",
    "title": "Class LoggerExtensions | Apache Ignite.NET API Documentation",
    "keywords": "Class LoggerExtensions Namespace Apache.Ignite.Log Assembly Apache.Ignite.dll Extension methods for IIgniteLogger. public static class LoggerExtensions Inheritance object LoggerExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Debug(IIgniteLogger, Exception?, string) Logs the message with Debug level. public static void Debug(this IIgniteLogger logger, Exception? ex, string message) Parameters logger IIgniteLogger The logger. ex Exception The exception. message string The message. Debug(IIgniteLogger, Exception?, string, params object?[]?) Logs the message with Debug level. public static void Debug(this IIgniteLogger logger, Exception? ex, string message, params object?[]? args) Parameters logger IIgniteLogger The logger. ex Exception The exception. message string The message. args object[] The arguments. Debug(IIgniteLogger, string) Logs the message with Debug level. public static void Debug(this IIgniteLogger logger, string message) Parameters logger IIgniteLogger The logger. message string The message. Debug(IIgniteLogger, string, params object?[]?) Logs the message with Debug level. public static void Debug(this IIgniteLogger logger, string message, params object?[]? args) Parameters logger IIgniteLogger The logger. message string The message. args object[] The arguments. Error(IIgniteLogger, Exception?, string) Logs the message with Error level. public static void Error(this IIgniteLogger logger, Exception? ex, string message) Parameters logger IIgniteLogger The logger. ex Exception The exception. message string The message. Error(IIgniteLogger, Exception?, string, params object?[]?) Logs the message with Error level. public static void Error(this IIgniteLogger logger, Exception? ex, string message, params object?[]? args) Parameters logger IIgniteLogger The logger. ex Exception The exception. message string The message. args object[] The arguments. Error(IIgniteLogger, string) Logs the message with Error level. public static void Error(this IIgniteLogger logger, string message) Parameters logger IIgniteLogger The logger. message string The message. Error(IIgniteLogger, string, params object?[]?) Logs the message with Error level. public static void Error(this IIgniteLogger logger, string message, params object?[]? args) Parameters logger IIgniteLogger The logger. message string The message. args object[] The arguments. GetLogger(IIgniteLogger?, string) Gets the CategoryLogger with a specified category that wraps provided logger. public static IIgniteLogger? GetLogger(this IIgniteLogger? logger, string category) Parameters logger IIgniteLogger The logger. category string The category. Returns IIgniteLogger Logger that uses specified category when no other category is provided. GetLogger(IIgniteLogger?, Type) Gets the CategoryLogger with a specified category that wraps provided logger. public static IIgniteLogger? GetLogger(this IIgniteLogger? logger, Type category) Parameters logger IIgniteLogger The logger. category Type The category as a type. Returns IIgniteLogger Logger that uses specified category when no other category is provided. Info(IIgniteLogger, Exception?, string) Logs the message with Info level. public static void Info(this IIgniteLogger logger, Exception? ex, string message) Parameters logger IIgniteLogger The logger. ex Exception The exception. message string The message. Info(IIgniteLogger, Exception?, string, params object?[]?) Logs the message with Info level. public static void Info(this IIgniteLogger logger, Exception? ex, string message, params object?[]? args) Parameters logger IIgniteLogger The logger. ex Exception The exception. message string The message. args object[] The arguments. Info(IIgniteLogger, string) Logs the message with Info level. public static void Info(this IIgniteLogger logger, string message) Parameters logger IIgniteLogger The logger. message string The message. Info(IIgniteLogger, string, params object?[]?) Logs the message with Info level. public static void Info(this IIgniteLogger logger, string message, params object?[]? args) Parameters logger IIgniteLogger The logger. message string The message. args object[] The arguments. Log(IIgniteLogger, LogLevel, Exception?, string) Logs the message. public static void Log(this IIgniteLogger logger, LogLevel level, Exception? ex, string message) Parameters logger IIgniteLogger The logger. level LogLevel The level. ex Exception The exception. message string The message. Log(IIgniteLogger, LogLevel, Exception?, string, params object?[]?) Logs the message. public static void Log(this IIgniteLogger logger, LogLevel level, Exception? ex, string message, params object?[]? args) Parameters logger IIgniteLogger The logger. level LogLevel The level. ex Exception The exception. message string The message. args object[] The arguments. Log(IIgniteLogger, LogLevel, string) Logs the message. public static void Log(this IIgniteLogger logger, LogLevel level, string message) Parameters logger IIgniteLogger The logger. level LogLevel The level. message string The message. Log(IIgniteLogger, LogLevel, string, params object?[]?) Logs the message. public static void Log(this IIgniteLogger logger, LogLevel level, string message, params object?[]? args) Parameters logger IIgniteLogger The logger. level LogLevel The level. message string The message. args object[] The arguments. Trace(IIgniteLogger, Exception?, string) Logs the message with Trace level. public static void Trace(this IIgniteLogger logger, Exception? ex, string message) Parameters logger IIgniteLogger The logger. ex Exception The exception. message string The message. Trace(IIgniteLogger, Exception?, string, params object?[]?) Logs the message with Trace level. public static void Trace(this IIgniteLogger logger, Exception? ex, string message, params object?[]? args) Parameters logger IIgniteLogger The logger. ex Exception The exception. message string The message. args object[] The arguments. Trace(IIgniteLogger, string) Logs the message with Trace level. public static void Trace(this IIgniteLogger logger, string message) Parameters logger IIgniteLogger The logger. message string The message. Trace(IIgniteLogger, string, params object?[]?) Logs the message with Trace level. public static void Trace(this IIgniteLogger logger, string message, params object?[]? args) Parameters logger IIgniteLogger The logger. message string The message. args object[] The arguments. Warn(IIgniteLogger, Exception?, string) Logs the message with Warn level. public static void Warn(this IIgniteLogger logger, Exception? ex, string message) Parameters logger IIgniteLogger The logger. ex Exception The exception. message string The message. Warn(IIgniteLogger, Exception?, string, params object?[]?) Logs the message with Warn level. public static void Warn(this IIgniteLogger logger, Exception? ex, string message, params object?[]? args) Parameters logger IIgniteLogger The logger. ex Exception The exception. message string The message. args object[] The arguments. Warn(IIgniteLogger, string) Logs the message with Warn level. public static void Warn(this IIgniteLogger logger, string message) Parameters logger IIgniteLogger The logger. message string The message. Warn(IIgniteLogger, string, params object?[]?) Logs the message with Warn level. public static void Warn(this IIgniteLogger logger, string message, params object?[]? args) Parameters logger IIgniteLogger The logger. message string The message. args object[] The arguments."
  },
  "api/Apache.Ignite.Log.LogLevel.html": {
    "href": "api/Apache.Ignite.Log.LogLevel.html",
    "title": "Enum LogLevel | Apache Ignite.NET API Documentation",
    "keywords": "Enum LogLevel Namespace Apache.Ignite.Log Assembly Apache.Ignite.dll Defines log levels. [Serializable] public enum LogLevel Fields Debug = 1 Debug log level. Error = 4 Error log level. Info = 2 Info log level. Trace = 0 Trace log level. Warn = 3 Warning log level."
  },
  "api/Apache.Ignite.Network.html": {
    "href": "api/Apache.Ignite.Network.html",
    "title": "Namespace Apache.Ignite.Network | Apache Ignite.NET API Documentation",
    "keywords": "Namespace Apache.Ignite.Network Interfaces IClusterNode Ignite cluster node. IConnectionInfo Connection info. ISslInfo SSL info."
  },
  "api/Apache.Ignite.Network.IClusterNode.html": {
    "href": "api/Apache.Ignite.Network.IClusterNode.html",
    "title": "Interface IClusterNode | Apache Ignite.NET API Documentation",
    "keywords": "Interface IClusterNode Namespace Apache.Ignite.Network Assembly Apache.Ignite.dll Ignite cluster node. public interface IClusterNode Properties Address Gets the node address. IPEndPoint Address { get; } Property Value IPEndPoint Id Gets the local node id. Changes after node restart. string Id { get; } Property Value string Name Gets the unique name of the cluster member. Does not change after node restart. string Name { get; } Property Value string"
  },
  "api/Apache.Ignite.Network.IConnectionInfo.html": {
    "href": "api/Apache.Ignite.Network.IConnectionInfo.html",
    "title": "Interface IConnectionInfo | Apache Ignite.NET API Documentation",
    "keywords": "Interface IConnectionInfo Namespace Apache.Ignite.Network Assembly Apache.Ignite.dll Connection info. public interface IConnectionInfo Properties Node Gets the target node. IClusterNode Node { get; } Property Value IClusterNode SslInfo Gets the SSL info, if SSL is enabled. ISslInfo? SslInfo { get; } Property Value ISslInfo"
  },
  "api/Apache.Ignite.Network.ISslInfo.html": {
    "href": "api/Apache.Ignite.Network.ISslInfo.html",
    "title": "Interface ISslInfo | Apache Ignite.NET API Documentation",
    "keywords": "Interface ISslInfo Namespace Apache.Ignite.Network Assembly Apache.Ignite.dll SSL info. public interface ISslInfo Properties IsMutuallyAuthenticated Gets a value indicating whether both server and client have been authenticated. bool IsMutuallyAuthenticated { get; } Property Value bool LocalCertificate Gets the certificate used to authenticate the local endpoint. X509Certificate? LocalCertificate { get; } Property Value X509Certificate NegotiatedCipherSuiteName Gets the cipher suite which was negotiated for this connection. string NegotiatedCipherSuiteName { get; } Property Value string RemoteCertificate Gets the certificate used to authenticate the remote endpoint. X509Certificate? RemoteCertificate { get; } Property Value X509Certificate SslProtocol Gets the SSL protocol. SslProtocols SslProtocol { get; } Property Value SslProtocols TargetHostName Gets the name of the server the client is trying to connect to. That name is used for server certificate validation. It can be a DNS name or an IP address. string TargetHostName { get; } Property Value string"
  },
  "api/Apache.Ignite.Option-1.html": {
    "href": "api/Apache.Ignite.Option-1.html",
    "title": "Struct Option<T> | Apache Ignite.NET API Documentation",
    "keywords": "Struct Option<T> Namespace Apache.Ignite Assembly Apache.Ignite.dll A wrapper that may or may not contain a value of type T. public readonly record struct Option<T> : IEquatable<Option<T>> Type Parameters T Value type. Implements IEquatable<Option<T>> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties HasValue Gets a value indicating whether the value is present. public bool HasValue { get; } Property Value bool Value Gets the value. public T Value { get; } Property Value T Methods Deconstruct(out T, out bool) Deconstructs this instance. public void Deconstruct(out T value, out bool hasValue) Parameters value T Value. hasValue bool Whether the value is present. Select<TRes>(Func<T, TRes>) Maps this instance to another type. public Option<TRes> Select<TRes>(Func<T, TRes> selector) Parameters selector Func<T, TRes> Selector. Returns Option<TRes> Resulting option. Type Parameters TRes Result type."
  },
  "api/Apache.Ignite.Option.html": {
    "href": "api/Apache.Ignite.Option.html",
    "title": "Class Option | Apache Ignite.NET API Documentation",
    "keywords": "Class Option Namespace Apache.Ignite Assembly Apache.Ignite.dll Static helpers for Option<T>. public static class Option Inheritance object Option Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods None<T>() Returns an option without a value. public static Option<T> None<T>() Returns Option<T> Option of T. Type Parameters T value type. Some<T>(T) Returns an option of the specified value. public static Option<T> Some<T>(T val) Parameters val T Value. Returns Option<T> Option of T. Type Parameters T value type."
  },
  "api/Apache.Ignite.RetryLimitPolicy.html": {
    "href": "api/Apache.Ignite.RetryLimitPolicy.html",
    "title": "Class RetryLimitPolicy | Apache Ignite.NET API Documentation",
    "keywords": "Class RetryLimitPolicy Namespace Apache.Ignite Assembly Apache.Ignite.dll Retry policy that returns true when Iteration is less than the specified RetryLimit, or the limit is zero or less. public class RetryLimitPolicy : IRetryPolicy Inheritance object RetryLimitPolicy Implements IRetryPolicy Derived RetryReadPolicy Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields DefaultRetryLimit Default retry limit. public const int DefaultRetryLimit = 16 Field Value int Properties RetryLimit Gets or sets the retry limit. 0 or less for no limit. Default is DefaultRetryLimit. public int RetryLimit { get; set; } Property Value int Methods ShouldRetry(IRetryPolicyContext) Gets a value indicating whether a client operation that has failed due to a connection issue should be retried. public virtual bool ShouldRetry(IRetryPolicyContext context) Parameters context IRetryPolicyContext Operation context. Returns bool true if the operation should be retried on another connection, false otherwise. ToString() public override string ToString() Returns string"
  },
  "api/Apache.Ignite.RetryNonePolicy.html": {
    "href": "api/Apache.Ignite.RetryNonePolicy.html",
    "title": "Class RetryNonePolicy | Apache Ignite.NET API Documentation",
    "keywords": "Class RetryNonePolicy Namespace Apache.Ignite Assembly Apache.Ignite.dll Retry policy that always returns false. public sealed class RetryNonePolicy : IRetryPolicy Inheritance object RetryNonePolicy Implements IRetryPolicy Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Fields Instance Singleton instance. public static readonly RetryNonePolicy Instance Field Value RetryNonePolicy Methods ShouldRetry(IRetryPolicyContext) Gets a value indicating whether a client operation that has failed due to a connection issue should be retried. public bool ShouldRetry(IRetryPolicyContext context) Parameters context IRetryPolicyContext Operation context. Returns bool true if the operation should be retried on another connection, false otherwise. ToString() public override string ToString() Returns string"
  },
  "api/Apache.Ignite.RetryReadPolicy.html": {
    "href": "api/Apache.Ignite.RetryReadPolicy.html",
    "title": "Class RetryReadPolicy | Apache Ignite.NET API Documentation",
    "keywords": "Class RetryReadPolicy Namespace Apache.Ignite Assembly Apache.Ignite.dll Retry policy that returns true for all read-only operations that do not modify data. public sealed class RetryReadPolicy : RetryLimitPolicy, IRetryPolicy Inheritance object RetryLimitPolicy RetryReadPolicy Implements IRetryPolicy Inherited Members RetryLimitPolicy.DefaultRetryLimit RetryLimitPolicy.RetryLimit RetryLimitPolicy.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Methods ShouldRetry(IRetryPolicyContext) Gets a value indicating whether a client operation that has failed due to a connection issue should be retried. public override bool ShouldRetry(IRetryPolicyContext context) Parameters context IRetryPolicyContext Operation context. Returns bool true if the operation should be retried on another connection, false otherwise."
  },
  "api/Apache.Ignite.Sql.ColumnType.html": {
    "href": "api/Apache.Ignite.Sql.ColumnType.html",
    "title": "Enum ColumnType | Apache Ignite.NET API Documentation",
    "keywords": "Enum ColumnType Namespace Apache.Ignite.Sql Assembly Apache.Ignite.dll SQL column type. public enum ColumnType Fields Bitmask = 13 Boolean = 0 ByteArray = 15 Date = 8 Datetime = 10 Decimal = 7 Double = 6 Duration = 17 Float = 5 Int16 = 2 Int32 = 3 Int64 = 4 Int8 = 1 Number = 18 Period = 16 String = 14 Time = 9 Timestamp = 11 Uuid = 12"
  },
  "api/Apache.Ignite.Sql.html": {
    "href": "api/Apache.Ignite.Sql.html",
    "title": "Namespace Apache.Ignite.Sql | Apache Ignite.NET API Documentation",
    "keywords": "Namespace Apache.Ignite.Sql Classes IgniteDbColumn Represents a column within Ignite result set. IgniteDbDataReader Reads a forward-only stream of rows from an Ignite result set. IgniteQueryableExtensions LINQ extensions for Apache Ignite SQL engine. Use AsQueryable(ITransaction?, QueryableOptions?) and AsQueryable(ITransaction?, QueryableOptions?) to query Ignite with LINQ, then materialize the query results by calling ToResultSetAsync<T>(IQueryable<T>). QueryableOptions Options for LINQ queryables. SqlStatement SQL statement. Interfaces IColumnMetadata Column metadata. IColumnOrigin SQL column origin. IResultSetMetadata SQL result set metadata. IResultSet<T> Query result set. Implements IAsyncEnumerable<T>: use await foreach (var row in resultSet) to consume, or call ToListAsync() to get all rows as a list. Can not be enumerated more than once. The implementation is lazy and retrieves data pages on demand (while iterating with IAsyncEnumerable<T> or when ToListAsync() is called). Page size is defined in PageSize. ISql Ignite SQL query facade. IUpdateDescriptor<T> Interface to provide update expressions for ExecuteUpdateAsync<T>(IQueryable<T>, Expression<Func<IUpdateDescriptor<T>, IUpdateDescriptor<T>>>). Enums ColumnType SQL column type."
  },
  "api/Apache.Ignite.Sql.IColumnMetadata.html": {
    "href": "api/Apache.Ignite.Sql.IColumnMetadata.html",
    "title": "Interface IColumnMetadata | Apache Ignite.NET API Documentation",
    "keywords": "Interface IColumnMetadata Namespace Apache.Ignite.Sql Assembly Apache.Ignite.dll Column metadata. public interface IColumnMetadata Properties Name Gets the column name. string Name { get; } Property Value string Nullable Gets a value indicating whether the column is nullable. bool Nullable { get; } Property Value bool Origin Gets the column origin. For example, for \"select foo as bar\" query, column name will be \"bar\", but origin name will be \"foo\". IColumnOrigin? Origin { get; } Property Value IColumnOrigin Precision Gets the column precision, or -1 when not applicable to the current column type. int Precision { get; } Property Value int Number of decimal digits for exact numeric types; number of decimal digits in mantissa for approximate numeric types; number of decimal digits for fractional seconds of datetime types; length in characters for character types; length in bytes for binary types; length in bits for bit types; 1 for BOOLEAN; -1 if precision is not valid for the type. Scale Gets the column scale. Number of digits of scale. int Scale { get; } Property Value int Type Gets the column type. ColumnType Type { get; } Property Value ColumnType"
  },
  "api/Apache.Ignite.Sql.IColumnOrigin.html": {
    "href": "api/Apache.Ignite.Sql.IColumnOrigin.html",
    "title": "Interface IColumnOrigin | Apache Ignite.NET API Documentation",
    "keywords": "Interface IColumnOrigin Namespace Apache.Ignite.Sql Assembly Apache.Ignite.dll SQL column origin. public interface IColumnOrigin Properties ColumnName Gets the column name. string ColumnName { get; } Property Value string SchemaName Gets the schema name. string SchemaName { get; } Property Value string TableName Gets the table name. string TableName { get; } Property Value string"
  },
  "api/Apache.Ignite.Sql.IgniteDbColumn.html": {
    "href": "api/Apache.Ignite.Sql.IgniteDbColumn.html",
    "title": "Class IgniteDbColumn | Apache Ignite.NET API Documentation",
    "keywords": "Class IgniteDbColumn Namespace Apache.Ignite.Sql Assembly Apache.Ignite.dll Represents a column within Ignite result set. public sealed class IgniteDbColumn : DbColumn Inheritance object DbColumn IgniteDbColumn Inherited Members DbColumn.AllowDBNull DbColumn.BaseCatalogName DbColumn.BaseColumnName DbColumn.BaseSchemaName DbColumn.BaseServerName DbColumn.BaseTableName DbColumn.ColumnName DbColumn.ColumnOrdinal DbColumn.ColumnSize DbColumn.DataType DbColumn.DataTypeName DbColumn.IsAliased DbColumn.IsAutoIncrement DbColumn.IsExpression DbColumn.IsHidden DbColumn.IsIdentity DbColumn.IsKey DbColumn.IsLong DbColumn.IsReadOnly DbColumn.IsUnique DbColumn.this[string] DbColumn.NumericPrecision DbColumn.NumericScale DbColumn.UdtAssemblyQualifiedName object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Properties ColumnMetadata Gets Ignite-specific column metadata. public IColumnMetadata ColumnMetadata { get; } Property Value IColumnMetadata Methods ToString() public override string ToString() Returns string"
  },
  "api/Apache.Ignite.Sql.IgniteDbDataReader.html": {
    "href": "api/Apache.Ignite.Sql.IgniteDbDataReader.html",
    "title": "Class IgniteDbDataReader | Apache Ignite.NET API Documentation",
    "keywords": "Class IgniteDbDataReader Namespace Apache.Ignite.Sql Assembly Apache.Ignite.dll Reads a forward-only stream of rows from an Ignite result set. public sealed class IgniteDbDataReader : DbDataReader, IEnumerable, IDataReader, IDataRecord, IDisposable, IAsyncDisposable, IDbColumnSchemaGenerator Inheritance object MarshalByRefObject DbDataReader IgniteDbDataReader Implements IEnumerable IDataReader IDataRecord IDisposable IAsyncDisposable IDbColumnSchemaGenerator Inherited Members DbDataReader.GetFieldValueAsync<T>(int) DbDataReader.GetFieldValueAsync<T>(int, CancellationToken) DbDataReader.GetSchemaTableAsync(CancellationToken) DbDataReader.GetColumnSchemaAsync(CancellationToken) DbDataReader.GetStream(int) DbDataReader.GetTextReader(int) DbDataReader.IsDBNullAsync(int) DbDataReader.IsDBNullAsync(int, CancellationToken) DbDataReader.NextResultAsync() DbDataReader.NextResultAsync(CancellationToken) DbDataReader.ReadAsync() DbDataReader.VisibleFieldCount MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Properties Depth Gets a value indicating the depth of nesting for the current row. Always zero in Ignite. public override int Depth { get; } Property Value int The level of nesting. FieldCount public override int FieldCount { get; } Property Value int HasRows public override bool HasRows { get; } Property Value bool IsClosed public override bool IsClosed { get; } Property Value bool this[int] public override object this[int ordinal] { get; } Parameters ordinal int Property Value object this[string] public override object this[string name] { get; } Parameters name string Property Value object Metadata Gets Ignite-specific result set metadata. public IResultSetMetadata Metadata { get; } Property Value IResultSetMetadata RecordsAffected public override int RecordsAffected { get; } Property Value int Methods Close() public override void Close() CloseAsync() public override Task CloseAsync() Returns Task Dispose(bool) protected override void Dispose(bool disposing) Parameters disposing bool DisposeAsync() public override ValueTask DisposeAsync() Returns ValueTask GetBoolean(int) public override bool GetBoolean(int ordinal) Parameters ordinal int Returns bool GetByte(int) public override byte GetByte(int ordinal) Parameters ordinal int Returns byte GetBytes(int, long, byte[]?, int, int) public override long GetBytes(int ordinal, long dataOffset, byte[]? buffer, int bufferOffset, int length) Parameters ordinal int dataOffset long buffer byte[] bufferOffset int length int Returns long GetChar(int) public override char GetChar(int ordinal) Parameters ordinal int Returns char GetChars(int, long, char[]?, int, int) public override long GetChars(int ordinal, long dataOffset, char[]? buffer, int bufferOffset, int length) Parameters ordinal int dataOffset long buffer char[] bufferOffset int length int Returns long GetColumnSchema() public ReadOnlyCollection<DbColumn> GetColumnSchema() Returns ReadOnlyCollection<DbColumn> GetDataTypeName(int) public override string GetDataTypeName(int ordinal) Parameters ordinal int Returns string GetDateTime(int) public override DateTime GetDateTime(int ordinal) Parameters ordinal int Returns DateTime GetDecimal(int) public override decimal GetDecimal(int ordinal) Parameters ordinal int Returns decimal GetDouble(int) public override double GetDouble(int ordinal) Parameters ordinal int Returns double GetEnumerator() public override IEnumerator GetEnumerator() Returns IEnumerator GetFieldType(int) public override Type GetFieldType(int ordinal) Parameters ordinal int Returns Type GetFieldValue<T>(int) public override T GetFieldValue<T>(int ordinal) Parameters ordinal int Returns T Type Parameters T GetFloat(int) public override float GetFloat(int ordinal) Parameters ordinal int Returns float GetGuid(int) public override Guid GetGuid(int ordinal) Parameters ordinal int Returns Guid GetInt16(int) public override short GetInt16(int ordinal) Parameters ordinal int Returns short GetInt32(int) public override int GetInt32(int ordinal) Parameters ordinal int Returns int GetInt64(int) public override long GetInt64(int ordinal) Parameters ordinal int Returns long GetName(int) public override string GetName(int ordinal) Parameters ordinal int Returns string GetOrdinal(string) public override int GetOrdinal(string name) Parameters name string Returns int GetSchemaTable() public override DataTable GetSchemaTable() Returns DataTable GetString(int) public override string GetString(int ordinal) Parameters ordinal int Returns string GetValue(int) public override object GetValue(int ordinal) Parameters ordinal int Returns object GetValues(object[]) public override int GetValues(object[] values) Parameters values object[] Returns int IsDBNull(int) public override bool IsDBNull(int ordinal) Parameters ordinal int Returns bool NextResult() public override bool NextResult() Returns bool Read() public override bool Read() Returns bool ReadAsync(CancellationToken) public override Task<bool> ReadAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken Returns Task<bool> ToString() public override string ToString() Returns string"
  },
  "api/Apache.Ignite.Sql.IgniteQueryableExtensions.html": {
    "href": "api/Apache.Ignite.Sql.IgniteQueryableExtensions.html",
    "title": "Class IgniteQueryableExtensions | Apache Ignite.NET API Documentation",
    "keywords": "Class IgniteQueryableExtensions Namespace Apache.Ignite.Sql Assembly Apache.Ignite.dll LINQ extensions for Apache Ignite SQL engine. Use AsQueryable(ITransaction?, QueryableOptions?) and AsQueryable(ITransaction?, QueryableOptions?) to query Ignite with LINQ, then materialize the query results by calling ToResultSetAsync<T>(IQueryable<T>). public static class IgniteQueryableExtensions Inheritance object IgniteQueryableExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AllAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, bool>>) Determines whether all elements of a sequence satisfy a condition. public static Task<bool> AllAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, bool>> predicate) Parameters queryable IQueryable<TSource> Query. predicate Expression<Func<TSource, bool>> Predicate. Returns Task<bool> A Task representing the asynchronous operation. The task result contains true if the source sequence contains any elements; otherwise, false. Type Parameters TSource Element type. AnyAsync<TSource>(IQueryable<TSource>) Determines whether a sequence contains any elements. public static Task<bool> AnyAsync<TSource>(this IQueryable<TSource> queryable) Parameters queryable IQueryable<TSource> Query. Returns Task<bool> A Task representing the asynchronous operation. The task result contains true if the source sequence contains any elements; otherwise, false. Type Parameters TSource Element type. AnyAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, bool>>) Determines whether any element of a sequence satisfies a condition. public static Task<bool> AnyAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, bool>> predicate) Parameters queryable IQueryable<TSource> Query. predicate Expression<Func<TSource, bool>> Predicate. Returns Task<bool> A Task representing the asynchronous operation. The task result contains true if the source sequence contains any elements matching the specified predicate; otherwise, false. Type Parameters TSource Element type. AsAsyncEnumerable<T>(IQueryable<T>) Executes the Ignite query represented by the provided queryable and returns the resulting IResultSet<T> as IAsyncEnumerable<T>. public static IAsyncEnumerable<T> AsAsyncEnumerable<T>(this IQueryable<T> queryable) Parameters queryable IQueryable<T> Queryable. Returns IAsyncEnumerable<T> Result set. Type Parameters T Result type. AverageAsync(IQueryable<decimal>) Returns the average of a sequence of values. public static Task<decimal> AverageAsync(this IQueryable<decimal> queryable) Parameters queryable IQueryable<decimal> Query. Returns Task<decimal> A Task representing the asynchronous operation. The task result contains the average of a sequence of values. AverageAsync(IQueryable<double>) Returns the average of a sequence of values. public static Task<double> AverageAsync(this IQueryable<double> queryable) Parameters queryable IQueryable<double> Query. Returns Task<double> A Task representing the asynchronous operation. The task result contains the average of a sequence of values. AverageAsync(IQueryable<int>) Returns the average of a sequence of values. public static Task<double> AverageAsync(this IQueryable<int> queryable) Parameters queryable IQueryable<int> Query. Returns Task<double> A Task representing the asynchronous operation. The task result contains the average of a sequence of values. AverageAsync(IQueryable<long>) Returns the average of a sequence of values. public static Task<double> AverageAsync(this IQueryable<long> queryable) Parameters queryable IQueryable<long> Query. Returns Task<double> A Task representing the asynchronous operation. The task result contains the average of a sequence of values. AverageAsync(IQueryable<decimal?>) Returns the average of a sequence of values. public static Task<decimal?> AverageAsync(this IQueryable<decimal?> queryable) Parameters queryable IQueryable<decimal?> Query. Returns Task<decimal?> A Task representing the asynchronous operation. The task result contains the average of a sequence of values. AverageAsync(IQueryable<double?>) Returns the average of a sequence of values. public static Task<double?> AverageAsync(this IQueryable<double?> queryable) Parameters queryable IQueryable<double?> Query. Returns Task<double?> A Task representing the asynchronous operation. The task result contains the average of a sequence of values. AverageAsync(IQueryable<int?>) Returns the average of a sequence of values. public static Task<double?> AverageAsync(this IQueryable<int?> queryable) Parameters queryable IQueryable<int?> Query. Returns Task<double?> A Task representing the asynchronous operation. The task result contains the average of a sequence of values. AverageAsync(IQueryable<long?>) Returns the average of a sequence of values. public static Task<double?> AverageAsync(this IQueryable<long?> queryable) Parameters queryable IQueryable<long?> Query. Returns Task<double?> A Task representing the asynchronous operation. The task result contains the average of a sequence of values. AverageAsync(IQueryable<float?>) Returns the average of a sequence of values. public static Task<float?> AverageAsync(this IQueryable<float?> queryable) Parameters queryable IQueryable<float?> Query. Returns Task<float?> A Task representing the asynchronous operation. The task result contains the average of a sequence of values. AverageAsync(IQueryable<float>) Returns the average of a sequence of values. public static Task<float> AverageAsync(this IQueryable<float> queryable) Parameters queryable IQueryable<float> Query. Returns Task<float> A Task representing the asynchronous operation. The task result contains the average of a sequence of values. AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, decimal>>) Returns the average of a sequence of values. public static Task<decimal> AverageAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, decimal>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, decimal>> A projection function to apply to each element. Returns Task<decimal> A Task representing the asynchronous operation. The task result contains the average of a sequence of values. Type Parameters TSource Element type. AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, double>>) Returns the average of a sequence of values. public static Task<double> AverageAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, double>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, double>> A projection function to apply to each element. Returns Task<double> A Task representing the asynchronous operation. The task result contains the average of a sequence of values. Type Parameters TSource Element type. AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, int>>) Returns the average of a sequence of values. public static Task<double> AverageAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, int>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, int>> A projection function to apply to each element. Returns Task<double> A Task representing the asynchronous operation. The task result contains the average of a sequence of values. Type Parameters TSource Element type. AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, long>>) Returns the average of a sequence of values. public static Task<double> AverageAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, long>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, long>> A projection function to apply to each element. Returns Task<double> A Task representing the asynchronous operation. The task result contains the average of a sequence of values. Type Parameters TSource Element type. AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, decimal?>>) Returns the average of a sequence of values. public static Task<decimal?> AverageAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, decimal?>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, decimal?>> A projection function to apply to each element. Returns Task<decimal?> A Task representing the asynchronous operation. The task result contains the average of a sequence of values. Type Parameters TSource Element type. AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, double?>>) Returns the average of a sequence of values. public static Task<double?> AverageAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, double?>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, double?>> A projection function to apply to each element. Returns Task<double?> A Task representing the asynchronous operation. The task result contains the average of a sequence of values. Type Parameters TSource Element type. AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, int?>>) Returns the average of a sequence of values. public static Task<double?> AverageAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, int?>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, int?>> A projection function to apply to each element. Returns Task<double?> A Task representing the asynchronous operation. The task result contains the average of a sequence of values. Type Parameters TSource Element type. AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, long?>>) Returns the average of a sequence of values. public static Task<double?> AverageAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, long?>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, long?>> A projection function to apply to each element. Returns Task<double?> A Task representing the asynchronous operation. The task result contains the average of a sequence of values. Type Parameters TSource Element type. AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, float?>>) Returns the average of a sequence of values. public static Task<float?> AverageAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, float?>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, float?>> A projection function to apply to each element. Returns Task<float?> A Task representing the asynchronous operation. The task result contains the average of a sequence of values. Type Parameters TSource Element type. AverageAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, float>>) Returns the average of a sequence of values. public static Task<float> AverageAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, float>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, float>> A projection function to apply to each element. Returns Task<float> A Task representing the asynchronous operation. The task result contains the average of a sequence of values. Type Parameters TSource Element type. CountAsync<TSource>(IQueryable<TSource>) Returns the number of elements in a sequence. public static Task<int> CountAsync<TSource>(this IQueryable<TSource> queryable) Parameters queryable IQueryable<TSource> Query. Returns Task<int> A Task representing the asynchronous operation. The task result contains the number of elements in the input sequence. Type Parameters TSource Element type. CountAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, bool>>) Returns the number of elements in a sequence. public static Task<int> CountAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, bool>> predicate) Parameters queryable IQueryable<TSource> Query. predicate Expression<Func<TSource, bool>> Predicate. Returns Task<int> A Task representing the asynchronous operation. The task result contains the number of elements in the input sequence. Type Parameters TSource Element type. ExecuteDeleteAsync<T>(IQueryable<T>) Removes all rows that are matched by the specified query. This method results in \"DELETE FROM\" distributed SQL query, performing bulk delete (as opposed to fetching all rows locally before deleting them). public static Task<long> ExecuteDeleteAsync<T>(this IQueryable<T> query) Parameters query IQueryable<T> Query. Returns Task<long> Affected row count. Type Parameters T Element type. ExecuteDeleteAsync<T>(IQueryable<T>, Expression<Func<T, bool>>) Removes all rows that are matched by the specified query. This method results in \"DELETE FROM .. WHERE ..\" distributed SQL query, performing bulk delete (as opposed to fetching all rows locally before deleting them). public static Task<long> ExecuteDeleteAsync<T>(this IQueryable<T> query, Expression<Func<T, bool>> predicate) Parameters query IQueryable<T> Query. predicate Expression<Func<T, bool>> Predicate. Returns Task<long> Affected row count. Type Parameters T Element type. ExecuteUpdateAsync<T>(IQueryable<T>, Expression<Func<IUpdateDescriptor<T>, IUpdateDescriptor<T>>>) Updates all rows that are matched by the specified query. This method results in \"UPDATE .. WHERE ..\" distributed SQL query, performing bulk update (as opposed to fetching all rows locally before updating them). public static Task<long> ExecuteUpdateAsync<T>(this IQueryable<T> query, Expression<Func<IUpdateDescriptor<T>, IUpdateDescriptor<T>>> updateDescriptor) Parameters query IQueryable<T> Query. updateDescriptor Expression<Func<IUpdateDescriptor<T>, IUpdateDescriptor<T>>> Update descriptor. Returns Task<long> Affected row count. Type Parameters T Element type. FirstAsync<TSource>(IQueryable<TSource>) Returns the first element of a sequence. public static Task<TSource> FirstAsync<TSource>(this IQueryable<TSource> queryable) Parameters queryable IQueryable<TSource> Query. Returns Task<TSource> A Task representing the asynchronous operation. The task result contains the first element in the input sequence. Type Parameters TSource Element type. FirstAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, bool>>) Returns the first element of a sequence. public static Task<TSource> FirstAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, bool>> predicate) Parameters queryable IQueryable<TSource> Query. predicate Expression<Func<TSource, bool>> Predicate. Returns Task<TSource> A Task representing the asynchronous operation. The task result contains the first element in the input sequence. Type Parameters TSource Element type. FirstOrDefaultAsync<TSource>(IQueryable<TSource>) Returns the first element of a sequence, or a default value if the sequence contains no elements. public static Task<TSource?> FirstOrDefaultAsync<TSource>(this IQueryable<TSource> queryable) Parameters queryable IQueryable<TSource> Query. Returns Task<TSource> A Task representing the asynchronous operation. The task result contains default ( TSource ) if queryable is empty; otherwise, the first element in queryable. Type Parameters TSource Element type. FirstOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, bool>>) Returns the first element of a sequence, or a default value if the sequence contains no elements. public static Task<TSource?> FirstOrDefaultAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, bool>> predicate) Parameters queryable IQueryable<TSource> Query. predicate Expression<Func<TSource, bool>> Predicate. Returns Task<TSource> A Task representing the asynchronous operation. The task result contains default ( TSource ) if queryable is empty; otherwise, the first element in queryable. Type Parameters TSource Element type. LongCountAsync<TSource>(IQueryable<TSource>) Returns a long that represents the total number of elements in a sequence. public static Task<long> LongCountAsync<TSource>(this IQueryable<TSource> queryable) Parameters queryable IQueryable<TSource> Query. Returns Task<long> A Task representing the asynchronous operation. The task result contains the number of elements in the input sequence. Type Parameters TSource Element type. LongCountAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, bool>>) Returns a long that represents the total number of elements in a sequence. public static Task<long> LongCountAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, bool>> predicate) Parameters queryable IQueryable<TSource> Query. predicate Expression<Func<TSource, bool>> Predicate. Returns Task<long> A Task representing the asynchronous operation. The task result contains the number of elements in the input sequence. Type Parameters TSource Element type. MaxAsync<TSource>(IQueryable<TSource>) Returns the maximum value of a sequence. public static Task<TSource> MaxAsync<TSource>(this IQueryable<TSource> queryable) Parameters queryable IQueryable<TSource> Query. Returns Task<TSource> A Task representing the asynchronous operation. The task result contains the maximum value in the sequence. Type Parameters TSource Element type. MaxAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>) Returns the maximum value of a sequence. public static Task<TResult> MaxAsync<TSource, TResult>(this IQueryable<TSource> queryable, Expression<Func<TSource, TResult>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, TResult>> A projection function to apply to each element. Returns Task<TResult> A Task representing the asynchronous operation. The task result contains the maximum value in the sequence. Type Parameters TSource Element type. TResult The type of the value returned by the function represented by selector. MinAsync<TSource>(IQueryable<TSource>) Returns the minimum value of a sequence. public static Task<TSource> MinAsync<TSource>(this IQueryable<TSource> queryable) Parameters queryable IQueryable<TSource> Query. Returns Task<TSource> A Task representing the asynchronous operation. The task result contains the minimum value in the sequence. Type Parameters TSource Element type. MinAsync<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>) Returns the minimum value of a sequence. public static Task<TResult> MinAsync<TSource, TResult>(this IQueryable<TSource> queryable, Expression<Func<TSource, TResult>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, TResult>> A projection function to apply to each element. Returns Task<TResult> A Task representing the asynchronous operation. The task result contains the minimum value in the sequence. Type Parameters TSource Element type. TResult The type of the value returned by the function represented by selector. SingleAsync<TSource>(IQueryable<TSource>) Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence. public static Task<TSource> SingleAsync<TSource>(this IQueryable<TSource> queryable) Parameters queryable IQueryable<TSource> Query. Returns Task<TSource> A Task representing the asynchronous operation. The task result contains the single element of the input sequence. Type Parameters TSource Element type. SingleAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, bool>>) Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence. public static Task<TSource> SingleAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, bool>> predicate) Parameters queryable IQueryable<TSource> Query. predicate Expression<Func<TSource, bool>> Predicate. Returns Task<TSource> A Task representing the asynchronous operation. The task result contains the single element of the input sequence. Type Parameters TSource Element type. SingleOrDefaultAsync<TSource>(IQueryable<TSource>) Returns the only element of a sequence, or a default value if the sequence is empty; throws an exception if there is more than one element in the sequence. public static Task<TSource?> SingleOrDefaultAsync<TSource>(this IQueryable<TSource> queryable) Parameters queryable IQueryable<TSource> Query. Returns Task<TSource> A Task representing the asynchronous operation. The task result contains the single element of the input sequence, or default (TSource) if the sequence contains no elements. Type Parameters TSource Element type. SingleOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, bool>>) Returns the only element of a sequence, or a default value if the sequence is empty; throws an exception if there is more than one element in the sequence. public static Task<TSource?> SingleOrDefaultAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, bool>> predicate) Parameters queryable IQueryable<TSource> Query. predicate Expression<Func<TSource, bool>> Predicate. Returns Task<TSource> A Task representing the asynchronous operation. The task result contains the single element of the input sequence, or default (TSource) if the sequence contains no elements. Type Parameters TSource Element type. SumAsync(IQueryable<decimal>) Returns the sum of a sequence of values. public static Task<decimal> SumAsync(this IQueryable<decimal> queryable) Parameters queryable IQueryable<decimal> Query. Returns Task<decimal> A Task representing the asynchronous operation. The task result contains the sum of a sequence of values. SumAsync(IQueryable<double>) Returns the sum of a sequence of values. public static Task<double> SumAsync(this IQueryable<double> queryable) Parameters queryable IQueryable<double> Query. Returns Task<double> A Task representing the asynchronous operation. The task result contains the sum of a sequence of values. SumAsync(IQueryable<int>) Returns the sum of a sequence of values. public static Task<int> SumAsync(this IQueryable<int> queryable) Parameters queryable IQueryable<int> Query. Returns Task<int> A Task representing the asynchronous operation. The task result contains the sum of a sequence of values. SumAsync(IQueryable<long>) Returns the sum of a sequence of values. public static Task<long> SumAsync(this IQueryable<long> queryable) Parameters queryable IQueryable<long> Query. Returns Task<long> A Task representing the asynchronous operation. The task result contains the sum of a sequence of values. SumAsync(IQueryable<decimal?>) Returns the sum of a sequence of values. public static Task<decimal?> SumAsync(this IQueryable<decimal?> queryable) Parameters queryable IQueryable<decimal?> Query. Returns Task<decimal?> A Task representing the asynchronous operation. The task result contains the sum of a sequence of values. SumAsync(IQueryable<double?>) Returns the sum of a sequence of values. public static Task<double?> SumAsync(this IQueryable<double?> queryable) Parameters queryable IQueryable<double?> Query. Returns Task<double?> A Task representing the asynchronous operation. The task result contains the sum of a sequence of values. SumAsync(IQueryable<int?>) Returns the sum of a sequence of values. public static Task<int?> SumAsync(this IQueryable<int?> queryable) Parameters queryable IQueryable<int?> Query. Returns Task<int?> A Task representing the asynchronous operation. The task result contains the sum of a sequence of values. SumAsync(IQueryable<long?>) Returns the sum of a sequence of values. public static Task<long?> SumAsync(this IQueryable<long?> queryable) Parameters queryable IQueryable<long?> Query. Returns Task<long?> A Task representing the asynchronous operation. The task result contains the sum of a sequence of values. SumAsync(IQueryable<float?>) Returns the sum of a sequence of values. public static Task<float?> SumAsync(this IQueryable<float?> queryable) Parameters queryable IQueryable<float?> Query. Returns Task<float?> A Task representing the asynchronous operation. The task result contains the sum of a sequence of values. SumAsync(IQueryable<float>) Returns the sum of a sequence of values. public static Task<float> SumAsync(this IQueryable<float> queryable) Parameters queryable IQueryable<float> Query. Returns Task<float> A Task representing the asynchronous operation. The task result contains the sum of a sequence of values. SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, decimal>>) Returns the sum of a sequence of values. public static Task<decimal> SumAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, decimal>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, decimal>> A projection function to apply to each element. Returns Task<decimal> A Task representing the asynchronous operation. The task result contains the sum of a sequence of values. Type Parameters TSource Element type. SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, double>>) Returns the sum of a sequence of values. public static Task<double> SumAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, double>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, double>> A projection function to apply to each element. Returns Task<double> A Task representing the asynchronous operation. The task result contains the sum of a sequence of values. Type Parameters TSource Element type. SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, int>>) Returns the sum of a sequence of values. public static Task<int> SumAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, int>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, int>> A projection function to apply to each element. Returns Task<int> A Task representing the asynchronous operation. The task result contains the sum of a sequence of values. Type Parameters TSource Element type. SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, long>>) Returns the sum of a sequence of values. public static Task<long> SumAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, long>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, long>> A projection function to apply to each element. Returns Task<long> A Task representing the asynchronous operation. The task result contains the sum of a sequence of values. Type Parameters TSource Element type. SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, decimal?>>) Returns the sum of a sequence of values. public static Task<decimal?> SumAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, decimal?>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, decimal?>> A projection function to apply to each element. Returns Task<decimal?> A Task representing the asynchronous operation. The task result contains the sum of a sequence of values. Type Parameters TSource Element type. SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, double?>>) Returns the sum of a sequence of values. public static Task<double?> SumAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, double?>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, double?>> A projection function to apply to each element. Returns Task<double?> A Task representing the asynchronous operation. The task result contains the sum of a sequence of values. Type Parameters TSource Element type. SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, int?>>) Returns the sum of a sequence of values. public static Task<int?> SumAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, int?>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, int?>> A projection function to apply to each element. Returns Task<int?> A Task representing the asynchronous operation. The task result contains the sum of a sequence of values. Type Parameters TSource Element type. SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, long?>>) Returns the sum of a sequence of values. public static Task<long?> SumAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, long?>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, long?>> A projection function to apply to each element. Returns Task<long?> A Task representing the asynchronous operation. The task result contains the sum of a sequence of values. Type Parameters TSource Element type. SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, float?>>) Returns the sum of a sequence of values. public static Task<float?> SumAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, float?>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, float?>> A projection function to apply to each element. Returns Task<float?> A Task representing the asynchronous operation. The task result contains the sum of a sequence of values. Type Parameters TSource Element type. SumAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, float>>) Returns the sum of a sequence of values. public static Task<float> SumAsync<TSource>(this IQueryable<TSource> queryable, Expression<Func<TSource, float>> selector) Parameters queryable IQueryable<TSource> Query. selector Expression<Func<TSource, float>> A projection function to apply to each element. Returns Task<float> A Task representing the asynchronous operation. The task result contains the sum of a sequence of values. Type Parameters TSource Element type. ToDictionaryAsync<TSource, TK, TV>(IQueryable<TSource>, Func<TSource, TK>, Func<TSource, TV>, IEqualityComparer<TK>?) Creates a Dictionary<TKey, TValue> from an IQueryable<T> by enumerating it asynchronously. public static Task<Dictionary<TK, TV>> ToDictionaryAsync<TSource, TK, TV>(this IQueryable<TSource> queryable, Func<TSource, TK> keySelector, Func<TSource, TV> valSelector, IEqualityComparer<TK>? comparer = null) where TK : notnull Parameters queryable IQueryable<TSource> Query. keySelector Func<TSource, TK> Key selector. valSelector Func<TSource, TV> Value selector. comparer IEqualityComparer<TK> Optional comparer. Returns Task<Dictionary<TK, TV>> A Task representing the asynchronous operation. The task result contains a Dictionary<TKey, TValue> that contains elements from the input sequence. Type Parameters TSource Element type. TK Dictionary key type. TV Dictionary value type. ToListAsync<TSource>(IQueryable<TSource>) Creates a List<T> from an IQueryable<T> by enumerating it asynchronously. public static Task<List<TSource>> ToListAsync<TSource>(this IQueryable<TSource> queryable) Parameters queryable IQueryable<TSource> Query. Returns Task<List<TSource>> A Task representing the asynchronous operation. The task result contains a List<T> that contains elements from the input sequence. Type Parameters TSource Element type. ToQueryString(IQueryable) Generates SQL representation of the specified query. public static string ToQueryString(this IQueryable queryable) Parameters queryable IQueryable Query. Returns string SQL string. ToResultSetAsync<T>(IQueryable<T>) Executes the Ignite query represented by the provided queryable and returns the resulting IResultSet<T>. public static Task<IResultSet<T>> ToResultSetAsync<T>(this IQueryable<T> queryable) Parameters queryable IQueryable<T> Queryable. Returns Task<IResultSet<T>> Result set. Type Parameters T Result type."
  },
  "api/Apache.Ignite.Sql.IResultSet-1.html": {
    "href": "api/Apache.Ignite.Sql.IResultSet-1.html",
    "title": "Interface IResultSet<T> | Apache Ignite.NET API Documentation",
    "keywords": "Interface IResultSet<T> Namespace Apache.Ignite.Sql Assembly Apache.Ignite.dll Query result set. Implements IAsyncEnumerable<T>: use await foreach (var row in resultSet) to consume, or call ToListAsync() to get all rows as a list. Can not be enumerated more than once. The implementation is lazy and retrieves data pages on demand (while iterating with IAsyncEnumerable<T> or when ToListAsync() is called). Page size is defined in PageSize. public interface IResultSet<T> : IAsyncEnumerable<T>, IAsyncDisposable, IDisposable Type Parameters T Row type. Inherited Members IAsyncEnumerable<T>.GetAsyncEnumerator(CancellationToken) IAsyncDisposable.DisposeAsync() IDisposable.Dispose() Properties AffectedRows Gets the number of rows affected by the DML statement execution (such as \"INSERT\", \"UPDATE\", etc.), or 0 if the statement returns nothing (such as \"ALTER TABLE\", etc), or -1 if not applicable. long AffectedRows { get; } Property Value long HasRowSet Gets a value indicating whether this result set contains a collection of rows. bool HasRowSet { get; } Property Value bool Metadata Gets result set metadata when HasRowSet is true, otherwise null. IResultSetMetadata? Metadata { get; } Property Value IResultSetMetadata WasApplied Gets a value indicating whether a conditional query (such as \"CREATE TABLE IF NOT EXISTS\") was applied successfully. bool WasApplied { get; } Property Value bool Methods CollectAsync<TResult>(Func<int, TResult>, Action<TResult, T>) Collects all result set rows into a container of the specified type. ValueTask<TResult> CollectAsync<TResult>(Func<int, TResult> constructor, Action<TResult, T> accumulator) Parameters constructor Func<int, TResult> Container constructor, accepts estimated capacity. Actual result set size may exceed specified capacity. accumulator Action<TResult, T> Accumulator, adds rows to the container. Returns ValueTask<TResult> resulting container. Type Parameters TResult Resulting container type. ToDictionaryAsync<TK, TV>(Func<T, TK>, Func<T, TV>, IEqualityComparer<TK>?) Gets all result set rows as dictionary. Can not be called multiple times - the underlying server-side result set is closed as soon as the last page of data is retrieved, and client-side buffer is also released to reduce memory usage. ValueTask<Dictionary<TK, TV>> ToDictionaryAsync<TK, TV>(Func<T, TK> keySelector, Func<T, TV> valSelector, IEqualityComparer<TK>? comparer = null) where TK : notnull Parameters keySelector Func<T, TK> Key selector. valSelector Func<T, TV> Value selector. comparer IEqualityComparer<TK> Optional comparer. Returns ValueTask<Dictionary<TK, TV>> All result set rows as list. Type Parameters TK Dictionary key type. TV Dictionary value type. ToListAsync() Gets all result set rows as list. Can not be called multiple times - the underlying server-side result set is closed as soon as the last page of data is retrieved, and client-side buffer is also released to reduce memory usage. ValueTask<List<T>> ToListAsync() Returns ValueTask<List<T>> All result set rows as list."
  },
  "api/Apache.Ignite.Sql.IResultSetMetadata.html": {
    "href": "api/Apache.Ignite.Sql.IResultSetMetadata.html",
    "title": "Interface IResultSetMetadata | Apache Ignite.NET API Documentation",
    "keywords": "Interface IResultSetMetadata Namespace Apache.Ignite.Sql Assembly Apache.Ignite.dll SQL result set metadata. public interface IResultSetMetadata Properties Columns Gets the columns in the same order as they appear in the result set data. IReadOnlyList<IColumnMetadata> Columns { get; } Property Value IReadOnlyList<IColumnMetadata> Methods IndexOf(string) Gets the index of the specified column, or -1 when there is no column with the specified name. int IndexOf(string columnName) Parameters columnName string Column name. Returns int Column index."
  },
  "api/Apache.Ignite.Sql.ISql.html": {
    "href": "api/Apache.Ignite.Sql.ISql.html",
    "title": "Interface ISql | Apache Ignite.NET API Documentation",
    "keywords": "Interface ISql Namespace Apache.Ignite.Sql Assembly Apache.Ignite.dll Ignite SQL query facade. public interface ISql Methods ExecuteAsync(ITransaction?, SqlStatement, params object?[]?) Executes single SQL statement and returns rows as tuples (IIgniteTuple). Task<IResultSet<IIgniteTuple>> ExecuteAsync(ITransaction? transaction, SqlStatement statement, params object?[]? args) Parameters transaction ITransaction Optional transaction. statement SqlStatement Statement to execute. args object[] Arguments for the statement. Returns Task<IResultSet<IIgniteTuple>> SQL result set. ExecuteAsync<T>(ITransaction?, SqlStatement, params object?[]?) Executes single SQL statement and returns rows deserialized into the specified user type T. Task<IResultSet<T>> ExecuteAsync<T>(ITransaction? transaction, SqlStatement statement, params object?[]? args) Parameters transaction ITransaction Optional transaction. statement SqlStatement Statement to execute. args object[] Arguments for the statement. Returns Task<IResultSet<T>> SQL result set. Type Parameters T Row type. ExecuteReaderAsync(ITransaction?, SqlStatement, params object?[]?) Executes single SQL statement and returns a DbDataReader to consume them in an efficient, forward-only way. Task<IgniteDbDataReader> ExecuteReaderAsync(ITransaction? transaction, SqlStatement statement, params object?[]? args) Parameters transaction ITransaction Optional transaction. statement SqlStatement Statement to execute. args object[] Arguments for the statement. Returns Task<IgniteDbDataReader> Data reader."
  },
  "api/Apache.Ignite.Sql.IUpdateDescriptor-1.html": {
    "href": "api/Apache.Ignite.Sql.IUpdateDescriptor-1.html",
    "title": "Interface IUpdateDescriptor<T> | Apache Ignite.NET API Documentation",
    "keywords": "Interface IUpdateDescriptor<T> Namespace Apache.Ignite.Sql Assembly Apache.Ignite.dll Interface to provide update expressions for ExecuteUpdateAsync<T>(IQueryable<T>, Expression<Func<IUpdateDescriptor<T>, IUpdateDescriptor<T>>>). public interface IUpdateDescriptor<out T> Type Parameters T Query element type. Methods SetProperty<TProp>(Func<T, TProp>, Func<T, TProp>) Specifies member update with an expression. IUpdateDescriptor<out T> SetProperty<TProp>(Func<out T, TProp> selector, Func<out T, TProp> valueBuilder) Parameters selector Func<T, TProp> Member selector. valueBuilder Func<T, TProp> New value generator. Returns IUpdateDescriptor<T> Update descriptor for chaining. Type Parameters TProp Member type. SetProperty<TProp>(Func<T, TProp>, TProp) Specifies member update with a constant value. IUpdateDescriptor<out T> SetProperty<TProp>(Func<out T, TProp> selector, TProp value) Parameters selector Func<T, TProp> Member selector. value TProp New value. Returns IUpdateDescriptor<T> Update descriptor for chaining. Type Parameters TProp Member type."
  },
  "api/Apache.Ignite.Sql.QueryableOptions.html": {
    "href": "api/Apache.Ignite.Sql.QueryableOptions.html",
    "title": "Class QueryableOptions | Apache Ignite.NET API Documentation",
    "keywords": "Class QueryableOptions Namespace Apache.Ignite.Sql Assembly Apache.Ignite.dll Options for LINQ queryables. public sealed record QueryableOptions : IEquatable<QueryableOptions> Inheritance object QueryableOptions Implements IEquatable<QueryableOptions> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors QueryableOptions(TimeSpan, int) Options for LINQ queryables. public QueryableOptions(TimeSpan Timeout = default, int PageSize = 1024) Parameters Timeout TimeSpan Timeout, default DefaultTimeout. PageSize int Page size to use when fetching results from server, default DefaultPageSize. Properties PageSize Page size to use when fetching results from server, default DefaultPageSize. public int PageSize { get; init; } Property Value int Timeout Timeout, default DefaultTimeout. public TimeSpan Timeout { get; init; } Property Value TimeSpan"
  },
  "api/Apache.Ignite.Sql.SqlStatement.html": {
    "href": "api/Apache.Ignite.Sql.SqlStatement.html",
    "title": "Class SqlStatement | Apache Ignite.NET API Documentation",
    "keywords": "Class SqlStatement Namespace Apache.Ignite.Sql Assembly Apache.Ignite.dll SQL statement. public sealed record SqlStatement : IEquatable<SqlStatement> Inheritance object SqlStatement Implements IEquatable<SqlStatement> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Constructors SqlStatement(string, TimeSpan?, string?, int?, IReadOnlyDictionary<string, object?>?) Initializes a new instance of the SqlStatement class. public SqlStatement(string query, TimeSpan? timeout = null, string? schema = null, int? pageSize = null, IReadOnlyDictionary<string, object?>? properties = null) Parameters query string Query text. timeout TimeSpan? Timeout. schema string Schema. pageSize int? Page size. properties IReadOnlyDictionary<string, object> Properties. Fields DefaultPageSize Default number of rows per data page. public const int DefaultPageSize = 1024 Field Value int DefaultSchema Default SQL schema name. public const string DefaultSchema = \"PUBLIC\" Field Value string DefaultTimeout Default query timeout (zero means no timeout). public static readonly TimeSpan DefaultTimeout Field Value TimeSpan Properties PageSize Gets the number of rows per data page. public int PageSize { get; init; } Property Value int Properties Gets the property bag. public IReadOnlyDictionary<string, object?> Properties { get; init; } Property Value IReadOnlyDictionary<string, object> Query Gets the query text. public string Query { get; init; } Property Value string Schema Gets the SQL schema name. public string Schema { get; init; } Property Value string Timeout Gets the query timeout (zero means no timeout). public TimeSpan Timeout { get; init; } Property Value TimeSpan Methods ToSqlStatement(string) Converts a query string to an instance of SqlStatement. public static SqlStatement ToSqlStatement(string query) Parameters query string Query string. Returns SqlStatement Statement. ToString() public override string ToString() Returns string Operators implicit operator SqlStatement(string) Converts a query string to an instance of SqlStatement. public static implicit operator SqlStatement(string query) Parameters query string Query string. Returns SqlStatement Statement."
  },
  "api/Apache.Ignite.SslStreamFactory.html": {
    "href": "api/Apache.Ignite.SslStreamFactory.html",
    "title": "Class SslStreamFactory | Apache Ignite.NET API Documentation",
    "keywords": "Class SslStreamFactory Namespace Apache.Ignite Assembly Apache.Ignite.dll Standard SSL stream factory. Can be used with or without client-side certificates. public sealed class SslStreamFactory : ISslStreamFactory Inheritance object SslStreamFactory Implements ISslStreamFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Properties SslClientAuthenticationOptions Gets or sets client authentication options. public SslClientAuthenticationOptions? SslClientAuthenticationOptions { get; set; } Property Value SslClientAuthenticationOptions Methods CreateAsync(Stream, string) Creates the SSL stream. public Task<SslStream?> CreateAsync(Stream stream, string targetHost) Parameters stream Stream The underlying raw stream. targetHost string Target host. Returns Task<SslStream> SSL stream, or null if SSL is not enabled. ToString() public override string ToString() Returns string"
  },
  "api/Apache.Ignite.Table.html": {
    "href": "api/Apache.Ignite.Table.html",
    "title": "Namespace Apache.Ignite.Table | Apache Ignite.NET API Documentation",
    "keywords": "Namespace Apache.Ignite.Table Classes IgniteTuple Ignite tuple. Interfaces IIgniteTuple Ignite Tuple. Default implementation is IgniteTuple. IKeyValueView<TK, TV> Key-value view provides access to table records in form of separate key and value parts. IRecordView<T> Record view interface provides methods to access table records. ITable Table view. ITables Table management."
  },
  "api/Apache.Ignite.Table.IgniteTuple.html": {
    "href": "api/Apache.Ignite.Table.IgniteTuple.html",
    "title": "Class IgniteTuple | Apache Ignite.NET API Documentation",
    "keywords": "Class IgniteTuple Namespace Apache.Ignite.Table Assembly Apache.Ignite.dll Ignite tuple. public sealed class IgniteTuple : IIgniteTuple, IEquatable<IgniteTuple> Inheritance object IgniteTuple Implements IIgniteTuple IEquatable<IgniteTuple> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors IgniteTuple(int) Initializes a new instance of the IgniteTuple class. public IgniteTuple(int capacity = 16) Parameters capacity int Capacity. Properties FieldCount Gets the number of columns. public int FieldCount { get; } Property Value int this[int] Gets the value of the specified column as an object. public object? this[int ordinal] { get; set; } Parameters ordinal int The zero-based column ordinal. Property Value object this[string] Gets the value of the specified column as an object. public object? this[string name] { get; set; } Parameters name string The column name. Property Value object Methods Equals(IgniteTuple?) public bool Equals(IgniteTuple? other) Parameters other IgniteTuple Returns bool Equals(object?) public override bool Equals(object? obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int GetName(int) Gets the name of the column, given the zero-based column ordinal. public string GetName(int ordinal) Parameters ordinal int Zero-based column ordinal. Returns string Column name. GetOrdinal(string) Gets the column ordinal given the name of the column, or -1 when the column with the given name does not exist. public int GetOrdinal(string name) Parameters name string Column name. Returns int Column ordinal, or -1 when the column with the given name does not exist. ToString() public override string ToString() Returns string"
  },
  "api/Apache.Ignite.Table.IIgniteTuple.html": {
    "href": "api/Apache.Ignite.Table.IIgniteTuple.html",
    "title": "Interface IIgniteTuple | Apache Ignite.NET API Documentation",
    "keywords": "Interface IIgniteTuple Namespace Apache.Ignite.Table Assembly Apache.Ignite.dll Ignite Tuple. Default implementation is IgniteTuple. public interface IIgniteTuple Properties FieldCount Gets the number of columns. int FieldCount { get; } Property Value int this[int] Gets the value of the specified column as an object. object? this[int ordinal] { get; set; } Parameters ordinal int The zero-based column ordinal. Property Value object this[string] Gets the value of the specified column as an object. object? this[string name] { get; set; } Parameters name string The column name. Property Value object Methods Equals(IIgniteTuple?, IIgniteTuple?) Determines whether the specified object instances are considered equal. public static bool Equals(IIgniteTuple? tuple1, IIgniteTuple? tuple2) Parameters tuple1 IIgniteTuple The first tuple to compare. tuple2 IIgniteTuple The second tuple to compare. Returns bool true if the tuples are considered equal; otherwise, false. If both tuple1 and tuple1 are null, the method returns true. GetHashCode(IIgniteTuple) Gets a hash code for the current tuple according to column names and values. public static int GetHashCode(IIgniteTuple tuple) Parameters tuple IIgniteTuple Tuple. Returns int A hash code for the specified tuple. GetName(int) Gets the name of the column, given the zero-based column ordinal. string GetName(int ordinal) Parameters ordinal int Zero-based column ordinal. Returns string Column name. GetOrdinal(string) Gets the column ordinal given the name of the column, or -1 when the column with the given name does not exist. int GetOrdinal(string name) Parameters name string Column name. Returns int Column ordinal, or -1 when the column with the given name does not exist."
  },
  "api/Apache.Ignite.Table.IKeyValueView-2.html": {
    "href": "api/Apache.Ignite.Table.IKeyValueView-2.html",
    "title": "Interface IKeyValueView<TK, TV> | Apache Ignite.NET API Documentation",
    "keywords": "Interface IKeyValueView<TK, TV> Namespace Apache.Ignite.Table Assembly Apache.Ignite.dll Key-value view provides access to table records in form of separate key and value parts. public interface IKeyValueView<TK, TV> where TK : notnull where TV : notnull Type Parameters TK Key type. TV Value type. Methods AsQueryable(ITransaction?, QueryableOptions?) Gets a IQueryable<T> to perform Ignite SQL queries using LINQ (see https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/). Use ToResultSetAsync<T>(IQueryable<T>) to materialize query results asynchronously. IQueryable<KeyValuePair<TK, TV>> AsQueryable(ITransaction? transaction = null, QueryableOptions? options = null) Parameters transaction ITransaction Optional transaction. options QueryableOptions Options. Returns IQueryable<KeyValuePair<TK, TV>> IQueryable<T>. ContainsAsync(ITransaction?, TK) Determines if the table contains an entry for the specified key. Task<bool> ContainsAsync(ITransaction? transaction, TK key) Parameters transaction ITransaction The transaction or null to auto commit. key TK Key. Returns Task<bool> A Task representing the asynchronous operation. The task result is true if a value exists for the specified key, and false otherwise. GetAllAsync(ITransaction?, IEnumerable<TK>) Gets multiple records by keys. Task<IDictionary<TK, TV>> GetAllAsync(ITransaction? transaction, IEnumerable<TK> keys) Parameters transaction ITransaction The transaction or null to auto commit. keys IEnumerable<TK> Keys. Returns Task<IDictionary<TK, TV>> A Task representing the asynchronous operation. The task result contains a dictionary with specified keys and their values. If a record for a particular key does not exist, it will not be present in the resulting dictionary. GetAndPutAsync(ITransaction?, TK, TV) Puts a value with a given key and returns previous value for that key. Task<Option<TV>> GetAndPutAsync(ITransaction? transaction, TK key, TV val) Parameters transaction ITransaction The transaction or null to auto commit. key TK Key. val TV Value. Returns Task<Option<TV>> A Task<TResult> representing the asynchronous operation. The task result contains the value for the specified key, or an Option<T> instance without a value when specified key is not present in the table. GetAndRemoveAsync(ITransaction?, TK) Gets and removes a value associated with the given key. Task<Option<TV>> GetAndRemoveAsync(ITransaction? transaction, TK key) Parameters transaction ITransaction The transaction or null to auto commit. key TK Key. Returns Task<Option<TV>> A Task<TResult> representing the asynchronous operation. The task result contains a value indicating whether the key was removed from the table. GetAndReplaceAsync(ITransaction?, TK, TV) Replaces a record with the same key columns if it exists. Task<Option<TV>> GetAndReplaceAsync(ITransaction? transaction, TK key, TV val) Parameters transaction ITransaction The transaction or null to auto commit. key TK Key. val TV Value. Returns Task<Option<TV>> A Task representing the asynchronous operation. The task result contains the previous value for the given key, or empty Option<T> if it did not exist. GetAsync(ITransaction?, TK) Gets a value associated with the given key. Task<Option<TV>> GetAsync(ITransaction? transaction, TK key) Parameters transaction ITransaction The transaction or null to auto commit. key TK Key. Returns Task<Option<TV>> A Task<TResult> representing the asynchronous operation. The task result contains the value for the specified key, or an Option<T> instance without a value when specified key is not present in the table. PutAllAsync(ITransaction?, IEnumerable<KeyValuePair<TK, TV>>) Puts multiple key-value pairs. Task PutAllAsync(ITransaction? transaction, IEnumerable<KeyValuePair<TK, TV>> pairs) Parameters transaction ITransaction The transaction or null to auto commit. pairs IEnumerable<KeyValuePair<TK, TV>> Pairs. Returns Task A Task<TResult> representing the asynchronous operation. PutAsync(ITransaction?, TK, TV) Puts a value with a given key. Task PutAsync(ITransaction? transaction, TK key, TV val) Parameters transaction ITransaction The transaction or null to auto commit. key TK Key. val TV Value. Returns Task A Task<TResult> representing the asynchronous operation. PutIfAbsentAsync(ITransaction?, TK, TV) Puts a value with a given key if the specified key is not present in the table. Task<bool> PutIfAbsentAsync(ITransaction? transaction, TK key, TV val) Parameters transaction ITransaction The transaction or null to auto commit. key TK Key. val TV Value. Returns Task<bool> A Task<TResult> representing the asynchronous operation. The task result contains a value indicating whether the value was added to the table. RemoveAllAsync(ITransaction?, IEnumerable<KeyValuePair<TK, TV>>) Removes records with given keys and values from the table. Task<IList<TK>> RemoveAllAsync(ITransaction? transaction, IEnumerable<KeyValuePair<TK, TV>> pairs) Parameters transaction ITransaction The transaction or null to auto commit. pairs IEnumerable<KeyValuePair<TK, TV>> Keys. Returns Task<IList<TK>> A Task<TResult> representing the asynchronous operation. The task result contains skipped keys. RemoveAllAsync(ITransaction?, IEnumerable<TK>) Removes values with given keys from the table. Task<IList<TK>> RemoveAllAsync(ITransaction? transaction, IEnumerable<TK> keys) Parameters transaction ITransaction The transaction or null to auto commit. keys IEnumerable<TK> Keys. Returns Task<IList<TK>> A Task<TResult> representing the asynchronous operation. The task result contains skipped keys. RemoveAsync(ITransaction?, TK) Removes a value with a given key from the table. Task<bool> RemoveAsync(ITransaction? transaction, TK key) Parameters transaction ITransaction The transaction or null to auto commit. key TK Key. Returns Task<bool> A Task<TResult> representing the asynchronous operation. The task result contains a value indicating whether the key was removed from the table. RemoveAsync(ITransaction?, TK, TV) Removes a value with a given key from the table only if it is equal to the specified value. Task<bool> RemoveAsync(ITransaction? transaction, TK key, TV val) Parameters transaction ITransaction The transaction or null to auto commit. key TK Key. val TV Val. Returns Task<bool> A Task<TResult> representing the asynchronous operation. The task result contains a value indicating whether the key was removed from the table. ReplaceAsync(ITransaction?, TK, TV) Replaces a record with the same key columns if it exists, otherwise does nothing. Task<bool> ReplaceAsync(ITransaction? transaction, TK key, TV val) Parameters transaction ITransaction The transaction or null to auto commit. key TK Key. val TV Value. Returns Task<bool> A Task representing the asynchronous operation. The task result contains a value indicating whether a record with the specified key was replaced. ReplaceAsync(ITransaction?, TK, TV, TV) Replaces a record with a new one only if all existing columns have the same values as the specified oldVal. Task<bool> ReplaceAsync(ITransaction? transaction, TK key, TV oldVal, TV newVal) Parameters transaction ITransaction The transaction or null to auto commit. key TK Key. oldVal TV Old value. newVal TV New value. Returns Task<bool> A Task representing the asynchronous operation. The task result contains a value indicating whether a record was replaced."
  },
  "api/Apache.Ignite.Table.IRecordView-1.html": {
    "href": "api/Apache.Ignite.Table.IRecordView-1.html",
    "title": "Interface IRecordView<T> | Apache Ignite.NET API Documentation",
    "keywords": "Interface IRecordView<T> Namespace Apache.Ignite.Table Assembly Apache.Ignite.dll Record view interface provides methods to access table records. public interface IRecordView<T> where T : notnull Type Parameters T Record type. Methods AsQueryable(ITransaction?, QueryableOptions?) Gets a IQueryable<T> to perform Ignite SQL queries using LINQ (see https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/). Use ToResultSetAsync<T>(IQueryable<T>) to materialize query results asynchronously. IQueryable<T> AsQueryable(ITransaction? transaction = null, QueryableOptions? options = null) Parameters transaction ITransaction Optional transaction. options QueryableOptions Options. Returns IQueryable<T> IQueryable<T>. ContainsKeyAsync(ITransaction?, T) Determines if the table contains an entry for the specified key. Task<bool> ContainsKeyAsync(ITransaction? transaction, T key) Parameters transaction ITransaction The transaction or null to auto commit. key T A record with key columns set. Returns Task<bool> A Task representing the asynchronous operation. The task result is true if a value exists for the specified key, and false otherwise. DeleteAllAsync(ITransaction?, IEnumerable<T>) Deletes multiple records. If one or more keys do not exist, other records are still deleted. Task<IList<T>> DeleteAllAsync(ITransaction? transaction, IEnumerable<T> keys) Parameters transaction ITransaction The transaction or null to auto commit. keys IEnumerable<T> Record keys to delete. Returns Task<IList<T>> A Task representing the asynchronous operation. The task result contains records from keys that did not exist. DeleteAllExactAsync(ITransaction?, IEnumerable<T>) Deletes multiple exactly matching records. If one or more records do not exist, other records are still deleted. Task<IList<T>> DeleteAllExactAsync(ITransaction? transaction, IEnumerable<T> records) Parameters transaction ITransaction The transaction or null to auto commit. records IEnumerable<T> Records to delete. Returns Task<IList<T>> A Task representing the asynchronous operation. The task result contains records from records that did not exist. DeleteAsync(ITransaction?, T) Deletes a record with the specified key. Task<bool> DeleteAsync(ITransaction? transaction, T key) Parameters transaction ITransaction The transaction or null to auto commit. key T A record with key columns set. Returns Task<bool> A Task representing the asynchronous operation. The task result contains a value indicating whether a record with the specified key was deleted. DeleteExactAsync(ITransaction?, T) Deletes a record only if all existing columns have the same values as the specified record. Task<bool> DeleteExactAsync(ITransaction? transaction, T record) Parameters transaction ITransaction The transaction or null to auto commit. record T A record with all columns set. Returns Task<bool> A Task representing the asynchronous operation. The task result contains a value indicating whether a record was deleted. GetAllAsync(ITransaction?, IEnumerable<T>) Gets multiple records by keys. Task<IList<Option<T>>> GetAllAsync(ITransaction? transaction, IEnumerable<T> keys) Parameters transaction ITransaction The transaction or null to auto commit. keys IEnumerable<T> Collection of records with key columns set. Returns Task<IList<Option<T>>> A Task representing the asynchronous operation. The task result contains matching records with all columns filled from the table. The order of collection elements is guaranteed to be the same as the order of keys. If a record does not exist, the element at the corresponding index of the resulting collection will be empty Option<T>. GetAndDeleteAsync(ITransaction?, T) Gets and deletes a record with the specified key. Task<Option<T>> GetAndDeleteAsync(ITransaction? transaction, T key) Parameters transaction ITransaction The transaction or null to auto commit. key T A record with key columns set. Returns Task<Option<T>> A Task representing the asynchronous operation. The task result contains deleted record or empty Option<T> if it did not exist. GetAndReplaceAsync(ITransaction?, T) Replaces a record with the same key columns if it exists. Task<Option<T>> GetAndReplaceAsync(ITransaction? transaction, T record) Parameters transaction ITransaction The transaction or null to auto commit. record T Record to insert. Returns Task<Option<T>> A Task representing the asynchronous operation. The task result contains the previous value for the given key, or empty Option<T> if it did not exist. GetAndUpsertAsync(ITransaction?, T) Inserts a record into the table and returns previous record. Task<Option<T>> GetAndUpsertAsync(ITransaction? transaction, T record) Parameters transaction ITransaction The transaction or null to auto commit. record T Record to upsert. Returns Task<Option<T>> A Task representing the asynchronous operation. The task result contains replaced record or null if it did not exist. GetAsync(ITransaction?, T) Gets a record by key. Task<Option<T>> GetAsync(ITransaction? transaction, T key) Parameters transaction ITransaction The transaction or null to auto commit. key T A record with key columns set. Returns Task<Option<T>> A Task representing the asynchronous operation. The task result contains a record with all columns. InsertAllAsync(ITransaction?, IEnumerable<T>) Inserts multiple records into the table, skipping existing ones. Task<IList<T>> InsertAllAsync(ITransaction? transaction, IEnumerable<T> records) Parameters transaction ITransaction The transaction or null to auto commit. records IEnumerable<T> Records to insert. Returns Task<IList<T>> A Task representing the asynchronous operation. The task result contains skipped records. InsertAsync(ITransaction?, T) Inserts a record into the table if it does not exist. Task<bool> InsertAsync(ITransaction? transaction, T record) Parameters transaction ITransaction The transaction or null to auto commit. record T Record to insert. Returns Task<bool> A Task representing the asynchronous operation. The task result contains a value indicating whether the record was inserted. Returns false if a record with the same key already exists. ReplaceAsync(ITransaction?, T) Replaces a record with the same key columns if it exists, otherwise does nothing. Task<bool> ReplaceAsync(ITransaction? transaction, T record) Parameters transaction ITransaction The transaction or null to auto commit. record T Record to insert. Returns Task<bool> A Task representing the asynchronous operation. The task result contains a value indicating whether a record with the specified key was replaced. ReplaceAsync(ITransaction?, T, T) Replaces a record with a new one only if all existing columns have the same values as the specified record. Task<bool> ReplaceAsync(ITransaction? transaction, T record, T newRecord) Parameters transaction ITransaction The transaction or null to auto commit. record T Record to replace. newRecord T Record to replace with. Returns Task<bool> A Task representing the asynchronous operation. The task result contains a value indicating whether a record was replaced. UpsertAllAsync(ITransaction?, IEnumerable<T>) Inserts multiple records into the table, replacing existing ones. Task UpsertAllAsync(ITransaction? transaction, IEnumerable<T> records) Parameters transaction ITransaction The transaction or null to auto commit. records IEnumerable<T> Records to upsert. Returns Task A Task representing the asynchronous operation. UpsertAsync(ITransaction?, T) Inserts a record into the table if it does not exist or replaces the existing one. Task UpsertAsync(ITransaction? transaction, T record) Parameters transaction ITransaction The transaction or null to auto commit. record T Record to upsert. Returns Task A Task representing the asynchronous operation."
  },
  "api/Apache.Ignite.Table.ITable.html": {
    "href": "api/Apache.Ignite.Table.ITable.html",
    "title": "Interface ITable | Apache Ignite.NET API Documentation",
    "keywords": "Interface ITable Namespace Apache.Ignite.Table Assembly Apache.Ignite.dll Table view. public interface ITable Properties KeyValueBinaryView Gets the key-value binary view. IKeyValueView<IIgniteTuple, IIgniteTuple> KeyValueBinaryView { get; } Property Value IKeyValueView<IIgniteTuple, IIgniteTuple> Name Gets the table name. string Name { get; } Property Value string RecordBinaryView Gets the record binary view. IRecordView<IIgniteTuple> RecordBinaryView { get; } Property Value IRecordView<IIgniteTuple> Methods GetKeyValueView<TK, TV>() Gets the record view mapped to specified key and value types. Table columns will be mapped to properties or fields by name, ignoring case. Any fields are supported, including private and readonly. IKeyValueView<TK, TV> GetKeyValueView<TK, TV>() where TK : notnull where TV : notnull Returns IKeyValueView<TK, TV> Key-value view. Type Parameters TK Key type. TV Value type. GetRecordView<T>() Gets the record view mapped to specified type T. Table columns will be mapped to properties or fields by name, ignoring case. Any fields are supported, including private and readonly. IRecordView<T> GetRecordView<T>() where T : notnull Returns IRecordView<T> Record view. Type Parameters T Record type."
  },
  "api/Apache.Ignite.Table.ITables.html": {
    "href": "api/Apache.Ignite.Table.ITables.html",
    "title": "Interface ITables | Apache Ignite.NET API Documentation",
    "keywords": "Interface ITables Namespace Apache.Ignite.Table Assembly Apache.Ignite.dll Table management. public interface ITables Methods GetTableAsync(string) Gets a table by name. Task<ITable?> GetTableAsync(string name) Parameters name string Table name. Returns Task<ITable> A Task representing the asynchronous operation. GetTablesAsync() Gets all tables. Task<IList<ITable>> GetTablesAsync() Returns Task<IList<ITable>> A Task representing the asynchronous operation."
  },
  "api/Apache.Ignite.Transactions.html": {
    "href": "api/Apache.Ignite.Transactions.html",
    "title": "Namespace Apache.Ignite.Transactions | Apache Ignite.NET API Documentation",
    "keywords": "Namespace Apache.Ignite.Transactions Structs TransactionOptions Ignite transaction options. Interfaces ITransaction Ignite transaction. Use BeginAsync() to start a new transaction. ITransactions Ignite transactions API."
  },
  "api/Apache.Ignite.Transactions.ITransaction.html": {
    "href": "api/Apache.Ignite.Transactions.ITransaction.html",
    "title": "Interface ITransaction | Apache Ignite.NET API Documentation",
    "keywords": "Interface ITransaction Namespace Apache.Ignite.Transactions Assembly Apache.Ignite.dll Ignite transaction. Use BeginAsync() to start a new transaction. public interface ITransaction : IAsyncDisposable Inherited Members IAsyncDisposable.DisposeAsync() Properties IsReadOnly Gets a value indicating whether this transaction is read-only. bool IsReadOnly { get; } Property Value bool Methods CommitAsync() Commits the transaction. Task CommitAsync() Returns Task A Task representing the asynchronous operation. RollbackAsync() Rolls back the transaction. Task RollbackAsync() Returns Task A Task representing the asynchronous operation."
  },
  "api/Apache.Ignite.Transactions.ITransactions.html": {
    "href": "api/Apache.Ignite.Transactions.ITransactions.html",
    "title": "Interface ITransactions | Apache Ignite.NET API Documentation",
    "keywords": "Interface ITransactions Namespace Apache.Ignite.Transactions Assembly Apache.Ignite.dll Ignite transactions API. public interface ITransactions Methods BeginAsync() Starts a new transaction. Task<ITransaction> BeginAsync() Returns Task<ITransaction> A Task representing the asynchronous operation. BeginAsync(TransactionOptions) Starts a new transaction. Task<ITransaction> BeginAsync(TransactionOptions options) Parameters options TransactionOptions Transaction options. Returns Task<ITransaction> A Task representing the asynchronous operation."
  },
  "api/Apache.Ignite.Transactions.TransactionOptions.html": {
    "href": "api/Apache.Ignite.Transactions.TransactionOptions.html",
    "title": "Struct TransactionOptions | Apache Ignite.NET API Documentation",
    "keywords": "Struct TransactionOptions Namespace Apache.Ignite.Transactions Assembly Apache.Ignite.dll Ignite transaction options. public readonly record struct TransactionOptions : IEquatable<TransactionOptions> Implements IEquatable<TransactionOptions> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors TransactionOptions(bool) Ignite transaction options. public TransactionOptions(bool ReadOnly) Parameters ReadOnly bool Whether to start a read-only transaction. Read-only transactions provide a snapshot view of data at a certain point in time. They are lock-free and perform better than normal transactions, but do not permit data modifications. Properties ReadOnly Whether to start a read-only transaction. Read-only transactions provide a snapshot view of data at a certain point in time. They are lock-free and perform better than normal transactions, but do not permit data modifications. public bool ReadOnly { get; init; } Property Value bool"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Ignite.NET API Documentation | Apache Ignite.NET API Documentation",
    "keywords": "Ignite.NET API Documentation IgniteClient is the API entry point."
  },
  "articles/linq.html": {
    "href": "articles/linq.html",
    "title": "Apache Ignite LINQ provider | Apache Ignite.NET API Documentation",
    "keywords": "Apache Ignite LINQ provider What? LINQ provider translates C# LINQ expressions into Ignite-specific SQL. For example, the following two snippets achieve the same result: SQL var query = \"select KEY, VAL from PUBLIC.TBL1 where (KEY > ?) order by KEY asc\"; await using IResultSet<IIgniteTuple> resultSet = await Client.Sql.ExecuteAsync(transaction: null, query, 3); var queryResults = new List<Poco>(); await foreach (IIgniteTuple row in resultSet) { queryResults.Add(new Poco { Key = (long)row[0]!, Val = (string?)row[1] }); } LINQ var table = await Client.Tables.GetTableAsync(\"TBL1\"); IQueryable<Poco> query = table!.GetRecordView<Poco>().AsQueryable() .Where(x => x.Key > 3) .OrderBy(x => x.Key); List<Poco> queryResults = await query.ToListAsync(); Why? LINQ has the following advantages over SQL: Queries are strongly typed and compile-time checked: Easier to write and maintain with IDE support (auto-completion, navigation, find usages). Refactoring-friendly: rename a column and all queries are updated at once. Ignite-specific SQL knowledge is not required, and most C# developers are already familiar with LINQ. Safe against SQL injections. Results are mapped to types naturally. Getting Started Create a table. await Client.Sql.ExecuteAsync(null, @\"CREATE TABLE PUBLIC.PERSON (NAME VARCHAR PRIMARY KEY, AGE INT)\"); Define classes (or records) that represent tables. Member names should match column names (case-insensitive). If a column name is not a valid C# identifier, use [Column(\"name\")] attribute to specify the name. public record Person(string Name, int Age, string Address, string Status); Obtain a table reference ITable table = await Client.Tables.GetTableAsync(\"PERSON\"); Use GetRecordView<T>() to get a typed view of the table. IRecordView<Person> view = table.GetRecordView<Person>(); Use AsQueryable() to perform LINQ queries on IRecordView<T>. List<string> names = await view.AsQueryable() .Where(x => x.Age > 30) .Select(x => x.Name) .ToListAsync(); Inspecting Generated SQL Viewing generated SQL is useful for debugging and performance tuning. There are two ways to do it: IgniteQueryableExtensions.ToQueryString() extension method: IQueryable<Person> query = table.GetRecordView<Person>().AsQueryable().Where(x => x.Age > 30); string sql = query.ToQueryString(); Debug logging: var cfg = new IgniteClientConfiguration { Logger = new ConsoleLogger { MinLevel = LogLevel.Debug }, ... }; using var client = IgniteClient.StartAsync(cfg); ... All generated SQL will be logged with Debug level to the specified logger. Using Transactions Transaction can be passed to the LINQ provider via the first AsQueryeable parameter: await using var tx = await client.Transactions.BeginAsync(); var view = (await client.Tables.GetTableAsync(\"person\"))!.GetRecordView<Person>(); pocoView.AsQueryable(tx)...; Custom Query Options Custom query options (timeout, page size) can be specified via the second AsQueryable parameter with QueryableOptions: var options = new QueryableOptions { PageSize = 512, Timeout = TimeSpan.FromSeconds(30) }; table.GetRecordView<Person>().AsQueryable(options: options)...; Result Materialization Materialization is the process of converting query results (IQueryable<T>) into an object or a collection of objects. LINQ is lazy. Nothing happens (no network calls, no SQL translation) until the query is materialized. For example, the following code only constructs an expression, but does not execute anything: IQueryable<Person> query = table!.GetRecordView<Person>().AsQueryable() .Where(x => x.Key > 3) .OrderBy(x => x.Key); Query execution and materialization can be triggered in multiple ways: Iteration foreach (var person in query) { ... } await foreach (var person in query.AsAsyncEnumerable()) { ... } ToList, ToDictionary List<Person> list = query.ToList(); Dictionary<string, int> dict = query.ToDictionary(x => x.Name, x => x.Age); Async variants are available in IgniteQueryableExtensions: List<Person> list = await query.ToListAsync(); Dictionary<string, int> dict = await query.ToDictionaryAsync(x => x.Name, x => x.Age); Single Result Functions Person first = query.First(); Person? firstOrDefault = query.FirstOrDefault(); Person single = query.Single(); Person? singleOrDefault = query.SingleOrDefault(); int maxAge = query.Max(x => x.Age); int minAge = query.Min(x => x.Age); int avgAge = query.Average(x => x.Age); int sumAge = query.Sum(x => x.Age); int count = query.Count(); long longCount = query.LongCount(); bool any = query.Any(x => x.Age > 30); bool all = query.All(x => x.Age > 30); Async variants are available in IgniteQueryableExtensions: Person first = await query.FirstAsync(); Person? firstOrDefault = await query.FirstOrDefaultAsync(); Person single = await query.SingleAsync(); Person? singleOrDefault = await query.SingleOrDefaultAsync(); int maxAge = await query.MaxAsync(x => x.Age); int minAge = await query.MinAsync(x => x.Age); int avgAge = await query.AverageAsync(x => x.Age); int sumAge = await query.SumAsync(x => x.Age); int count = await query.CountAsync(); long longCount = await query.LongCountAsync(); bool any = await query.AnyAsync(x => x.Age > 30); bool all = await query.AllAsync(x => x.Age > 30); Ignite-specific IResultSet Underlying IResultSet can be obtained via IgniteQueryableExtensions.ToResultSetAsync() extension method: await using IResultSet<Person> resultSet = await query.ToResultSetAsync(); Console.WriteLine(resultSet.Metadata); var rows = resultSet.CollectAsync(...); Obtaining IResultSet can be useful for access to metadata and CollectAsync method, which provides more control over result materialization. Supported LINQ Features Projections Projection is the process of converting query results into a different type. Among other things, projections are used to select a subset of columns. For example, Person table may have many columns, but we only need Name and Age. First, create a projection class: public record PersonInfo(string Name, int Age); Then, use Select to project query results: List<PersonInfo> result = query .Select(x => new PersonInfo(x.Name, x.Age)) .ToList(); Resulting SQL will select only those two columns, avoiding overfetching (overfetching is a common issue when ORM-generated query includes all table columns, but only a few of them are needed by the business logic). Ignite also supports anonymous type projections: var result = query.Select(x => new { x.Name, x.Age }).ToList(); Inner Joins Use standard Join method to perform joins on other tables: var customerQuery = customerTable.GetRecordView<Customer>().AsQueryable(); var orderQuery = orderTable.GetRecordView<Order>().AsQueryable(); var ordersByCustomer = customerQuery .Join(orderQuery, cust => cust.Id, order => order.CustId, (cust, order) => new { cust.Name, order.Amount }) .ToList(); Outer Joins Outer joins are supported via DefaultIfEmpty method. For example, not every book in a library is borrowed by a student, so a left outer join is used to retrieve all books and their current borrowers (if any): var bookQuery = bookTable.GetRecordView<Book>().AsQueryable(); var studentQuery = studentTable.GetRecordView<Student>().AsQueryable(); var booksWithStudents = bookQuery .Join(studentQuery.DefaultIfEmpty(), book => book.StudentId, student => student.Id, (book, student) => new { book.Title, student.Name }) .ToList(); Grouping Single column: var bookCountByAuthor = bookTable.GetRecordView<Book>().AsQueryable() .GroupBy(book => book.Author) .Select(grp => new { Author = grp.Key, Count = x.Count() }) .ToList(); Multiple columns - use anonymous type: var bookCountByAuthorAndYear = bookTable.GetRecordView<Book>().AsQueryable() .GroupBy(book => new { book.Author, book.Year }) .Select(grp => new { Author = grp.Key.Author, Year = grp.Key.Year, Count = x.Count() }) .ToList(); Aggregate functions Count, Sum, Min, Max, Average can be used with groupings. Ordering OrderBy, OrderByDescending, ThenBy, ThenByDescending are supported. Combine them to order by multiple columns: var booksOrderedByAuthorAndYear = bookTable.GetRecordView<Book>().AsQueryable() .OrderBy(book => book.Author) .ThenByDescending(book => book.Year) .ToList(); Aggregates All aggregate functions are supported: Count, Sum, Min, Max, Average. Async variants are available in IgniteQueryableExtensions. See examples in \"Single Result Functions\" above. Union, Intersect, Except Multiple result sets can be combined using Union, Intersect, Except methods. IQueryable<string> employeeEmails = employeeTable.GetRecordView<Employee>().AsQueryable() .Select(x => x.Email); IQueryable<string> customerEmails = customerTable.GetRecordView<Customer>().AsQueryable() .Select(x => x.Email); List<string> allEmails = employeeEmails.Union(customerEmails) .OrderBy(x => x) .ToList(); List<string> employeesThatAreCustomers = employeeEmails.Intersect(customerEmails).ToList(); Math Functions The following Math functions are supported (will be translated to SQL equivalents): Abs, Cos, Cosh, Acos, Sin, Sinh, Asin, Tan, Tanh, Atan, Ceiling, Floor, Exp, Log, Log10, Pow, Round, Sign, Sqrt, Truncate. The following Math functions are NOT supported (no equivalent in Ignite SQL engine): Acosh, Asinh, Atanh, Atan2, Log2, Log(x, y). Example: var triangles = table.GetRecordView<Triangle>().AsQueryable() .Select(t => new { Hypotenuse, Opposite = t.Hypotenuse * Math.Sin(t.Angle), Adjacent = t.Hypotenuse * Math.Cos(t.Angle) }) .ToList(); String Functions string.Compare(string), string.Compare(string, bool ignoreCase), concatenation s1 + s2 + s3, ToUpper, ToLower, Substring(start), Substring(start, len), Trim, Trim(char), TrimStart, TrimStart(char), TrimEnd, TrimEnd(char), Contains, StartsWith, EndsWith, IndexOf, Length, Replace. Example: List<string> fullNames = table.GetRecordView<Person>().AsQueryable() .Where(p => p.FirstName.StartsWith(\"Jo\")) .Select(p => new { FullName = p.FirstName.ToUpper() + \" \" + p.LastName.ToLower() }) .ToList(); Regular Expressions Regex.Replace is translated to regexp_replace function. List<string> addresses = table.GetRecordView<Person>().AsQueryable() .Select(p => new { Address = Regex.Replace(p.Address, @\"(\\d+)\", \"[$1]\") .ToList(); Keep in mind that regex engine within SQL may behave differently from .NET regex engine. DML (Bulk Update and Delete) Bulk update and delete with optional conditions are supported via ExecuteUpdateAsync and ExecuteDeleteAsync extensions methods on IQueryable<T>: var orders = orderTable.GetRecordView<Order>().AsQueryable(); await orders.Where(x => x.Amount == 0).ExecuteDeleteAsync(); Update statement can set properties to constant values or to an expression based on other properties of the same row: var orders = orderTable.GetRecordView<Order>().AsQueryable(); await orders .Where(x => x.CustomerId == customerId) .ExecuteUpdateAsync( order => order.SetProperty(x => x.Discount, 0.1m) .SetProperty(x => x.Note, x => x.Note + \" Happy birthday, \" + x.CustomerName)); Resulting SQL: update PUBLIC.tbl1 as _T0 set NOTE = concat(concat(_T0.NOTE, ?), _T0.CUSTOMERNAME), DISCOUNT = ? where (_T0.CUSTOMERID IS NOT DISTINCT FROM ?) Composing Queries IQueryable<T> expressions can be composed dynamically. A common use case is to compose a query based on user input. For example, optional filters on different columns can be applied to a query: public List<Book> GetBooks(string? author, int? year) { IQueryable<Book> query = bookTable.GetRecordView<Book>().AsQueryable(); if (!string.IsNullOrEmpty(author)) query = query.Where(x => x.Author == author); if (year != null) query = query.Where(x => x.Year == year); return query.ToList(); } Column Name Mapping Unless custom mapping is provided with [Column], LINQ provider will use property or field names as column names, using unquoted identifiers, which are case-insensitive. C# bookTable.GetRecordView<Book>().AsQueryable().Select(x => x.Author).ToList(); Resulting SQL select _T0.AUTHOR from PUBLIC.books as _T0 To use quoted identifiers, or to map column names to different property names, use [Column] attribute: public class Book { [Column(\"book_author\")] public string Author { get; set; } } // Or a record: public record Book([property: Column(\"book_author\")] string Author); Resulting SQL select _T0.\"book_author\" from PUBLIC.books as _T0 KeyValueView All examples above use IRecordView<T> to perform queries; LINQ provider supports IKeyValueView<TK, TV> equally well: IQueryable<KeyValuePair<int, Book>> query = bookTable.GetKeyValueView<int, Book>().AsQueryable(); List<Book> books = query .Where(x => x.Key > 10) .Select(x => x.Value) .ToList(); Performance Considerations Our benchmarks indicate that in real-world scenarios LINQ queries are on par with equivalent SQL queries. However, a small overhead still exists (due to query translation), and your mileage may vary depending on the query complexity, so it's recommended to measure the performance of your queries."
  },
  "index.html": {
    "href": "index.html",
    "title": "Apache Ignite 3 .NET Client | Apache Ignite.NET API Documentation",
    "keywords": "Apache Ignite 3 .NET Client .NET client for Apache Ignite - a distributed database for high‑performance applications with in‑memory speed. Key Features Full support of all Ignite APIs: SQL, Transactions, Key/Value, Compute. Connects to any number of Ignite nodes at the same time. Partition awareness: sends key-based requests to the right node. Load-balancing, failover, automatic reconnection and request retries. Built-in LINQ provider for strongly-typed SQL queries. Integrates with NodaTime to provide precise mapping to Ignite date/time types. Logging and metrics. High performance and fully asynchronous. Getting Started Below are a few examples of basic usage to get you started: // Connect to the cluster. var cfg = new IgniteClientConfiguration(\"127.0.0.1:10800\"); IIgniteClient client = await IgniteClient.StartAsync(cfg); // Start a read-only transaction. await using var tx = await client.Transactions.BeginAsync( new TransactionOptions { ReadOnly = true }); // Get table by name. ITable? table = await client.Tables.GetTableAsync(\"Person\"); // Get a strongly-typed view of table data using Person record. IRecordView<Person> view = table!.GetRecordView<Person>(); // Upsert a record with KV (NoSQL) API. await view.UpsertAsync(tx, new Person(1, \"John\")); // Query data with SQL. await using var resultSet = await client.Sql.ExecuteAsync<Person>( tx, \"SELECT * FROM Person\"); List<Person> sqlResults = await resultSet.ToListAsync(); // Query data with LINQ. List<string> names = view.AsQueryable(tx) .OrderBy(person => person.Name) .Select(person => person.Name) .ToList(); // Execute a distributed computation. IList<IClusterNode> nodes = await client.GetClusterNodesAsync(); int wordCount = await client.Compute.ExecuteAsync<int>( nodes, \"org.foo.bar.WordCountTask\", \"Hello, world!\"); API Walkthrough Configuration IgniteClientConfiguration is used to configure connections properties (endpoints, SSL), retry policy, logging, and timeouts. var cfg = new IgniteClientConfiguration { // Connect to multiple servers. Endpoints = { \"server1:10800\", \"server2:10801\" }, // Enable TLS. SslStreamFactory = new SslStreamFactory { SslClientAuthenticationOptions = new SslClientAuthenticationOptions { // Allow self-signed certificates. RemoteCertificateValidationCallback = (sender, certificate, chain, errors) => true } }, // Retry all read operations in case of network issues. RetryPolicy = new RetryReadPolicy { RetryLimit = 32 }, // Log to console. Logger = new ConsoleLogger { MinLevel = LogLevel.Debug } }; SQL SQL is the primary API for data access. It is used to create, drop, and query tables, as well as to insert, update, and delete data. using var client = await IgniteClient.StartAsync(new(\"localhost\")); await client.Sql.ExecuteAsync( null, \"CREATE TABLE Person (Id INT PRIMARY KEY, Name VARCHAR)\"); await client.Sql.ExecuteAsync( null, \"INSERT INTO Person (Id, Name) VALUES (1, 'John Doe')\"); await using var resultSet = await client.Sql.ExecuteAsync( null, \"SELECT Name FROM Person\"); await foreach (IIgniteTuple row in resultSet) Console.WriteLine(row[0]); Mapping SQL Results to User Types SQL results can be mapped to user types using ExecuteAsync<T> method. This is cleaner and more efficient than IIgniteTuple approach above. await using var resultSet = await client.Sql.ExecuteAsync<Person>( null, \"SELECT Name FROM Person\"); await foreach (Person p in resultSet) Console.WriteLine(p.Name); public record Person(int Id, string Name); Column names are matched to record properties by name. To map columns to properties with different names, use ColumnAttribute. DbDataReader (ADO.NET API) Another way to work with query results is System.Data.Common.DbDataReader, which can be obtained with ExecuteReaderAsync method. For example, you can bind query results to a DataGridView control: await using var reader = await Client.Sql.ExecuteReaderAsync( null, \"select * from Person\"); var dt = new DataTable(); dt.Load(reader); dataGridView1.DataSource = dt; NoSQL NoSQL API is used to store and retrieve data in a key/value fashion. It can be more efficient than SQL in certain scenarios. Existing tables can be accessed, but new tables can only be created with SQL. First, get a table by name: ITable? table = await client.Tables.GetTableAsync(\"Person\"); Then, there are two ways to look at the data. Record View Record view represents the entire row as a single object. It can be an IIgniteTuple or a user-defined type. IRecordView<IIgniteTuple> binaryView = table.RecordBinaryView; IRecordView<Person> view = table.GetRecordView<Person>(); await view.UpsertAsync(null, new Person(1, \"John\")); KeyValue View Key/Value view splits the row into key and value parts. IKeyValueView<IIgniteTuple, IIgniteTuple> kvBinaryView = table.KeyValueBinaryView; IKeyValueView<PersonKey, Person> kvView = table.GetKeyValueView<PersonKey, Person>(); await kvView.PutAsync(null, new PersonKey(1), new Person(\"John\")); LINQ Data can be queried and modified with LINQ using AsQueryable method. LINQ expressions are translated to SQL queries and executed on the server. ITable? table = await client.Tables.GetTableAsync(\"Person\"); IRecordView<Person> view = table!.GetRecordView<Person>(); IQueryable<string> query = view.AsQueryable() .Where(p => p.Id > 100) .Select(p => p.Name); List<string> names = await query.ToListAsync(); Generated SQL can be retrieved with ToQueryString extension method, or by enabling debug logging. Bulk update and delete with optional conditions are supported via ExecuteUpdateAsync and ExecuteDeleteAsync extensions methods on IQueryable<T> Transactions All operations on data in Ignite are transactional. If a transaction is not specified, an explicit transaction is started and committed automatically. To start a transaction, use ITransactions.BeginAsync method. Then, pass the transaction object to all operations that should be part of the same transaction. ITransaction tx = await client.Transactions.BeginAsync(); await view.UpsertAsync(tx, new Person(1, \"John\")); await client.Sql.ExecuteAsync( tx, \"INSERT INTO Person (Id, Name) VALUES (2, 'Jane')\"); await view.AsQueryable(tx) .Where(p => p.Id > 0) .ExecuteUpdateAsync(p => new Person(p.Id, p.Name + \" Doe\")); await tx.CommitAsync(); Compute Compute API is used to execute distributed computations on the cluster. Compute jobs should be implemented in Java, deployed to server nodes, and called by the full class name. IList<IClusterNode> nodes = await client.GetClusterNodesAsync(); string result = await client.Compute.ExecuteAsync<string>( nodes, \"org.acme.tasks.MyTask\", \"Task argument 1\", \"Task argument 2\"); Failover, Retry, Reconnect, Load Balancing Ignite client implements a number of features to improve reliability and performance: When multiple endpoints are configured, the client will maintain connections to all of them, and load balance requests between them. If a connection is lost, the client will try to reconnect, assuming it may be a temporary network issue or a node restart. Periodic heartbeat messages are used to detect connection issues early. If a user request fails due to a connection issue, the client will retry it automatically according to the configured IgniteClientConfiguration.RetryPolicy. Logging To enable logging, set IgniteClientConfiguration.Logger property. ConsoleLogger is provided out of the box. Other loggers can be integrated by implementing IIgniteLogger interface. Metrics Ignite client exposes a number of metrics with Apache.Ignite meter name through the System.Diagnostics.Metrics API that can be used to monitor system health and performance. For example, dotnet-counters tool can be used like this: dotnet-counters monitor --counters Apache.Ignite,System.Runtime --process-id PID Documentation Full documentation is available at https://ignite.apache.org/docs. Feedback Use any of the following channels to provide feedback: user@ignite.apache.org https://stackoverflow.com/questions/tagged/ignite https://github.com/apache/ignite-3/issues"
  }
}